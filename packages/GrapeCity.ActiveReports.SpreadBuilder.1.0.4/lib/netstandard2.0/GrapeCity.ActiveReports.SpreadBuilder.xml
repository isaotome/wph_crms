<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GrapeCity.ActiveReports.SpreadBuilder</name>
    </assembly>
    <members>
        <member name="T:GrapeCity.SpreadBuilder.ArgumentValidator">
            <summary>
            Provides some functions for simple argument validation.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.ArgumentValidator.EnsurePostive(System.Int16,System.String,System.String)">
            <summary>
            Throws an ArgumentOutOfRangeException if the specified argumentValue is less than zero.
            </summary>
            <param name="argumentValue">The argument value that is supposed to be positive.</param>
            <param name="argumentName">The name of the argument.  This value is used to provide the name to the ArgumentOutOfRangeException instance that will be thrown in the event that the specified argumentValue is negative.</param>
            <param name="extendedMessage">Additional information that should be passed on to the exception</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.ArgumentValidator.EnsurePostive(System.Int16,System.String)">
            <summary>
            Throws an ArgumentOutOfRangeException if the specified argumentValue is less than zero.
            </summary>
            <param name="argumentValue">The argument value that is supposed to be positive.</param>
            <param name="argumentName">The name of the argument.  This value is used to provide the name to the ArgumentOutOfRangeException instance that will be thrown in the event that the specified argumentValue is negative.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.ArgumentValidator.EnsurePostive(System.Int32,System.String)">
            <summary>
            Throws an ArgumentOutOfRangeException if the specified argumentValue is less than zero.
            </summary>
            <param name="argumentValue">The argument value that is supposed to be positive.</param>
            <param name="argumentName">The name of the argument.  This value is used to provide the name to the ArgumentOutOfRangeException instance that will be thrown in the event that the specified argumentValue is negative.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.ArgumentValidator.EnsurePostive(System.Int64,System.String)">
            <summary>
            Throws an ArgumentOutOfRangeException if the specified argumentValue is less than zero.
            </summary>
            <param name="argumentValue">The argument value that is supposed to be positive.</param>
            <param name="argumentName">The name of the argument.  This value is used to provide the name to the ArgumentOutOfRangeException instance that will be thrown in the event that the specified argumentValue is negative.</param>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Biff8StringWriter">
            <summary>
            Writes out BIFF8 "Compressed Format" Unicode Strings.  
            </summary>
            <remarks>
            See page 264 in the MS Excel 97 Developer's Kit.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Biff8StringWriter.WriteBiff8UnicodeString(System.String,System.IO.BinaryWriter)">
            <summary>
            Writes out a Unicode string according to the BIFF8 Unicode String "compressed format".  
            See MS Excel Developer's Kit Page 264.
            </summary>
            <param name="theString">
            A System.String containing the string you want written to BIFF8 unicode.
            </param>
            <param name="binWriter">The BinaryWriter to be used to write out the specifie string.</param>
            <remarks>
            Basically we just always write the string out in full unicode uncompressed at this time.  
            This function is here though, so we can write compressed unicode later with minimal 
            code impact (strings are written all over the code using this technique).
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Biff8StringWriter.GetBiff8UnicodeStringBytes(System.String)">
            <summary>
            Returns a byte array containg the special BIFF8 unicode string.
            </summary>
            <param name="theString"></param>
            <returns></returns>
            <remarks>
            The first byte of this array contains the 1 byte grbitOptionsFlag value.  
            The rest is the unicde string.
            In order to write a BIFF8 string out properly you'll have to write out the character count (cch) before writing out this byte array.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Biff8StringWriter.GetBiff8UnicodeStringByteCount(System.String)">
            <summary>
            Returns the number of bytes the string will consume when it is written out in the BIFF8 Unicode String "compressed format".
            This is here so that when you write out the BIFF8 record length (for every record) you can call this to get a byte count quickly.
            </summary>
            <param name="??"></param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.BiffColInfos">
            <summary>
            Collection for BiffColInfo class.  
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffColInfos.Compact(System.Collections.Generic.ICollection{GrapeCity.SpreadBuilder.BiffColInfo})">
            <summary>
            BiffColInfo's can specify a range for multiple columns instead of having to define a 
            single BiffColInfo for each column when multiple adjacent columns have the same 
            BiffColInfo information.  However, callers of SpreadBuilder can only add a 
            BiffColInfo for each column.  So before we save, we �compact� the BiffColInfo�s so 
            that multiple identical adjacent BiffColInfo�s are replaced by a single BiffColInfo 
            with multiple columns in it�s range.  The compacted array of BiffColInfo�s is 
            returned in pDest.
            </summary>
            <param name="pDest">
            The array to append this sheet's compacted BiffColInfo's to.
            </param>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.BiffColInfo">
            <summary>
            Used with BiffColInfos.  Represents BIFF COLINFO records.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffColInfo.width">
            <summary>
            Column width in 1/256s of a character width.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.BiffColInfo.Grbit">
            <summary>
            Gets grbit field.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.BiffRow">
            <summary>
            Represents a row that will be written to BIFF.  The reason we have a BiffRow is that BIFF stores cells by writing Row information followed by cells.  The BiffRow class mainly just holds all the cells in a particular row for a sheet.  Each cell contained in the BiffRow will be capable of writing itself directly to BIFF using the BiffCell.GetBiffBytes funciton.
            Row height is in 1/20ths of a point.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffRow.m_rowHeight">
            <summary>
            Row height in 1/20th of a point, Default is aprox 12.75.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffRow.#ctor(GrapeCity.SpreadBuilder.DDSheet,System.Int32)">
            <summary>
            The BiffRow constructor.  
            </summary>
            <param name="parentSheet">The sheet that this row is a member of.</param>
            <param name="iRow">The zero based row number that this BiffRow represents.</param>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffRow.m_parentSheet">
            <summary>
            Internal storage for the ParentSheet property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.BiffRow.ParentSheet">
            <summary>
            Sets/gets the parent DDSheet that this row is a member of.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffRow.m_row">
            <summary>
            Internal storage for the Row property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.BiffRow.Row">
            <summary>
            Sets/gets the zero based row number.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffRow.Clear">
            <summary>
            Removes all cells from this row.
            </summary>
            <remarks>Replaces Cleanup() in old code.</remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.BiffCellTable">
            <summary>
            Provies the enumerable collection of cells for BiffRow.
            Basically a wrapper around a Hashtable.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffCellTable._cellsDic">
            <summary>
            Used to internally store the cells in this row (actually the parent row).
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.BiffCellTable.Count">
            <summary>
            Returns the number of defined cells in this row.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.BiffCellTable.Item(System.Int32,System.Boolean)">
            <summary>
            Returns the BiffCellBase derivitive for the specified column.
            </summary>
            <param name="col">The zero based column you want a cell for.</param>
            <param name="bCreateIfNotExists">
            Will create a new BiffCellBlank (and add it to the collection so that future calls 
            to GetBiffCell will return the same cell) if one does not exist and you specify true 
            for the bCreateIfNeeded argument.
            </param>
            <returns>
            The cell for the specified column, or null if a cell does not exist for the specified 
            column and bCreateIfNotExists argument was false.
            BiffCellBlank will be the return type (which extends BiffCellBase) if a new cell is created.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffCellTable.AddCell(System.Int32,GrapeCity.SpreadBuilder.Cells.CellBase)">
            <summary>
            Add cell to the OrderedDictionary, and the keys' order is ascending.
            Generally, the order of cells created by XlsExport always be ascending,
            so compare the key from last one.
            </summary>
            <param name="columnIndex">And integer indicates the column index which position need be added to.</param>
            <param name="c">The CellBase</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffCellTable.SetCellBlank(System.Int32)">
            <summary>
            Gets the cell for the specified column, and converts it to a BiffCellBlank while preserving the 
            ParentRow, Column, and XFIndex values.  
            This function will create a new BiffCellBlank and add it into the collection if a cell does 
            not exist for the specified column.
            If the cell exists and is already the correct type, it will just be returned immediately.
            </summary>
            <param name="iColumn">The zero based column you need a cell object for.</param>
            <returns>
            The BiffCellBlank object for the specified column.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffCellTable.SetCellNumber(System.Int32,System.Double)">
            <summary>
            Gets the cell for the specified column, and converts it to a BiffCellNumber while preserving the 
            ParentRow, Column, and XFIndex values.  
            This function will create a new BiffCellNumber and add it into the collection if a cell does 
            not exist for the specified column.
            If the cell exists and is already the correct type, it will just be returned immediately.
            </summary>
            <param name="iColumn">The zero based column you need a cell object for.</param>
            <param name="dblValue">The value for the new cell.</param>
            <returns>
            The BiffCellNumber object for the specified column.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffCellTable.SetCellLabel(System.Int32,System.String)">
            <summary>
            Gets the cell for the specified column, and converts it to a BiffCellLabel while preserving the 
            ParentRow, Column, and XFIndex values.  
            This function will create a new BiffCellLabel and add it into the collection if a cell does 
            not exist for the specified column.
            If the cell exists and is already the correct type, it will just be returned immediately.
            </summary>
            <param name="iColumn">The zero based column you need a cell object for.</param>
            <param name="sValue">The value for the new cell.</param>
            <returns>
            The BiffCellLabel object for the specified column.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffCellTable.SetCellBoolean(System.Int32,System.Boolean)">
            <summary>
            Gets the cell for the specified column, and converts it to a CellBool while preserving the 
            ParentRow, Column, and XFIndex values.  
            This function will create a new CellBool and add it into the collection if a cell does 
            not exist for the specified column.
            If the cell exists and is already the correct type, it will just be returned immediately.
            </summary>
            <param name="iColumn">The zero based column you need a cell object for.</param>
            <param name="theValue">The value for the new cell.</param>
            <returns>
            The CellBool object for the specified column.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffCellTable.SetCellError(System.Int32,GrapeCity.SpreadBuilder.Cells.BiffCellBoolErrValues)">
            <summary>
            Set an error value to cell.
            </summary>
            <param name="iColumn">The zero based column you need a cell object for.</param>
            <param name="theValue">The value for the new cell.</param>
            <returns>The CellError object for the specified column.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffCellTable.GetFirstCol">
            <summary>
            Returns the lowest (first) column number in this collection of cells.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffCellTable.GetLastCol">
            <summary>
            Returns the highest (last) column number in this collection of cells.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffCellTable.Remove(System.Int32)">
            <summary>
            Used to remove a BiffCellBase from the sheet.  Used for CellMerging; When a cell becomes part of a merged area, it should no longer exist in the sheet.
            </summary>
            <param name="column"></param>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Cells.CellBase">
            <summary>
            The base class for the different cell types in BIFF (Blank, Boolean, Label, Number, etc...).
            Deriving classes will most likely be adding an additional member to hold the data that is specific to the cell type.
            For example, if the derived type is a BiffCellLabel the cell type specific data is a string.  If it's a BiffCellNumber 
            the cell type specific data is a double, etc...
            </summary>
            <remarks>*Note that since all BiffCell classes will be a member of a BiffRow class the cell does not store 
            it's row number, the parent BiffRow does.  To determine the row number, call BiffCell.ParentRow.Row.</remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.CellBase.DEFAULT_CELL_XF">
            <summary>
            This is the default XF index for Cells in a biff document.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.CellBase.#ctor(GrapeCity.SpreadBuilder.BiffRow,System.Int32,System.Int32)">
            <summary>
            To construct an BiffCell or it's derivitives a parent BiffRow that will contain this cell must be supplied.
            Classes deriving BiffCellBase must provide a constructor with a BiffRow aregument and use 
            "constructor-initializer" "colon syntax" to call the BiffCellBase constructor providing the BiffRow argument 
            specified in the derived classes constructor.  This is necssary as the BiffCellBase's constructor stores the 
            the parent BiffRow for functions in the BiffCell base and it's derived classes functionality.
            </summary>
            <param name="parent">The parent <see cref="T:GrapeCity.SpreadBuilder.BiffRow"/> that this cell is on.</param>
            <param name="iColumn">The column index for the cell.</param>
            <param name="iXFIndex">The index into the XF record table that supplies this cell's formmating information.</param>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellBase.ParentRow">
            <summary>
            Returns the parent BiffRow that this cell is a member of.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellBase.Column">
            <summary>
            Sets/gets the zero based column index of this cell.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellBase.XFIndex">
            <summary>
            Sets/gets the index to this cell's BIFF XF formatting record.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellBase.CellType">
            <summary>
            This member will disclose the type of cell.  Must be implemented by derived classes should return the 
            appropate (BIFF) cell type that the derived class is representing.
            </summary>
            <remarks>
            This is here for essentally one reason.  You could loop through a BiffRow containing cell's deriving 
            from BiffCellBase and check the CellType property to determine what member should be called to obtain the cell's value.  For example:
            <code>
            foreach(BiffCellBase cellBase in BiffRow.Cells)
            {
            	switch (cellBase.CellType)
            	{
            	case DDBiffCellTypes.Number:
            		MessageBox.Show("CellValue == " + (double)((BiffCellNumber)(cellBase).Value).ToString());
            	break;
            	case DDBiffCellTypes.Label
            		MessageBox.Show("CellValue == " + (string)((BiffCellLabel)(cellBase).Text));
            	break;
            	etc...
            	
            	}
            }
            </code>
            </remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellBase.CellValueType">
            <summary>
            Gets the cell value's type.
            </summary>
            <remarks>
            This property for internal use. The best way is to public this. But we should consider the backward
            compatibility to keep CellType property and CellTypes enum.
            </remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Cells.CellNumber">
            <summary>
            Represents a cell of BIFF record type "NUMBER" (203h).
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellNumber.CellType">
            <summary>
            Returns CellTypes.Number.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellNumber.CellValueType">
            <summary>
            Returns CellValues.Number.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellNumber.ValueNumber">
            <summary>
            Sets/gets the numeric (double) value for the cell.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Cells.CellLabel">
            <summary>
            Represents a cell of BIFF type "LABELSST" might write BIFF LABEL for BIFF7.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellLabel.CellType">
            <summary>
            Returns CellTypes.Label.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellLabel.CellValueType">
            <summary>
            Returns CellValues.SharedString.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellLabel.ValueText">
            <summary>
            Returns this cell's textual value.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellLabel.ParentWorkbook">
            <summary>
            Used to access the parent Workbook of this cell.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Cells.CellBlank">
            <summary>
            Represents a blank content value(a BIFF BLANK record (201h)).
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellBlank.CellType">
            <summary>
            Returns CellTypes.Blank.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellBlank.CellValueType">
            <summary>
            Returns CellValues.Blank.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Cells.CellError">
            <summary>
            Represents a cell whose value is a error(the BIFF BOOLERR record).
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellError.CellType">
            <summary>
            Returns CellTypes.BoolErr.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellError.CellValueType">
            <summary>
            Returns CellValues.Error.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.CellError._error">
            <summary>
            Stores the value for the Error property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellError.ValueError">
            <summary>
            Holds the value for this cell.  
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Cells.CellBool">
            <summary>
            Represents the BIFF BOOL record.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellBool.CellType">
            <summary>
            Returns CellTypes.BoolErr.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellBool.CellValueType">
            <summary>
            Returns CellValues.Boolean.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.CellBool._bool">
            <summary>
            Stores the value for the ValueBool property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.CellBool.ValueBool">
            <summary>
            Holds the value for this cell.  
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Cells.BiffCellBoolErrValues">
            <summary>
            Possible values for the BiffCellBoolErr.ValueBoolErr property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.BiffCellBoolErrValues.Null">
            <summary>
            "#NULL!" error value (when IsError is true).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.BiffCellBoolErrValues.False">
            <summary>
            False value when IsError is false.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.BiffCellBoolErrValues.True">
            <summary>
            True value when IsError is false.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.BiffCellBoolErrValues.Div0">
            <summary>
            "#DIV/0!" error value (when IsError is true).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.BiffCellBoolErrValues.Value">
            <summary>
            "#VALUE!" error value (when IsError is true).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.BiffCellBoolErrValues.Ref">
            <summary>
            "#REF!" error value (when IsError is true).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.BiffCellBoolErrValues.Name">
            <summary>
            "#NAME!" error value (when IsError is true).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.BiffCellBoolErrValues.Num">
            <summary>
            "#NUM!" error value (when IsError is true).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.BiffCellBoolErrValues.NA">
            <summary>
            "#N/A" error value (when IsError is true).
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Cells.DDCell">
            <summary>
            DDCell represents a single cell in a spreadsheet.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.DDCell.#ctor(GrapeCity.SpreadBuilder.DDSheet,System.Int32,System.Int32)">
            <summary>
            Internal constructor for DDCell that allows specification of this cell's parent spreadsheet.
            </summary>
            <param name="parentSheet">The parent sheet of this cell.</param>
            <param name="row">The row index of the cell that this cell object should represent.</param>
            <param name="column">The column index of the cell that this cell object should represent.</param>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.DDCell.m_parentSheet">
            <summary>
            Internal storage for the ParentSheet property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.ParentSheet">
            <summary>
            Sets/gets the DDSheet that this row is a member of.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.Type">
            <summary>
            The type of cell this DDCell object represents.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.DDCell.SetValue(System.Double)">
            <summary>
            Sets the cell's type to DDCellType.Number, and stores the cell's current value becomes the specified numeric value.
            </summary>
            <param name="dblValue">The numeric value to store as this cell's current value.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.DDCell.SetValue(System.String)">
            <summary>
            Sets the cell's type to DDCellType.Label, and stores the cell's current value becomes the specified string value.
            </summary>
            <param name="sValue">The string value to store as this cell's current value.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.DDCell.SetValue(GrapeCity.SpreadBuilder.Cells.BiffCellBoolErrValues)">
            <summary>
            Sets the cell's type to DDCellType.Boolean, and stores the cell's current value becomes the specified string value.
            </summary>
            <param name="bValue">The boolean value to store as this cell's current value.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.DDCell.SetValueBlank">
            <summary>
            Sets the cell's type to DDCellType.Blank and clears any other current value.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.DDCell.GetValue">
            <summary>
            Returns the cell's current value.
            </summary>
            <returns>
            Return type can be one of the following:
            A null reference (for a CellTypes.Blank cell type), System.String (for a CellTypes.Label cell type), 
            System.Double (for a CellTypes.Number cell type), or  one of the values in the BiffCellBoolErrValues enumeration (for CellTypes.BoolErr cell type). 
            Use the DDCell's Type property to determine the type of the cell before returning the value, 
            or check the type of the returned value.
            </returns>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.Alignment">
            <summary>
            Sets/gets the horizontal alignment value for the cell.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.VertAlignment">
            <summary>
            Sets/gets vertical alignment value for the cell.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.TextAngle">
            <summary>
            Gets/sets the text rotation for the cell, in degrees: 
            Values 0-90 is up 0-90 degrees, values 91-180 is down 1-90 degrees, and the value 255 
            is vertical.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.BorderBottomStyle">
            <summary>
            Sets/gets the line style for the bottom portion of the cell's border.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.BorderDiagonalStyle">
            <summary>
            Sets/gets the line style for the diagonal portion of the cell's border.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.BorderDiagonalEnum">
            <summary>
            Sets/returns whether a diagonal border goes up or down, or both (which forms an "X" accross the cell).
            </summary>
            <remarks>
            If you do not set this property the DiagonalEnum=0, and will not show up.
            </remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.BorderLeftStyle">
            <summary>
            Sets/gets the line style for the left portion of the cell's border.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.BorderRightStyle">
            <summary>
            Sets/gets the line style for the right portion of the cell's border.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.BorderTopStyle">
            <summary>
            Sets/gets the line style for the top portion of the cell's border.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.BorderBottomColor">
            <summary>
            Sets/gets the color of the bottom border.
            </summary>
            <remarks>See BorderTopColor property for more comments in the implementation of these BorderColor props.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.BorderDiagonalColor">
            <summary>
            Sets/gets the color of the diagonal border.
            </summary>
            <remarks>See BorderTopColor property for more comments in the implementation of these BorderColor props.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.BorderLeftColor">
            <summary>
            Sets/gets the color of the left border.
            </summary>
            <remarks>See BorderTopColor property for more comments in the implementation of these BorderColor props.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.BorderRightColor">
            <summary>
            Sets/gets the color of the right border.
            </summary>
            <remarks>See BorderTopColor property for more comments in the implementation of these BorderColor props.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.BorderTopColor">
            <summary>
            Sets/gets the color of the top border.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.FillColor">
            <summary>
            Sets/gets the "fill color" ("background color") for the cell.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.ForeColor">
            <summary>
            Sets/gets the "fore color" ("text color") for the cell.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.FontName">
            <summary>
            Sets/gets the name of the font.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.FontBold">
            <summary>
            Sets/gets the bold property of the cell's font.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.FontItalic">
            <summary>
            Sets/gets the italic property of the cell's font.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.FontSize">
            <summary>
            Sets/gets the size of the font in points.  It will round the number size specified to 
            the nearest half of a point.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.FontUnderlineStyle">
            <summary>
            Sets/gets the underline style for the cell.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.NumberFormat">
            <summary>
            Gets/sets an Excel style number format string.
            </summary>
            <remarks>
            For foreign currency symbols such as the Japanese Yen you can use a format such as: "[$�-0]#,##0.00".  Replace the Yen sign (�) with whatever currency symbol you want used there.
            </remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.WrapText">
            <summary>
            Gets/sets whether the cell's text can be wrapped or not.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.Hyperlink">
            <summary>
            Sets/gets a hyperlink for the cell that will automatically be launched by Excel when the cell is clicked.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.DDCell.Merge(System.UInt16,System.UInt16)">
            <summary>
            Merges this cell with adjacent cells.
            </summary>
            <param name="numberOfColumnsToMerge">
            The number of columns accross to be merged. 1 means only the next cell will be merged.
            </param>
            <param name="numberOfRowsToMerge">
            The number of rows down to be merged. 1 means only the next cell (in the specified direction) will be merged.
            </param>
            <remarks>Do not merge a cell more than once.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.IsMerged">
            <summary>
            Returns true if this cell is in a merged group of cells.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.DDCell.UnMerge">
            <summary>
            Will cause this cell and all cell's that are currently merged with this cell to be un-merged, and behave as independent cells with their own value and style.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.MergeArea">
            <summary>
            Returns a MergeArea object that represents the merged range containing this cell. 
            If this cell is not in a merged area, this property returns MergeArea.Empty. 
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCell.FontStrikeOut">
            <summary>
            Sets/gets the bold property of the cell's font.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Cells.CellTypes">
            <summary>
            The different types of spreadsheet cells that SpreadBuilder supports.  This value is used with the DDCell class's Type property.
            </summary>
            <remarks>
            At this time Excel's file format supports more types of cells than DDCell.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.CellTypes.Blank">
            <summary>
            Blank
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.CellTypes.Label">
            <summary>
            Label
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.CellTypes.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.CellTypes.BoolErr">
            <summary>
            Bool
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Cells.CellValueTypes">
            <summary>
            The different types of spreadsheet cells that SpreadBuilder supports.  This value is used with the DDCell class's CellValue property.
            </summary>
            <remarks>
            At this time Excel's file format supports more types of cells than DDCell.
            </remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Cells.DDCells">
            <summary>
            Provides public API for changing format settings for cells
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.Alignment">
            <summary>
            Sets the horizontal alignment value for all cells.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.VertAlignment">
            <summary>
            Sets vertical alignment value for all cells.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.TextAngle">
            <summary>
            Sets the text rotation for each cell, in degrees: 
            Values 0-90 is up 0-90 degrees, values 91-180 is down 1-90 degrees, and the value 255 
            is vertical.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.BorderBottomStyle">
            <summary>
            Sets the line style for the bottom portion of each cell's border.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.BorderDiagonalStyle">
            <summary>
            Sets/gets the line style for the diagonal portion of each cell's border.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.BorderDiagonalEnum">
            <summary>
            Sets whether a diagonal border goes up or down, or both (which forms an "X" accross the cell).
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.BorderLeftStyle">
            <summary>
            Sets the line style for the left portion of each cell's border.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.BorderRightStyle">
            <summary>
            Sets the line style for the right portion of each cell's border.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.BorderTopStyle">
            <summary>
            Sets the line style for the top portion of each cell's border.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.BorderBottomColor">
            <summary>
            Sets the color of the bottom border.
            </summary>
            <remarks>See BorderTopColor property for more comments in the implementation of these BorderColor props.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.BorderDiagonalColor">
            <summary>
            Sets the color of the diagonal border.
            </summary>
            <remarks>See BorderTopColor property for more comments in the implementation of these BorderColor props.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.BorderLeftColor">
            <summary>
            Sets the color of the left border.
            </summary>
            <remarks>See BorderTopColor property for more comments in the implementation of these BorderColor props.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.BorderRightColor">
            <summary>
            Sets the color of the right border.
            </summary>
            <remarks>See BorderTopColor property for more comments in the implementation of these BorderColor props.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.BorderTopColor">
            <summary>
            Sets the color of the top border.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.FillColor">
            <summary>
            Sets the "fill color" ("background color") for each cell.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.ForeColor">
            <summary>
            Sets the "fore color" ("text color") for each cell.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.FontName">
            <summary>
            Sets the name of the font.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.FontBold">
            <summary>
            Sets the bold property of the cell's font.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.FontItalic">
            <summary>
            Sets the italic property of the cell's font.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.FontStrikeOut">
            <summary>
            Sets/gets the bold property of the cell's font.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.FontSize">
            <summary>
            Sets the size of the font in points.  It will round the number size specified to 
            the nearest half of a point.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.FontUnderlineStyle">
            <summary>
            Sets the underline style for the cell.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.NumberFormat">
            <summary>
            Sets an Excel style number format string.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.WrapText">
            <summary>
            Gets/sets whether the cell's text can be wrapped or not.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.DDCells.Count">
            <summary>
            Gets the number of cells contained in this collection
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.DDCells.System#Collections#Generic#IEnumerable{GrapeCity#SpreadBuilder#Cells#DDCell}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.DDCells.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Cells.MergeAreasRecord">
            <summary>
            Optional record defining a square area of cells to "merged" into one cell.  This record is outputted per worksheet.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.MergeAreasRecord.sid">
            <summary>
            Returns the MergeAreasRecord's record ID.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.MergeAreasRecord.Count">
            <summary>
            Returns the number of MergeAreas represented by this MergeAreasRecord instance.
            </summary>
            <remarks>
            If there are zero merged regions this record does not need to be written.</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.MergeAreasRecord.AddNew(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Add a rectangular area to consider a merged cell. 
            </summary>
            <param name="rowFrom">The topmost row of the merged area.</param>
            <param name="rowTo">The lowest row of the merged area.</param>
            <param name="columnFrom">The leffmost row of the merged area.</param>
            <param name="columnTo">The rightmost row of the merged area.</param>
            <returns>The index the newly added region will be stored at in the merged area collection.  This index could be invalid if a MergeArea is removed.
            </returns>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.MergeAreasRecord.Item(System.Int32)">
            <summary>
            Returns the MergeArea at the specified index.
            </summary>
            <param name="index">The index of the MergeArea to return.</param>
            <returns>MergeArea at the specified index.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.MergeAreasRecord.RemoveAt(System.Int32)">
            <summary>
            Removes the merged region at the specified index.
            </summary>
            <param name="index">The index to remove the region at.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.MergeAreasRecord.ToString">
            <summary>
            Overrides ToString and returns information about the instance suitable for debugging purposes.
            </summary>
            <returns>Debugging information.</returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Cells.MergeArea">
            <summary>
            Rpresents a merged rectangular region of cells.  
            </summary>
            <remarks>
            This class is immutable, you cannot change the values once an instance has been initialized.  If you want to extend or truncate an existing MergeArea, you need to remove the existing one, and create and add a new one representing the extended or truncated region.
            </remarks>
            <internal>
            The MergeAreasRecord is actually a collection of these MergeArea records represent each rectangular area on the sheet that is merged.
            </internal>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.MergeArea.SizeOf">
            <summary>
            Returns the size of this data when written to BIFF.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.MergeArea.Empty">
            <summary>
            Represents an empty merge area.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.MergeArea.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializes an instance of the MergeArea class with the specified cell coordinates.
            </summary>
            <param name="rowFrom">The top most row of the merged rectangular region.</param>
            <param name="rowTo">The bottom most row of the merged rectangular region.</param>
            <param name="columnFrom">The leftmost column of the merged rectangular region.</param>
            <param name="columnTo">The rightmost column of the merged rectangular region.</param>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.MergeArea.RowFrom">
            <summary>
            The upper row of the rectangular merged region.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.MergeArea.RowTo">
            <summary>
            The lower row of the rectangular merged region.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.MergeArea.ColumnFrom">
            <summary>
            The leftmost column of the rectangular merged region.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.MergeArea.ColumnTo">
            <summary>
            The rightmost column of the rectangular merged region.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.MergeArea.ContainsCell(System.Int32,System.Int32)">
            <summary>
            Returns true if this MergeArea contains the cell at the specified row &amp; column index.
            </summary>
            <param name="row">The row of the cell.</param>
            <param name="column">The column of the cell.</param>
            <returns>True if the MergeArea contains the specified cell.</returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Cells.SharedStrings">
            <summary>
            Contains all the unique strings of a the cells in a workbook.  
            Used for adding all strings to the table, as each cell is written.  Then this table is capable of writing the workbook global shared string table records (SST &amp; ExtSST).
            Once you add a string, it cannot be removed.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.SharedStrings.stringEntries">
            The list of entries in the order they will be written.
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Cells.SharedStrings.stringEntryToIndexMap">
            Maps a string to its index in the stringEntries list.  We use this to find duplicate strings.
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.SharedStrings.#ctor">
            <summary>
            Initializes a new instance of the SharedStrings class.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.SharedStrings.Add(System.String)">
            <summary>
            Adds the specified string to the string table.
            </summary>
            <param name="entry">The string entry to be added to the collection.</param>
            <returns>
            A unique code you can use to uniquely identify the specified string in this table.
            A string added more than once will return the same code.
            </returns>
            <exception cref="T:System.ArgumentNullException">If entry is null.</exception>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Cells.SharedStrings.Item(System.Int32)">
            <summary>
            Returns the string associated with the specified code.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.SharedStrings.Release(System.Int32)">
            <summary>
            Notifies the shared string table that it can release the specified code.
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Cells.SharedStrings.MapCodeToIndex(System.Int32)">
            <summary>
            Maps the specified code used for the unique string to the index of the string in the SST record output.
            This table should not be changed after this entry is requested and before the cell is written.
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.DDColumn">
            <summary>
            Represents a column in a spreadsheet.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDColumn.#ctor(GrapeCity.SpreadBuilder.DDSheet,System.Int16)">
            <summary>
            Creates the column and stores the specified DDSheet as a parent, and the specified column 
            number.
            </summary>
            <param name="ownerSheet"></param>
            <param name="column"></param>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.DDColumn.m_column">
            <summary>
            Internal storage for the Column property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDColumn.Column">
            <summary>
            Returns the column number (zero based) that this object represents.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.DDColumn.m_ownerSheet">
            <summary>
            Internal storage for the OwnerSheet property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDColumn.OwnerSheet">
            <summary>
            Returns the sheet that this column is on.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.DDColumn.m_iWidth">
            <summary>
            Internal storage for the Width property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDColumn.Width">
            <summary>
            Sets/gets the width of the column in Twips.  
            </summary>
            <remarks>
            The value will be converted to excel's "1/256 character width" unit system.
            </remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.DDRow">
            <summary>
            Represents a single row in a sheet.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDRow.#ctor(GrapeCity.SpreadBuilder.DDSheet,System.Int32)">
            <summary>
            Creates this DDRow with the specified sheet as a parent, and the specified row number 
            as the row this instance represent.
            </summary>
            <param name="parentSheet">The sheet this row is on.</param>
            <param name="row">The row number this instance represents (zero based).</param>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDRow.Height">
            <summary>
            Sets/gets the height for the row in 1/20th of point.
            SpreadBuilder will default rows to 12.75 points (or 255 in twips).
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDRow.AutoSize">
            <summary>
            Sets or returns whether excel will will automatically determine the row's height based it's contents.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.DDSecurity">
            <summary>
            Encapsulates the information necessary to provide spreadsheet document security and encryption.
            </summary>
            <remarks>
            If a WritePassword or a Password is supplied the spreadsheet application will prompt for a write or open access password.
            If a WritePassword or a Password is not supplied no password will be requested to open the document.
            By correctly supplying the Password, the user will be able to open the document.
            By correctly supplying the WritePassword, the user will be able to write the document.
            If the read only recommended is set to true, the Excel application will prompt user whether to open document as read-only.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.DDSecurity._writePassword">
            <summary>
            Represents WritePassword.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.DDSecurity._password">
            <summary>
            Represents Password.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.DDSecurity._protectedBy">
            <summary>
            Represents the name of person who protect the workbook.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.DDSecurity._readOnlyRecommended">
            <summary>
            Represents ReadOnlyRecommended.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSecurity.#ctor">
            <summary>
            Initializes an instance of the <see cref="T:GrapeCity.SpreadBuilder.DDSecurity"/> class with empty passwords, no read only recommended and specified owner.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSecurity.ProtectedBy">
            <summary>
            Gets or sets the User Name responsible to password protect the spreadsheet document.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSecurity.WritePassword">
            <summary>
            Gets or sets the write password of the spreadsheet document.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSecurity.Password">
            <summary>
            Gets or sets the password which can be entered to permit to open spreadsheet document.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSecurity.ReadOnlyRecommended">
            <summary>
            Gets or sets the value to indicate if the spreadsheet document was saved as read only recommended.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.DDSheet">
            <summary>
            Represents a WorkSheet.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.DDSheet.m_parentSheets">
            <summary>
            Internal storage for the ParentSheets property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.DDSheet.m_linelist">
            This list contains OBJ_line objects.
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.#ctor(GrapeCity.SpreadBuilder.DDSheets,System.String)">
            <summary>
            Constructor for DDSheet.
            </summary>
            <param name="parentSheets">
            The DDSheets collection that this DDSheet is a member of.
            </param>
            <param name="name">
            The new name of this DDSheet.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.FixImageOffset(System.Boolean)">
            <summary>
            Fix images' offset in a specified sheet.
            </summary>
            <param name="sheet">DDSheet</param>
            <param name="autoRowHeight"></param>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.BWriteanIndexRecord">
            <summary>
            Gets m_bWriteanIndexRecord field.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.Window2">
            <summary>
            Gets and sets BIFF8 WINDOW2 record.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.PageBreaksHorizontal">
            <summary>
            Gets horizontal PageBreaks.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.PageBreaksVertical">
            <summary>
            Gets vertical PageBreaks.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.ParentSheets">
            <summary>
            Returns the DDSheets collection that this DDSheet is a member of.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.DDSheet.m_name">
            <summary>
            Internal storage for the Name property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.Name">
            <summary>
            Sets/returns the name of this DDSheet.
            </summary>
            <remarks>
            May throw an ArgumentException if the specified name is already in use, or invalid (e.g. empty).
            </remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.ColInfos">
            <summary>
            Returns the BiffColInfos which contains a collection of BiffColInfo objects for this sheet.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.BiffRows">
            <summary>
            Returns the BiffRowTable collection containing the BiffRows contained in this sheet.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.MergeAreasRecord">
            <summary>
            Returns the MergeAreas record that will be written when this sheet is serialized.  This is used to add or removed merged cells/areas.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.HasMergeAreas">
            <summary>
            This is used to check merged cells/areas.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.DisplayGridLines">
            <summary>
            Sets or returns the flag indicating if grid lines are displayed in the sheet.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.PageSetup">
            <summary>
            Returns a PageSetup class representing current information about this sheet when printed.  This information is displayed in Excel in the page setup dialog.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.DDSheet.m_boundSheetOffset">
            <summary>
            Private storage for BoundSheetOffset property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.BoundSheetOffset">
            <summary>
            Sets/gets the file offset to this sheet's BOUNDSHEET record's lbPlyPos field.
            </summary>
            <remarks>
            It is necessary to store this postion because BOUNDSHEET is written in the Workbook 
            globals section and contains a field named lbPlyPos which contains the file offset of 
            the BOF for the actual sheet data.  So once the sheet data is written, sheets will 
            go back and enter the offset into each sheet's BOUNDSHEET.lbPlyPos field.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.DDSheet.m_sheetOffset">
            <summary>
            Private storage for SheetOffset property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.SheetOffset">
            <summary>
            Sets/gets file offset to the BIFF BOF record for this sheet.
            </summary>
            <remarks>
            It is necessary to store this postion because BOUNDSHEET is written in the Workbook 
            globals section and contains a field named lbPlyPos which contains the file offset of 
            the BOF for the actual sheet data.  So once the sheet data is written, sheets will 
            go back and enter the offset into each sheet's BOUNDSHEET.lbPlyPos field.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.DDSheet.m_indexRecordOffset">
            <summary>
            Private storage for IndexRecordOffset property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.IndexRecordOffset">
            <summary>
            Sets/gets the offset to the INDEX record's rgibRw array of DBCELL offsets.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.DDSheet._fixedMergedCells">
            <summary>
            Store the fixed MergedCells records. It will be set in PreExport.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.FixedMergedCells">
            <summary>
            Gets the fixed MergedCells records. It will be set in PreExport.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.Selected">
            <summary>
            Determines if this sheet is the selected sheet.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.ImagesCount">
            <summary>
            Get the number of images.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.RowsCount">
            <summary>
            Get rows count.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheet.ColumnsCount">
            <summary>
            Get columns count.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetCellValue(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the specified cell's value to the specified numeric value.
            </summary>
            <param name="iRow">The zero based row number of the cell.</param>
            <param name="iColumn">The zero based column number of the cell.</param>
            <param name="dblValue">The numeric value to set the cell to.</param>
            <remarks>Any existing formatting of the cell will be preserved.</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetCellValue(System.Int32,System.Int32,System.String)">
            <summary>
            Sets the specified cell's value to the specified string value.
            </summary>
            <param name="iRow">The zero based row number of the cell.</param>
            <param name="iColumn">The zero based column number of the cell.</param>
            <param name="sValue">The string value to set the cell to.</param>
            <remarks>Any existing formatting of the cell will be preserved.</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetCellValue(System.Int32,System.Int32,GrapeCity.SpreadBuilder.Cells.BiffCellBoolErrValues)">
            <summary>
            Sets the specified cell's value to the specified BiffCellBoolErrValues value.
            </summary>
            <param name="iRow">The zero based row number of the cell.</param>
            <param name="iColumn">The zero based column number of the cell.</param>
            <param name="sValue">The BiffCellBoolErrValues value to set the cell to.</param>
            <remarks>Any existing formatting of the cell will be preserved.</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetCellValueBlank(System.Int32,System.Int32)">
            <summary>
            Sets the specified cell's value to a blank/empty value.
            </summary>
            <param name="iRow">The zero based row number of the cell.</param>
            <param name="iColumn">The zero based column number of the cell.</param>
            <remarks>Any existing formatting of the cell will be preserved.</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetBiffCell(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the BiffCellBase derived class for the specified row and column.  Will create a new cell if one does not exists and caller specifies to do so (by setting bCreateIfNeeded = true).
            </summary>
            <param name="iRow">
            The zero based row number to retrive the cell for.
            </param>
            <param name="iColumn">
            The zero based column number to retrieve the cell for.
            </param>
            <param name="bCreateIfNeeded">
            If true, and a cell does not exist for the specified row and column, a new cell will be created and returned (BiffCellBlank).
            If false, and a cell does not exist for the specified row and column, null will be returned.  This can be used to check for the existance of a cell.
            </param>
            <returns>
            A BiffCellBase derived class representing the specified row and column, or null.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.RemoveBiffCell(System.Int32,System.Int32)">
            <summary>
            Removes a BiffCell from the sheet.
            </summary>
            <param name="row">
            The zero based row number to retrive the cell for.
            </param>
            <param name="column">
            The zero based column number to retrieve the cell for.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.Cell(System.Int32,System.Int32)">
            <summary>
            Returns the DDCell object for the specified row and column.
            </summary>
            <param name="iRow">The zero based row number of the cell.</param>
            <param name="iColumn">The zero based column number of the cell.</param>
            <returns>The DDCell object for the specified row and column.</returns>
            <remarks>
            This function could throw an ArgumentOutOfRangeException if the specified iRow or iColumn is not in the valid range.
            The minimum value for both the iRow and iColumn argument is 0.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.Cells(GrapeCity.SpreadBuilder.Cells.DDCell,GrapeCity.SpreadBuilder.Cells.DDCell)">
            <summary>
            Returns the DDCells between the specified DDCells.
            </summary>
            <param name="start">The start DDCell.</param>
            <param name="end">The end DDCell.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.Columns(System.Int16)">
            <summary>
            Returns the DDColumn object representing the specified column.
            </summary>
            <param name="column">The zero based non-negative column index.</param>
            <returns>
            The DDColumn object representing the specified column.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.FixMergedCells">
            <summary>
            1. Remove conflicting(overlapped) merged cells record.
            2. Visits each cell in a merged area an clears it to a BLANK cell, and then sets it's XF index to be the same as the upper left cell in the same merged area.
            </summary>
            <remarks>
            This must be done before writing out a sheet's rows &amp; cell records.
            If you don't do this step Borders will only apply to the upperleft cell in the merge area (actually all style only applies to that cell, but Borders are very noticable. Other style info is easily overlooked).
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetXFProp(System.Int32,System.Int32,GrapeCity.SpreadBuilder.Style.XFPropID,System.Int16)">
            <summary>
            Sets Horzontal Alignment, Vertical Alignment, or TextRotation on the specified Cell.
            </summary>
            <param name="row">The row of the cell (zero based).</param>
            <param name="col">The column of the cell (zero based).</param>
            <param name="propid">
            Should be XFPropID.ALIGNMENT, XFPropID.VERTALIGNMENT, or XFPropID.TEXTROTATION.
            </param>
            <param name="val">
            The value you want set to the specified property.
            </param>
            <remarks>
            It will eventually either find an existing, or create a new XF record for the cell 
            matching the combination of the cell's existing XF settings and the newly specified 
            setting.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetXFProp(System.Int32,System.Int32,GrapeCity.SpreadBuilder.Style.XFPropID)">
            <summary>
            Returns Horzontal Alignment, Vertical Alignment, or TextRotation on the specified Cell.
            </summary>
            <param name="row">The row of the cell (zero based).</param>
            <param name="col">The column of the cell (zero based).</param>
            <param name="propid">
            Should be XFPropID.ALIGNMENT, XFPropID.VERTALIGNMENT, or XFPropID.TEXTROTATION.
            </param>
            <returns>
            The value of the specified property for the specified cell.
            </returns>
            <remarks>
            GetXFProp will eventually find the cell's XF record and return the XF record's value for 
            the specified property.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetXFIndex(System.Int32,System.Int32)">
            <summary>
            Returns either the specified Cell's XF index or, if the cell does not exist, the default XF index for a cell.
            </summary>
            <param name="iRow"></param>
            <param name="iCol"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetCellXF(System.Int32,System.Int32)">
            <summary>
            Returns the XFRecord8 for the specified cell.  
            If the cell does not exist then the defualt cell XF record will be returned.
            </summary>
            <param name="iRow"></param>
            <param name="iCol"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetBorderColor(System.Int32,System.Int32,GrapeCity.SpreadBuilder.Style.COLORREF,GrapeCity.SpreadBuilder.WhichBorder)">
            <summary>
            Obtains the XF record for the specified cell.  Gets the current color of the specified 
            border, if it is the same as the specified color, the function returns immediately.  
            Otherwise, the color is retrieved from the custom palette, or added to it if it doesn't 
            exist, and the index of the color is saved in the XF.  The XF is mappped into 
            XFRecords, and the specified cell's XFIndex is reset.
            </summary>
            <param name="row">The row of the specified cell.</param>
            <param name="col">The col of the specified cell.</param>
            <param name="theBorder">Which border you want the color for.</param>
            <remarks>
            In debug mode this function calls GetBorderColor to double check that the proper color was set, and is returned.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetBorderColor(System.Int32,System.Int32,GrapeCity.SpreadBuilder.WhichBorder)">
            <summary>
            Retrieves the XF for the specified cell, obtains the color for the specified border (as a COLORREF) and returns it.
            </summary>
            <param name="row">The row of the specified cell.</param>
            <param name="col">The col of the specified cell.</param>
            <param name="theBorder">Which border you want the color for.</param>
            <returns>
            The COLORREF representing the color of the specified border.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetBorderDiagonalEnum(System.Int32,System.Int32,GrapeCity.SpreadBuilder.Style.BorderDiagonalStyles)">
            <summary>
            Sets the style of the diaganol border line for a cell.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="val"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetBorderDiagonalEnum(System.Int32,System.Int32)">
            <summary>
            Returns the style of the diaganol border line for a cell.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetFillColor(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Used by DDCell.FillColor.set.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="netColor"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetFillColor(System.Int32,System.Int32)">
            <summary>
            Used by DDCell.FillColor.get.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetTextColor(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Used by DDCell.ForeColor.set.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="netColor"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetTextColor(System.Int32,System.Int32)">
            <summary>
            Used by DDCell.ForeColor.get.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns>
            The ForeColor/TextColor for the specified cell.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetFontName(System.Int32,System.Int32,System.String)">
            <summary>
            Used by DDCell to set it's font name.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="val"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetFontName(System.Int32,System.Int32)">
            <summary>
            Used by DDCell to get it's font name.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="sVal"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetFontBold(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Used by DDCell for FontBold.set property.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="flag"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetFontBold(System.Int32,System.Int32)">
            <summary>
            Used by DDCell for FontBold.get property.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetFontItalic(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Used by DDCell.FontItalic.set property to set it's XF record's font to italic.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="flag"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetFontItalic(System.Int32,System.Int32)">
            <summary>
            Returns true if the font for the specified cell's XF record is italic.  False if the font is not italic.
            Ultimately used by DDCell for it's FontItalic.get property.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns>
            True if the font for the specified cell's XF record is italic.  False if the font is not italic.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetFontSize(System.Int32,System.Int32,System.Double,System.Boolean)">
            <summary>
            Sets the font size on the cell at the specified row and column.  Adjusts the row height to 
            a larger value if specified.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="val"></param>
            <param name="adjustRowHeight"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetFontSize(System.Int32,System.Int32)">
            <summary>
            Gets the size of the font for the XF record of the cell at the specified row and column.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetFontUnderlineStyle(System.Int32,System.Int32,GrapeCity.SpreadBuilder.Style.FontUnderlineStyles)">
            <summary>
            Sets the font's underline style for the cell at the specified location to the specified underline style value.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="style"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetFontUnderlineStyle(System.Int32,System.Int32)">
            <summary>
            Returns the font's underline style for the XF record of the cell at the specified location.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetFormat(System.Int32,System.Int32,System.String)">
            <summary>
            Adds the specified numberformat string (sFormat) to the ExcelFormats collection and associates that format with the specified cell's XF record.
            Used by DDCell for it's NumberFormat.set property.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="sFormat"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetFormat(System.Int32,System.Int32)">
            <summary>
            Used by DDCell for it's NumberFormat.get property.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetWrapText(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Obtains the XF for the cell at the specified row and column.  Then sets the bWrap member of the XF.
            Used by DDCell's WrapText.set property.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="val"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetDimensions">
            <summary>
            Get dimensions of the sheet.
            </summary>
            <returns>Struct DDDimensions contains index of first and last row/column of the sheet.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetHyperlink(System.Int32,System.Int32,System.String)">
            <summary>
            Used by DDCell.HyperLink.set property
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="sLink"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetHyperlink(System.Int32,System.Int32)">
            <summary>
            Returns the hyperlink string if found.  Null if not found.  
            Sets the m_ihyperlink value ot the index of the hyperlink within m_hyperlinkStrings and the index for the row in m_hyperlinkrow &amp; the col in m_hyperlinkcol.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetWrapText(System.Int32,System.Int32)">
            <summary>
            Gets the XF for the cell at the specified row and column, and returns the XF.bWrap value.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.AddHorizontalPageBreak(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Adds a horizontal / row page break.
            </summary>
            <param name="row">The row of the break (1 based).</param>
            <param name="columnstart">The starting column for the break (1 based).</param>
            <param name="columnend">The ending column for the break (1 based).</param>
            <remarks>
            No two pagebreaks may overlap.  
            The break occurs after the row or column.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.AddVerticalPageBreak(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Adds a vertical / column page break.
            </summary>
            <param name="col">The column of the break (1 based).</param>
            <param name="rowstart">The starting row for the break (1 based).</param>
            <param name="rowend">The ending row for the break (1 based).</param>
            <remarks>
            No two pagebreaks may overlap.  
            The break occurs after the row or column.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.Clear">
            <summary>
            Deletes all properties and content, effectively creating a blank sheet."
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.ResetWindow2">
            <summary>
            Resets the m_window2 structure to its default state.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.CleanupImages">
            <summary>
            Removes all images and associated resources.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.CleanupLines">
            <summary>
            Removes all lines and any associated resources.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetRowHeight(System.Int32,System.Int16)">
            <summary>
            Sets the row height on the BiffRow object that represents the specified row number.
            </summary>
            <param name="row">The row number to set the hieght on (zero based).</param>
            <param name="height">The height to set the row to in 1/20th of a point.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetColumnWidth(System.Int16,System.Single)">
            <summary>
            Sets the column width on the BiffRow object that represents the specified row number.
            </summary>
            <param name="col">The column number to set the width on (zero based).</param>
            <param name="width">The width to set the column to in inches.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetRowHeight(System.Int32)">
            <summary>
            Returns the height of the specified row if the row exists.  If the row does not exist, the default row height for excel is returned.
            </summary>
            <param name="row">
            The row that the height will be returned for.
            </param>
            <returns>
            The height of the specified row (units?).
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetRowAutoSize(System.Int32,System.Boolean)">
            <summary>
            Sets the AutoSize property for the row.  If the value is false, the row height can 
            deviate from the font height.  If the value is true, the height of the row will be 
            directly based on the size of the text in the row.
            </summary>
            <param name="row"></param>
            <param name="flag"></param>
            <remarks>
            This function sets the fUnsynced bitflag for the Biff Row record.  This flag allows the row height to deviate from the font height.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetRowAutoSize(System.Int32)">
            <summary>
            Returns the weather the BiffRow for the specified row has it's ROWFLAG_UNSYNCH set.
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.Rows(System.Int32)">
            <summary>
            Returns a DDRow instance for the specified row number.
            </summary>
            <param name="iRow">The row number the returned DDRow will represent (zero based).</param>
            <returns>A DDRow instance that represents the specified row number.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.AddImage(System.Drawing.Image,GrapeCity.SpreadBuilder.Imaging.ImageInfo,System.Drawing.Color,System.Drawing.Color,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.String)">
            <summary>
            Adds the specified image (currently stored as PNG format) to this sheet with the specified location, and settings.
            
            </summary>
            <param name="img">
            This is an image object that represents the image to be placed on the sheet.
            </param>
            <param name="imageOptions"></param>
            <param name="lineColor"></param>
            <param name="backColor"></param>
            <param name="colL">
            Column containing the upper-left corner of the object's bounding rectangle.
            </param>
            <param name="dxL">
            X (horizontal) position of the upper-left corner of the object's bounding rectangle, 
            relative to the left side of the underlying cell (specified in colL), expressed as 1/1024th of the cell's 
            width.
            </param>
            <param name="rwT">
            Row containing the upper-left corner of the object's bounding rectangle.
            </param>
            <param name="dyT">
            Y (vertical) position of the upper-left corner of the object's bounding rectangle, 
            relative to the top of the underlying cell, expressed as 1/1024th of the cell's height.
            </param>
            <param name="colR">
            Column containing the lower-right corner of the object's bounding rectangle.
            </param>
            <param name="dxR">
            X (horizontal) position of the lower-right corner of the object's bounding rectangle, relative to the left side of the underlying cell, expressed as 1/1024th of the cell's width.
            </param>
            <param name="rwB">
            Row containing the lower-right corner of the object's bounding rectangle.
            </param>
            <param name="dyB">
            Y (vertical) position of the lower-right corner of the object's bounding rectangle, relative to the top of the underlying cell, expressed as 1/1024th of the cell's height.
            </param>
            <param name="hyperlink">
            If you want the image to have a clickable hyperlink specify the URL here.  Otherwide use an empty string.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.AddImage(System.Drawing.Image,GrapeCity.SpreadBuilder.Imaging.ImageInfo,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int16,System.Int32,System.Int16,System.Int32,System.Int16,System.Int32,System.Int16,System.String)">
            <summary>
            Adds the specified image (currently stored as PNG format) to this sheet with the specified location, and settings.
            
            </summary>
            <param name="img">
            This is an image object that represents the image to be placed on the sheet.
            </param>
            <param name="imageOptions"></param>
            <param name="lineColor"></param>
            <param name="backColor"></param>
            <param name="columnLeft">
            Column containing the upper-left corner of the object's bounding rectangle.
            </param>
            <param name="dxL">
            X (horizontal) position of the upper-left corner of the object's bounding rectangle, 
            relative to the left side of the underlying cell (specified in colL), expressed as 1/1024th of the cell's 
            width.
            </param>
            <param name="rowTop">
            Row containing the upper-left corner of the object's bounding rectangle.
            </param>
            <param name="dyT">
            Y (vertical) position of the upper-left corner of the object's bounding rectangle, 
            relative to the top of the underlying cell, expressed as 1/1024th of the cell's height.
            </param>
            <param name="columnRight">
            Column containing the lower-right corner of the object's bounding rectangle.
            </param>
            <param name="dxR">
            X (horizontal) position of the lower-right corner of the object's bounding rectangle, relative to the left side of the underlying cell, expressed as 1/1024th of the cell's width.
            </param>
            <param name="rowBottom">
            Row containing the lower-right corner of the object's bounding rectangle.
            </param>
            <param name="dyB">
            Y (vertical) position of the lower-right corner of the object's bounding rectangle, relative to the top of the underlying cell, expressed as 1/1024th of the cell's height.
            </param>
            <param name="hyperlink">
            If you want the image to have a clickable hyperlink specify the URL here.  Otherwide use an empty string.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.AddImage(System.Byte[],System.Boolean,System.Drawing.SizeF,GrapeCity.SpreadBuilder.Imaging.ImageInfo,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int16,System.Int32,System.Int16,System.Int32,System.Int16,System.Int32,System.Int16,System.String)">
            <summary>
            Adds the specified image (currently stored as PNG format) to this sheet with the specified location, and settings.
            
            </summary>
            <param name="imageData">
            This is an image object that represents the image to be placed on the sheet.
            </param>
            <param name="imageOptions"></param>
            <param name="lineColor"></param>
            <param name="backColor"></param>
            <param name="columnLeft">
            Column containing the upper-left corner of the object's bounding rectangle.
            </param>
            <param name="dxL">
            X (horizontal) position of the upper-left corner of the object's bounding rectangle, 
            relative to the left side of the underlying cell (specified in colL), expressed as 1/1024th of the cell's 
            width.
            </param>
            <param name="rowTop">
            Row containing the upper-left corner of the object's bounding rectangle.
            </param>
            <param name="dyT">
            Y (vertical) position of the upper-left corner of the object's bounding rectangle, 
            relative to the top of the underlying cell, expressed as 1/1024th of the cell's height.
            </param>
            <param name="columnRight">
            Column containing the lower-right corner of the object's bounding rectangle.
            </param>
            <param name="dxR">
            X (horizontal) position of the lower-right corner of the object's bounding rectangle, relative to the left side of the underlying cell, expressed as 1/1024th of the cell's width.
            </param>
            <param name="rowBottom">
            Row containing the lower-right corner of the object's bounding rectangle.
            </param>
            <param name="dyB">
            Y (vertical) position of the lower-right corner of the object's bounding rectangle, relative to the top of the underlying cell, expressed as 1/1024th of the cell's height.
            </param>
            <param name="hyperlink">
            If you want the image to have a clickable hyperlink specify the URL here.  Otherwide use an empty string.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.AddLine(GrapeCity.SpreadBuilder.Imaging.LineInfo)">
            <summary>
            Adds one line with specified coordinates and properties.
            </summary>
            <param name="li">A LineInfo object with it's members set to the proper line configuration values.  See the LineInfo class for more information.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.CountMSOObj">
            <summary>
            Returns the count of the objects that must be written in Escher Records (lines &amp; metafiles).
            </summary>
            <returns>
            The count of the objects that must be written in Escher Records (lines &amp; metafiles).
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.pointstoBiff7lineweight(System.Int32)">
            <summary>
            Used by DDSheet.AddLine(..).
            </summary>
            <param name="points"></param>
            <returns>
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.MergeCells(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Used by DDCell.Merge.  Gets the specified cell's XF record, set's it up to indciate it is merged, and then sets that XF record to all cells that are to be merged together.
            </summary>
            <param name="row">
            The row of the Upper Left cell of the merged area.
            </param>
            <param name="column">
            The column of the Upper Left cell of the merged area.
            </param>
            <param name="numberOfColumnsToMerge">
            The number of columns accross to be merged. 1 means only the next cell will be merged.
            </param>
            <param name="numberOfRowsToMerge">
            The number of rows down to be merged. 1 means only the next cell (in the specified direction) will be merged.
            </param>
            <remarks>Do not merge a cell more than once.</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.IsMerged(System.Int32,System.Int32)">
            <summary>
            Returns true if the specified cell's XFRecord has it's fMergeCell member is true.
            </summary>
            <param name="row"></param>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.UnMergeCells(System.Int32,System.Int32)">
            <summary>
            Removes the MergeArea from the MergedAreas record for this sheet.
            </summary>
            <param name="row"></param>
            <param name="column"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.SetFontStrikeOut(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Used by DDCell for FontStrikeOut.set property.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <param name="flag"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.GetFontStrikeOut(System.Int32,System.Int32)">
            <summary>
            Used by DDCell for FontStrikeOut.get property.
            </summary>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheet.VerifyName(System.String)">
            <summary>
            Verify whether sheet name is valid.(The rule is found when setting sheet name in Excel 2007/2003 app.)
            </summary>
            <param name="name">the sheet name</param>
            <returns>A bool indicates whether sheet name is valid.</returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.BiffDimensions8">
            <summary>
            DIMENSIONS: Cell Table Size (0x200):
            The DIMENSIONS record contains the minimum and maximum bounds of the sheet. It provides a 
            concise indication of the sheet size.	Note that both the rwMac and colMac fields are 
            greater by 1 than the actual last row and column.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffDimensions8.firstRow">
            <summary>
            (rwMic) First defined row on the sheet.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffDimensions8.lastRowPlus1">
            <summary>
            (rwMac) Last defined row on the sheet plus 1.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffDimensions8.firstCol">
            <summary>
            (colMic) First defined column on the sheet.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffDimensions8.lastColPlus1">
            <summary>
            (colMac) Last defined column on the sheet plus 1.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffDimensions8.reserved">
            <summary>
            (Reserved) Reserved; must be 0 (zero).
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.DDDimensions">
            <summary>
            DDDimensions contains index of first and last row/column of the sheet.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Hyperlink">
            <summary>
            For Open Xml export
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.BiffRowTable">
            <summary>
            Collection of BiffRow objects that internally uses a hashtable.  Allows for easy 
            enumeration of the *existing* BiffRows (as if a cell does not exist in a row, then we 
            don't have a BiffRow representing the cell).  Basically just a wrapper around a Hashtable 
            that returns BiffRow objects.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffRowTable.GetFirstRow">
            <summary>
            Returns the lowest rownumber defined on this sheet.  This needed for writing out BIFF 
            INDEX records where it requries the first row and last row fields.
            </summary>
            <returns>
            Positive int: Value indicates the row number of the lowest row number in the sheet.
            Negative int: Indicates there are no defined rows in this sheet.
            </returns>
            <remarks>
            If the returned value is postive you can pass it to the BiffRowTable indexer to get the actual BiffRow.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffRowTable.GetLastRow">
            <summary>
            Returns the highest rownumber defined on this sheet. This needed for writing out BIFF 
            INDEX records where it requries the first row and last row fields.
            </summary>
            <returns>
            Positive int: Value indicates the row number of the highest row number in the sheet.
            Negative int: Indicates there are no defined rows in this sheet.
            </returns>
            <remarks>
            If the returned value is postive you can pass it to the BiffRowTable indexer to get the actual BiffRow.
            </remarks>		
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffRowTable.GetFirstCol">
            <summary>
            Get the index of first column which has content.
            </summary>
            <returns>Get the index of first column which has content.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffRowTable.GetLastCol">
            <summary>
            Get the index of last column which has content.
            </summary>
            <returns>Get the index of last column which has content.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffRowTable.GetEnumerator">
            <summary>
            Provies foreach support.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.BiffRowTable.Item(System.Int32,System.Boolean)">
            <summary>
            Returns the BiffRow representing the specified row.  Creates a new row if necessary, 
            and specified to do so. And the new row will be inserted by ascending.
            </summary>
            <param name="iRow">The zero based row number you want the BiffRow for.</param>
            <param name="bCreateIfNotExists">
            If true, and a BiffRow does not yet exist for the specified row, a new BiffRow will be created for 
            the specified row, stored and returned.  The newly created BiffRow will be stored in the collection, 
            before returning it so that the next request for this row will not create a new row, but return 
            the existing one.  If false and no BiffRow exists for the specified row null will be returned.
            </param>
            <returns>The specified BiffRow, or null (see bCreateIfNeeded documentation above).</returns>
            <remarks>This replaces GetBiffRow(...)</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.BiffRowTable.Count">
            <summary>
            Returns the number of rows stored in this sheet.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Window2_BIFF8">
            <summary>
            Represents the BIFF8 WINDOW2 record.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Window2Flags">
            <summary>
            Flags/masks for the Window2_BIFF8 grbit field.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Window2Flags.IsSelectedInverse">
            <summary>
            Inverse/ bitwise ! (not) of ISSELECTED.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Window2Flags.IsPagedInverse">
            <summary>
            Inverse/ bitwise ! (not) of ISPAGED.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.WhichBorder">
            <summary>
            This is just used internally for DDSheet.Set/Get-BorderColor to determine which border to get/set color for.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.DDSheets">
            <summary>
            A collection of DDSheet objects.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheets.OwnerBook">
            <summary>
            Returns the parent/owner workbook.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheets.#ctor(GrapeCity.SpreadBuilder.Workbook)">
            <summary>
            Internal constructor for DDSheets.
            </summary>
            <param name="ownerBook">
            The parent Workbook creating this sheets collection.  
            This workbook is used to access global book information such as XF records and the color palette.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheets.GetEnumerator">
            <summary>
            Returns an IEnumerator object for this collection allowing you to enumerate the DDSheet objects 
            contained in this collection.  
            Allows use of foreach statements with the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheets.Count">
            <summary>
            Gets the number of elements contained in this DDSheets collection.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheets.Item(System.Int32)">
            <summary>
            Gets the DDSheet at the specified index. 
            In C#, this property is an indexer for the DDSheets class.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheets.Item(System.String)">
            <summary>
            Gets the DDSheet with the specified name
            In C#, this property is an indexer for the DDSheets class.
            If a DDSheet with the specified name does not exist in the collection, null will be returned.
            </summary>
            <remarks>
            The sheetName argument is compared case insensitively.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheets.AddNew">
            <summary>
            Adds a new blank DDSheet object to the collection and returns a reference to it.
            </summary>
            <returns>
            The newly added DDSheet object.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheets.GetUniqueSheetName">
            <summary>
            Returns a new sheet name that is unique within this collection.
            </summary>
            <returns>
            The new sheet name.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheets.Add(GrapeCity.SpreadBuilder.DDSheet)">
            <summary>
            Adds the specified DDSheet to the end of this collection.
            </summary>
            <param name="sheet">
            The DDSheet to add to the collection.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheets.UpdateKey(System.String,System.String)">
            <summary>
            Updates the key of the sheet in the dictionary.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheets.RemoveAt(System.Int32)">
            <summary>
            Removes the DDSheet at the specified index from this collection.
            </summary>
            <param name="iIndex">
            The zero based index of the DDSheet to be removed.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheets.Move(System.String,System.Int16)">
            <summary>
            Moves the sheet with the specfied name to the specified position.
            </summary>
            <param name="sName">The value of the DDSheet's Name property that you want to move.</param>
            <param name="newPosition">
            The new position you want to move the sheet to.
            If the new position is less than zero, the sheet will be moved to the begining of the collection (0).
            If the new position is greater than the upper bound of this collection, the sheet will be moved to the end of the collection.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheets.Move(System.Int16,System.Int16)">
            <summary>
            Moves the sheet at the specified position to the specified newposition.
            </summary>
            <param name="oldPosition">The current position (index) of the sheet you want to move.</param>
            <param name="newPosition">
            The new position you want to move the sheet to.
            If the new position is less than zero, the sheet will be moved to the begining of the collection (0).
            If the new position is greater than the upper bound of this collection, the sheet will be moved to the end of the collection.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheets.Clear">
            <summary>
            Removes all the DDSheet objects contained in this collection.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheets.Select(System.String)">
            <summary>
            Selects the sheet with the specified name, and unselects all other sheets.
            </summary>
            <param name="sheetName">
            The value of the Name property of the DDSheet object you want to be selected.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheets.Select(System.Int32)">
            <summary>
            Selects the sheet at the specified index, and unselects all other sheets.
            </summary>
            <param name="sheetIndex">
            The index to the sheet of which you want the tab to be selected.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheets.GetAndInitSelectedIndexes">
            <summary>
            Returns the selected DDSheets' indexes.
            </summary>
            <returns>An IList generics indicates the selected DDSheets' indexes.</returns>
            <remarks>
            If no worksheets are selected, will set the first worksheet be selected.
            </remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.DDSheets.DDSheetsEnumerator">
            <summary>
            An Enumerator for the DDSheets collection.  Allows use of foreach statements.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheets.DDSheetsEnumerator.#ctor(GrapeCity.SpreadBuilder.DDSheets)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.SpreadBuilder.DDSheets.DDSheetsEnumerator"/> class.
            </summary>
            <param name="theCollection">The DDSheets collection.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheets.DDSheetsEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheets.DDSheetsEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.DDSheets.DDSheetsEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.EncryptionTools">
            <summary>
            The tool class for encryption. Can find the spec in [MS-OFFCRYPTO].
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptionTools.IsRecordNeedEncrypt(GrapeCity.SpreadBuilder.BiffRecordID)">
            <summary>
            Check if the record need be encrypted.
            </summary>
            <param name="recordID">The BiffRecordID.</param>
            <returns>A bool value indicates if the record need be encrypted.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptionTools.GenerateVerifier(System.Byte[],System.Byte[]@,System.Byte[]@)">
            <summary>
            Generate the verifier and verifierHash.
            </summary>
            <param name="key">A bytes indicates the key.</param>
            <param name="verifier">Output the verifier as a bytes.</param>
            <param name="verifierHash">Output the verifier hash as a bytes.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptionTools.MD5Hash(System.Byte[])">
            <summary>
            Get MD5 hash.
            </summary>
            <param name="input">The input bytes.</param>
            <returns>The hashed bytes.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptionTools.GetRC4Key(System.Byte[],System.String,System.UInt32)">
            <summary>
            Get RC4 key.
            </summary>
            <param name="salt">A bytes indicates salt.</param>
            <param name="password">Password.</param>
            <param name="blockNo">The block number. The block size is 1024.</param>
            <returns>RC4 key.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptionTools.HashCalculator.ComputeMD5(System.Byte[])">
            <summary>
            Computes MD5 hash for specified binary stream
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptionTools.HashCalculator.Compute(System.Byte[],System.Func{GrapeCity.SpreadBuilder.EncryptionTools.HashCalculator.MD5Digest,System.Byte[],GrapeCity.SpreadBuilder.EncryptionTools.HashCalculator.MD5Digest})">
            <summary>
            Computes hash for specified binary stream.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.RC4">
            <summary>
            Implement RC4 encryption.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.RC4.count_i">
            <summary>
            counter
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.RC4.count_j">
            <summary>
            counter
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.RC4.S_BOX_LENGTH">
            <summary>
            The sandbox length.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.RC4.s_box">
            <summary>
            The sandbox.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.RC4.SetKey(System.Byte[])">
            <summary>
            Initialize the sandbox.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.RC4.En_De_Crypt(System.Byte)">
            <summary>
            Encrypt or Decrypt a byte.
            </summary>
            <param name="input">A byte.</param>
            <returns>The result byte.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.RC4.En_De_Crypt(System.Byte[])">
            <summary>
            Encrypt or Decrypt bytes.
            </summary>
            <param name="input">A bytes array.</param>
            <returns>The result bytes array.</returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Biff8RC4Encryption">
            <summary>
            Implement biff8 rc4 encryption. Can find the spec in [MS-OFFCRYPTO].
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Biff8RC4Encryption._rc4">
            <summary>
            The RC4 encryption arithmetic.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Biff8RC4Encryption._bw">
            <summary>
            Represents the BinaryWriter which contains the input stream.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Biff8RC4Encryption._br">
            <summary>
            Represents the BinaryReader to read the stream in _bw.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Biff8RC4Encryption._streamPos">
            <summary>
            The stream position.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Biff8RC4Encryption._nextBlockNum">
            <summary>
            The postion of next block
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Biff8RC4Encryption._block">
            <summary>
            The block number.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Biff8RC4Encryption._password">
            <summary>
            Represent password.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Biff8RC4Encryption._salt">
            <summary>
            Represent the salt.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Biff8RC4Encryption.#ctor(System.IO.BinaryWriter,System.String,System.Byte[])">
            <summary>
            Create a  Biff8RC4Encryption class.
            </summary>
            <param name="bw">The BinaryWriter which contains input stream.</param>
            <param name="password">A string indicates the password.</param>
            <param name="salt">The salt of password.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Biff8RC4Encryption.EncryptionRecord">
            <summary>
            Encrypt record.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Biff8RC4Encryption.SkipRecordHeader(System.UInt16@,System.UInt16@)">
            <summary>
            Skip record header.
            </summary>
            <param name="recID">Record id.</param>
            <param name="recLen">Record length.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Biff8RC4Encryption.GetRC4Byte(System.Byte@,System.Byte@)">
            <summary>
            Get RC4 bytes.
            </summary>
            <param name="origin">Output the original bytes.</param>
            <param name="rc4Byte">Output the RC4 encrypted bytes.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Biff8RC4Encryption.EncryptionBiff8Stream">
            <summary>
            Encrypt the biff8 stream.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.XORObfuscation">
            <summary>
            Several records (Password (section 2.4.191), FileSharing (section 2.4.118), 
            Prot4RevPass (section 2.4.206), FeatProtection (section 2.5.124), and 
            FilePass (section 2.4.117)) use a password verifier to provide a locking and 
            unlocking system for viewing or editing parts of the workbook. This password verifier 
            is used to prevent accidental editing, and is not designed to be used as a security 
            feature. 
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.XORObfuscation.CreatePasswordVerifier1(System.String)">
            <summary>
            This procedure specifies how a 16-bit password verifier is obtained 
            from a password string. The password verifier is used in XOR 
            obfuscation, as well as for document write protection.(the XOR obfuscation 
            algorithm specified in [MS-OFFCRYPTO], 2.3.7.1, Binary Document Password 
            Verifier Derivation Method 1)
            </summary>
            <param name="pwd">A string indicates password.</param>
            <returns>Get the hash code of the password.</returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.ExcelBuiltInStyles">
            <summary>
            Collection for Excel's STYLE (293h) records.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.ExcelBuiltInStyles.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.ExcelBuiltInStyles.Styles">
            <summary>
            Gets inner styles
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.ExcelBuiltInStyles.AddRec(GrapeCity.SpreadBuilder.BiffStyle)">
            <summary>
            Adds the specified BiffStyle object to the collection.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.ExcelBuiltInStyles.Clear">
            <summary>
            Removes all conatined BiffStyle records.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.BiffStyle">
            <summary>
            Represents the BIFF STYLE (293h) record.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.BuiltInStyleNo">
            <summary>
            Emun for istyBuiltIn of Style Information record.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.SpreadBuilderException">
            <summary>
            A general exception thrown for application errors in the GrapeCity.SpreadBuilder assembly.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadBuilderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SpreadBuilderException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadBuilderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SpreadBuilderException class with a specified error message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadBuilderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SpreadBuilderException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
            <remarks>This constructor is necessary to properly support ASP.NET and .net remoting channels.</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadBuilderException.#ctor">
            <summary>
            Initializes a new instance of the System.ApplicationException class.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.InvalidPasswordException">
            <summary>
            Thrown when the password is invalid in a specific excel format.(For example: the length of password is out of range.)
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.InvalidPasswordException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidPasswordException class with specific error message.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.InvalidPasswordException.#ctor">
            <summary>
            Initializes a new instance of the InvalidPasswordException class with default error message.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.InvalidPasswordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the InvalidPasswordException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
            <remarks>This constructor is necessary to properly support ASP.NET and .net remoting channels.</remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.ColumnCountOutOfRangeException">
            <summary>
            Thrown when the columns' count is out of range in a specific excel format.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.ColumnCountOutOfRangeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ColumnCountOutOfRangeException class with specific error message.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.ColumnCountOutOfRangeException.#ctor">
            <summary>
            Initializes a new instance of the ColumnCountOutOfRangeException class with default error message.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.ColumnCountOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ColumnCountOutOfRangeException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
            <remarks>This constructor is necessary to properly support ASP.NET and .net remoting channels.</remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.RowCountOutOfRangeException">
            <summary>
            Thrown when the rows' count is out of range in a specific excel format.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.RowCountOutOfRangeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RowCountOutOfRangeException class with specific error message.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.RowCountOutOfRangeException.#ctor">
            <summary>
            Initializes a new instance of the RowCountOutOfRangeException class with default error message.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.RowCountOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the RowCountOutOfRangeException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
            <remarks>This constructor is necessary to properly support ASP.NET and .net remoting channels.</remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.NoDDSheetsException">
            <summary>
            Thrown when an operation is requested that requires at least one sheet in the Sheets collection (for example Saving the workbook).
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.NoDDSheetsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.SpreadBuilder.NoDDSheetsException"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.NoDDSheetsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the NoDDSheetsException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
            <remarks>This constructor is necessary to properly support ASP.NET and .net remoting channels.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.NoDDSheetsException.Message">
            <summary>
            Returns a message that describes the error.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.VersionNotImplementedException">
            <summary>
            Indicates that a feature or features were not implemented for a particular version of the Exce./BIFF file format.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.VersionNotImplementedException.#ctor(System.String)">
            <summary>
            Initializes an instance of the VersionNotImplementedException class with the specified message.
            </summary>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.VersionNotImplementedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an instance of the VersionNotImplementedException with the specified message and inner exception.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.VersionNotImplementedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the VersionNotImplementedException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
            <remarks>This constructor is necessary to properly support ASP.NET and .net remoting channels.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.VersionNotImplementedException.Message">
            <summary>
            Returns a message that describes the error.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.CompressionException">
            <summary>
            Indicates that an error occured in the compression library most likely related to images.  
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.CompressionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.SpreadBuilder.CompressionException"/> class.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.CompressionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.SpreadBuilder.CompressionException"/> class.
            </summary>
            <param name="sMessage">The exception message.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.CompressionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.SpreadBuilder.CompressionException"/> class.
            </summary>
            <param name="sMessage">The exception message.</param>
            <param name="oInnerException">The inner exception.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.CompressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CompressionException class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
            <remarks>This constructor is necessary to properly support ASP.NET and .net remoting channels.</remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.DDSheetNameAlreadyExistsException">
            <exception cref="T:System.ArgumentException">
            Thrown when an attempt is made to add a sheet, or change a sheet's name, when another sheet in the DDSheets 
            collection with that name already exists.
            </exception>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.DDSheetNameAlreadyExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.SpreadBuilder.DDSheetNameAlreadyExistsException"/> class.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.InvalidDDSheetNameException">
            <summary>
             Thrown when change a sheet's name to an invalid value. The name cannot be empty, cannot exceed 31 characters and cannot contain any of following characters: : \ / ? * [ or ]
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.InvalidDDSheetNameException.#ctor(System.String)">
            <summary>
            Create a InvalidDDSheetNameException instance with parameter name.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.InvalidDDSheetNameException.#ctor">
            <summary>
            Create a InvalidDDSheetNameException instance.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.FormatConverter">
            <summary>
            This class is a tool for convert AR TextBox's OutputFormat and Value to Excel NumberFormat and Value.
            AR TextBox's OutputFormat is based on .NET Framework Formatting.
            See http://msdn.microsoft.com/en-us/library/fbxft59x(v=vs.80)
            In addition, AR OutputFormat also supports the forth section and _(undersorce).
            For Excel NumberFormat, see 
            http://www.brainbell.com/tutorials/ms-office/excel/Create_Custom_Number_Formats.htm
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.FormatConverter.EXCEL_TEXT_FORMAT">
            <summary>
            Excel NumberFormat string which indicates text.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.FormatConverter.INVARIANT_CULTURE_LCID">
            <summary>
            The LCID for invariant culture.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.FormatConverter.DATE_FIRST_VALID">
            <summary>
            The earliest Date which is supported in Excel.
            Excel support date after 1900/1/1, 
            but there is a bug that excel has 1900/2/29 which is invalid,
            so the valid date start from 1900/3/1.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.FormatConverter._convertedFormats">
            <summary>
            The dictionary which caches converted Excel NumberFormat.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.FormatConverter._specialCalendarCultures">
            <summary>
            The dictionary which stores cultures of special calendars.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.FormatConverter._lockObj">
            <summary>
            The object for lock.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.FormatConverter.ConvertedFormats">
            <summary>
            Gets the dictionary which caches converted Excel NumberFormat.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.FormatConverter.GetExcelFormatAndValue(System.String,System.Int32,System.Int32,System.Object,System.String,System.String@,System.Object@)">
            <summary>
            Convert AR OutputFormat and Value to Excel NumberFormat and Value.
            </summary>
            <param name="outputFormat">AR OutputFormat</param>
            <param name="cultureId">The culture id used in format</param>
            <param name="currencyCultureId">The currency culture id used in format</param>
            <param name="value">AR Value</param>
            <param name="outputText">AR formated text</param>
            <param name="excelFormat">Output converted Excel NumberFormat string</param>
            <param name="excelValue">Output converted Excel Value</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.FormatConverter.GetExcelValue(System.Object)">
            <summary>
            Convert AR Value to Excel Value.
            </summary>
            <param name="objValue">AR Value should be a number or a DateTime value.</param>
            <returns>Return the converted Excel Value. 
            If the value is supported, the reture value is a double.
            Otherwise, the reture value is null.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.FormatConverter.ConvertNamedFormat(System.Object,System.String,System.Int32@,System.String@,System.Object@)">
            <summary>
            Convert the named format to specific .NET format. The format conversion result should same as the engine.
            </summary>
            <param name="value">The original value to apply the format.</param>
            <param name="format">The original output format.</param>
            <param name="cultureId">ref, the culture LCID from the TextInfo.Set with current current for named format.</param>
            <param name="convertedFormat">out, the .NET format after conversion. Empty string if conversion failed.</param>
            <param name="convertedValue">out, the converted value to apply the converted .NET format. the original value if conversion failed.</param>
            <returns>true if the original output format is a named format; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.FormatConverter.ConvertNamedFormatForDoubleValue(System.Object,System.String,System.Globalization.CultureInfo,System.String@,System.Object@)">
            <summary>
            Convert the named format for double value.
            </summary>
            <param name="value"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <param name="convertedFormat"></param>
            <param name="convertedValue"></param>
            <returns>true if the conversion succeed; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.FormatConverter.ConvertNamedFormatForDateTimeValue(System.Object,System.String,System.Globalization.CultureInfo,System.String@,System.Object@)">
            <summary>
            Convert the named format for date value.
            </summary>
            <param name="value"></param>
            <param name="format"></param>
            <param name="culture"></param>
            <param name="convertedFormat"></param>
            <param name="convertedValue"></param>
            <returns>true if the conversion succeed; otherwise, false.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.FormatConverter.ConvertExcelFormat(GrapeCity.SpreadBuilder.FormatConverter.FormatDefinition,System.String@)">
            <summary>
            Convert FormatDefinition to Excel NumberFormat.
            </summary>
            <param name="formatDef">A FormatDefinition instance</param>
            <param name="excelFormat">Excel NumberFormat</param>
            <returns>A boolean indicates whether the converting is success.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.FormatConverter.ConvertNumberExcelFormat(GrapeCity.SpreadBuilder.FormatConverter.FormatDefinition,System.String@)">
            <summary>
            Converting for number type value.
            </summary>
            <param name="formatDef">FormatDefinition</param>
            <param name="excelFormat">Output the Excel Format</param>
            <returns>A boolean indicates whether the converting is success.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.FormatConverter.GenerateCurrencyFormat(System.Globalization.NumberFormatInfo)">
            <summary>
            Builds the positive and negative currency format based on NumberFormatInfo settings.
            </summary>
            <remarks>n represents the number, - represents the negative symbol, $ represents currency symbol in the patterns.</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.FormatConverter.GenerateNumberFormat(System.Globalization.NumberFormatInfo,System.String)">
            <summary>
            Builds the positive and negative number format based on NumberFormatInfo settings.
            </summary>
            <remarks>n represents the number, - represents the negative symbol in the patterns.
            The positive pattern is always "n"</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.FormatConverter.ConvertNumberFormatPattern(System.Int32,System.String@)">
            <summary>
            Converting format pattern for number type value.
            </summary>
            <param name="currencyCultureId">Currency culture id</param>
            <param name="excelFormat">Output the Excel Format</param>
            <returns>A boolean indicates whether the converting is success.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.FormatConverter.ConvertDateTimeExcelFormat(GrapeCity.SpreadBuilder.FormatConverter.FormatDefinition,System.String@)">
            <summary>
            Converting for DateTime type value.
            </summary>
            <param name="formatDef">FormatDefinition</param>
            <param name="excelFormat">Output the Excel Format</param>
            <returns>A boolean indicates whether the converting is success.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.FormatConverter.ConvertDateTimeFormatStandard(System.Globalization.CultureInfo,System.String@)">
            <summary>
            Convert datetime standard format char to patterns.
            </summary>
            <param name="culture"></param>
            <param name="excelFormat"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.FormatConverter.ConvertDateTimeFormatPattern(System.Globalization.CultureInfo,System.String@)">
            <summary>
            Convert .net datetime format patterns to excel.Convert the patterns one by one.
            </summary>
            <param name="excelFormat"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.FormatConverter.ConvertCalendarCultureID(System.Int32)">
            <summary>
            The default calendar is different for some special cultures.
            The value for year, month and day is different using different calendar for these cultures.
            need change the culture id to select specific calendar.
            </summary>
            <param name="cultureId"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.FormatConverter.GetCultureInfo(System.Int32)">
            <summary>
            Get CultureInfo with cultureId.
            </summary>
            <param name="cultureId">cultureId</param>
            <returns>CultureInfo</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.FormatConverter.ConvertCommonPattern(System.Int32@,System.String,System.Text.StringBuilder)">
            <summary>
            Convert common pattern.
            </summary>
            <param name="index">The index of the AR OutputFormat</param>
            <param name="chars">The AR OutputFormat string</param>
            <param name="sb">Output StringBuilder of Excel Format</param>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.FormatConverter.FormatDefinition">
            <summary>
            Represents a format definition.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.Biff7PictureRecord">
            <summary>
            This class represents the binary representation of an OBJ record for BIFF7 Pictures.  
            The picture data will be saved as WMF or BMP depending on what is programmatically determined to be more appropriate.
            Essentially it will be stored as an OBJ record with some additional "subrecord" fields specific to pictures in BIFF7.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.Biff7PictureRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GrapeCity.SpreadBuilder.Imaging.Biff7PictureRecord"/> class.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.CMapCRC">
            <summary>
            Pass a CRC, get an index to a OBJ_metafile
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.CMapCRC.AddToMap(GrapeCity.SpreadBuilder.Imaging.OBJImage)">
            <summary>
            Calls GetCRC on the specified OBJ_png object, then add that CRC if not already in this classes' list of CRC's.
            </summary>
            <param name="pm">
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.CMapCRC.CompareBytes(System.Byte[],System.Byte[])">
            <summary>
            Compares the elemnts of two byte arrays by sequentially enumerating the two arrays and comparing each element.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            True if both arrays have the same length and have the same byte value at the same index.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.CMapCRC.map(System.Byte[])">
            <summary>
            Returns the index the specified CRC value is found at, or -1 if not found.
            </summary>
            <param name="pb">The byte array containing the CRC value.</param>
            <returns>The index the specified CRC value is found at, or -1 if not found.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.CMapCRC.Clear">
            <summary>
            Clears all contained CRC values, and OBJ_meta references.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.CMapCRC.GetSize">
            <summary>
            Returns the count of CRC values contained.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.CMapCRC.GetCRCAt(System.Int32)">
            <summary>
            Gets the CRC at the index specified in cnt.
            </summary>
            <param name="cnt">The index to get the CRC at.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.CMapCRC.GetImageAt(System.Int32)">
            <summary>
            Returns the OBJImage at the specified index.
            </summary>
            <param name="cnt"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.EscherGlobals.map_iqu_to_fFlipH(System.Byte)">
            <summary>
            Maps the OBJ record's iqu value to the Escher "msofbtSp" record's fFlipH value.
            </summary>
            <param name="iqu"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.EscherGlobals.map_iqu_to_fFlipV(System.Byte)">
            <summary>
            Maps the OBJ record's iqu value to the Escher "msofbtSp" record's fFlipV value.
            </summary>
            <param name="iqu"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.EscherGlobals.transform_fmove_tobiff8(GrapeCity.SpreadBuilder.Imaging.OBJImage)">
            <summary>
            BIFF 8 has custom value for move and size with cells. 
            This function transforms the bitmapped pre-8 value to a biff8 value.
            </summary>
            <param name="pmeta"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.EscherGlobals.transform_fmove_tobiff8(GrapeCity.SpreadBuilder.Imaging.OBJ_line)">
            <summary>
            BIFF 8 has custom value for move and size with cells. 
            This function transforms the bitmapped pre-8 value to a biff8 value.
            </summary>
            <param name="pline"></param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.OBJ_line">
            <summary>
            Represents a line in for BIFF5, BIFF7, and BIFF8.
            </summary>
            <remarks>
            To get BIFF8 formatted data (Escher) call make_msofbtOPT followed by a call to get_msofbtOPT.
            To get BIFF5 and BIFF7 formatted data call this object's write_to_stream method.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJ_line.m_pmsofbtOPT">
            <summary>
            Contains the BIFF8 data for this OBJ_line (accessble by calling 
            make_msofbtOPT followed by get_msofbtOPT).  
            </summary>
            <remarks>
            "MS Office 97 Drawing File Format" (a.k.a "Escher") documentation refers to this data's 
            output structre as "Shape Properties" and an "msofbtOPT structure".  First element in the 
            output is a MSOFBH (common header) struct, followed by several FOPTE structures.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.OBJ_line.#ctor">
            <summary>
            Initializes a new instance of OBJ_line.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.OBJ_line.MsofbtOPT">
            <summary>
            Gets and sets a byte array containing all record data.
            You must call MakeMsofbtOPT() before calling this method !
            Returns a byte array containing the binary data of the msofbtOPT struct for the line.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.OBJ_line.MsofbtOPTSize">
            <summary>
            Gets and sets m_lmsofbtOPT fields.
            Returns the size in bytes of the record data that will be returned when calling 
            get MsofbtOPT (except this returned value does not include the single MSOFBH record 
            (MSOFBH size is 8 bytes) that will be included when calling get_msofbtOPT).;
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:GrapeCity.SpreadBuilder.Imaging.OBJImage" -->
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJImage.Top">
            <summary>
            The direction from cell's top to image's top. The unit is pixel.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJImage.Left">
            <summary>
            The direction from cell's left to image's left. The unit is pixel.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJImage.CropFromTop">
            <summary>
            A percent indicate the times of top crop part occupying the total image height.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJImage.CropFromLeft">
            <summary>
            A percent indicate the times of left crop part occupying the total image width.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJImage.CropFromRight">
            <summary>
            A percent indicate the times of right crop part occupying the total image width.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJImage.CropFromBottom">
            <summary>
            A percent indicate the times of bottom crop part occupying the total image height.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJImage.LineWidth">
            <summary>
            The line width of image outline. The unit is pixel.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJImage.DisplayWidth">
            <summary>
            The display width of image object in excel. The unit is pixel.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJImage.DisplayHeight">
            <summary>
            The display height of image object in excel. The unit is pixel.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.OBJImage.AnchorType">
            <summary>
            The type of the anchor for the image in excel. 
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJImage.m_EMFextents">
            <summary>
            Contains the extent/bounds of the image, extracted from Image.GetBounds(..).
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.OBJImage.ImageType">
            <summary>
            Returns the type of Image.  Could be EMF or PNG in BIFF8.  Biff7 looks like it will be WMF or BMP.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.OBJImage.#ctor(System.Drawing.Image,System.Byte[],System.Drawing.SizeF,GrapeCity.SpreadBuilder.Imaging.MSOBLIPTYPE)">
            <summary>
            Initializes an instance of OBJImage class with default property values based on excel's own output.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJImage.m_EMFextentsfilled">
            <summary>
            Returns true if hte extents/bounds of the image have been calculated.
            </summary>
            <remarks>
            This is essentially always true now, because we extract extents in the OBJ_meta constructor.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.OBJImage.GetCRC">
            <summary>
            Calcultes and returns this meta's 16 byte Adler CRC value and copies the data to 
            (pCRC), and to the end of pmf (the last 16 bytes of pmf will be the crc).
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <remarks>
            From MSDN Library - July 1999 topic "BStore Container msofbtBstoreContainer":
            Each BSE contains a 16-byte checksum that is used to quickly compare a BLIP with other 
            BLIPs in the store. Any algorithm could be used for this checksum. Escher uses the RSA 
            Data Security, Inc. MD4 Message-Digest Algorithm for the checksums of its BLIP types.
            
            We use Adler instead, but excel doesn't care so long as those 16 bytes are the same.  It's just a double check.
            </remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.OBJImage.MsofbtOPT">
            <summary>
            Gets and sets the array of to record data.  Must call MakeMsofbtOPT before calling this method.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.OBJImage.MsofbtOPTSize">
            <summary>
            Gets size of msofbtOPT recorddata.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.OBJImage.OriginalImageObject">
            <summary>
            Gets the original image object.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.OBJmetafiletail">
            <summary>
            Used by OBJ_meta for it's tail member.
            22 byte strcuture.
            </summary>
            <remarks>
            This structure appears to be part of the BIFF OBJ structure for Picture objects, 
            begining at offset 22h (26h for BIFF 5).
            </remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.OBJ_MFtail_grbit">
            <summary>
            2 byte structure used by OBJ_metafiletail.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.OBJ_MFtail_grbit.Reserved2">
            <summary>
            Gets reserved2 field.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.OBJhead">
            <summary>
            Used by OBJ_line, OBJ_png, and OBJ_meta.
            </summary>
            <remarks>
            This appears to be based on the BIFF5 and BIFF7 documentation for the BIFF OBJ record.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJhead.cObj">
            <summary>
            Number of objects (1 based, 4 bytes).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJhead.OT">
            <summary>
            Object type (2 bytes)
            1 is line, 2 is rect, 3 is oval, 8 is picture, 9 is polygon.
            Up to 9 is common in all versions.  
            Up to 20 is defined in BIFF 8.  
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJhead.id">
            <summary>
            Object ID number (2 bytes).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJhead.grbit">
            <summary>
            Flags, (2 bytes).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJhead.colL">
            <summary>
            Column containing upper left (2 bytes).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJhead.dxL">
            <summary>
            X (horz) position of upper left corner, relative to the the left side of the underlying 
            cell, expressed as 1/1024th of the cell's width. (2 bytes)
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJhead.rwT">
            <summary>
            Row containing upper-left corner of obj's bounding rect (2 bytes).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJhead.dyT">
            <summary>
            Vert position like dxL, relative to top of underlying cell in 1/1024th's of the cells height (2 bytes).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJhead.colR">
            <summary>
            col contatining lower right of OBR (2 bytes).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJhead.dxR">
            <summary>
            X pos of lower right OBR, relative to left side of UC (2 bytes).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJhead.rwB">
            <summary>
            row contatining lower right of OBR (2 bytes).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJhead.dyB">
            <summary>
            Y pos of the lower right OBR relative to the top of UC in 1/1024th's of the underlying cells height (2 bytes).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJhead.cbMacro">
            <summary>
            Length of the FMLA structure that stores the definition of the attached macro (2 bytes).
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.OBJ_grbit">
            <summary>
            Flags for OBJ_line.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJ_grbit.fSel">
            <summary>
            1 Bit.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJ_grbit.fAutoSize">
            <summary>
            1 Bit.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJ_grbit.fMove">
            <summary>
            1 Bit.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJ_grbit.fLocked">
            <summary>
            1 Bit.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJ_grbit.fGrouped">
            <summary>
            1 Bit.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJ_grbit.fHidden">
            <summary>
            1 Bit.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJ_grbit.fVisible">
            <summary>
            1 Bit.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJ_grbit.fPrint">
            <summary>
            1 Bit.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.OBJlinetail">
            <summary>
            This structure represents the BIFF5 &amp; BIFF7 format of OBJ / "Line Object" structure.  Use OBJ_line.write_to_stream for BIFF8 Escher formmated data.
            Used by OBJ_line.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJlinetail.icv">
            <summary>
            Index to color palette.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJlinetail.lns">
            <summary>
            Line style:
            Solid: lns = 0
            Dash: lns = 1
            Dot: lns = 2
            Dash-dot: lns = 3
            Dash-dot-dot: lns = 4
            Null (unused): lns = 5
            Dark gray: lns = 6
            Medium gray: lns = 7
            Light gray: lns = 8 
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJlinetail.lnw">
            <summary>
            Line weight:
            Hairline: lnw = 0
            Single: lnw = 1
            Double: lnw = 2
            Thick: lnw = 3
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJlinetail.fAuto">
            <summary>
            1 if automatic border is on.
            </summary>
            <remarks>
            BIFF5 &amp; BIFF7: Bit 0 = 1 if Automatic Border option is turned on (Format Object dialog box, Patterns tab). 
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJlinetail.es">
            <summary>
            End style structure, arrowhead style.
            </summary>
            <remarks>
            This is a bitmasked 2 byte value, documented in "MS Excel97 SDK" as follows:
            The end style structure (es) describes the arrowheads on the end point of the line. The structure contains four 4-bit fields, as described in the following table. 
            0		3�0	0Fh	sest	Arrowhead style:
            								None: sest = 0
            								Open: sest = 1
            								Filled: sest = 2
            								Double-ended open: sest = 3
            								Double-ended filled: sest = 4 
            7�4	F0h 	sesw			Arrowhead width:
            								Narrow: sesw = 0
            								Medium: sesw = 1
            								Wide: sesw = 2 
            1 	3�0 	0Fh	sesl	Arrowhead length:
            								Short: sesl = 0
            								Medium: sesl = 1
            								Long: sesl = 2 
            7�4 	F0h 	(Unused)		  
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.OBJlinetail.iqu">
            <summary>
            Quadrant Index: Describes the line from the starting position to the ending position.
            Lower Right to Upper Left = 0.
            Lower Left to Upper Right = 1
            Upper Left to Lower Right = 2
            Upper Right to Lower Left = 3
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.AHendstyles">
            <summary>
            Used by OBJ_line for "Arrow Head End Styles" for BIFF8 format.  Basically this struct is our own thing that stores the values for a few properties in the msofbtOPT array of FOPTE structs with prop info for the line object.  See OBJline.make_msofbtOPT.
            Representing the style of the arrows at each end of the line.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.AHendstyles.m_startstyle">
            <summary>
            Private storage for startStyle property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.AHendstyles.startstyle">
            <summary>
            startstyle member.
            </summary>
            <remarks>
            Has 3 bits for storage.
            </remarks>		
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.AHendstyles.m_endstyle">
            <summary>
            Private storage for endstyle property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.AHendstyles.endstyle">
            <summary>
            endstyle member.
            </summary>
            <remarks>
            Has 3 bits for storage.
            </remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.AHendstyles.startwidth">
            <summary>
            startwidth member.
            </summary>
            <remarks>Has 2 bits for storage.</remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.AHendstyles.m_startlength">
            <summary>
            Private storage for startlength member.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.AHendstyles.startlength">
            <summary>
            startlength property.
            </summary>
            <remarks>Has 2 bits for storage.</remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.AHendstyles.m_endwidth">
            <summary>
            Private storage for m_endwidth;
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.AHendstyles.endwidth">
            <summary>
            endwidth property.
            </summary>
            <remarks>Has 2 bits for storage.</remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.AHendstyles.m_endlength">
            <summary>
            Private storage for endlength.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.AHendstyles.endlength">
            <summary>
            endlength member.
            </summary>
            <remarks>Has 2 bits for storage.</remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.FOPTE">
             <summary>
             This is a 16 bit structure used by OBJ_line.make_msofbtOPT.
             Its purpose is to hold a property ID/value pair for the BIFF8 formmated msofbtOPT/FOPTE property table.
             </summary>
             <remarks>
             Taken from the "Shape Properties msofbtOPT" topic in the "Microsoft Office 97 Drawing File Format" documentation:
             The first part of an OPT (such as msofbtOPT) record is an array of FOPTEs, 
             consisting of ID-value pairs tightly packed:
             <c>
             typedef struct _FOPTE
             {
            	struct
            	{
            		USHORT pid : 14;     // Property ID
            	 	USHORT fBid : 1;     // value is a blip ID � only valid if fComplex is FALSE
            	   USHORT fComplex : 1; // complex property, value is length
            	};
            	ULONG   op;					// Value
             } FOPTE;
            </c>
             </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FOPTE.m_pid">
            <summary>
            Private storage for pid property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.FOPTE.pid">
            <summary>
            Property ID.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FOPTE.fBid">
            <summary>
            Value is a blip ID � only valid if fComplex is FALSE
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FOPTE.fComplex">
            <summary>
            Complex property, value is length
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FOPTE.op">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.MSOFBH">
            <summary>
            Common Header: 
            The common record header is an 8-byte structure defined in msodr.h as follows:
            <c>
            typedef struct MSOFBH
            {
            	struct
            {
            		ULONG ver : 4;
            		ULONG inst: 12;
            		ULONG fbt : 16;
            	};
            	ULONG     cbLength;
            } MSOFBH;
            </c>
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.MSOFBH.m_ver">
            <summary>
            Private storage for ver.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.MSOFBH.ver">
            <summary>
            Record Version: (ver) Indicates the version if the record is an atom. If the record is a container, this field has a value of 0xFFFF.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.MSOFBH.m_inst">
            <summary>
            Private storage for inst member.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.MSOFBH.inst">
            <summary>
            Record Instance: (inst) Differentiates atoms. Depending on the instance a record's contents it can have different meanings. For example a list container can store a list of slides or a list of fonts, and its instance would vary accordingly. The instance of a record is useful for differentiating atoms when there is more than one atom of the same type in a particular container
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.MSOFBH.fbt">
            <summary>
            Record Type: (fbt) Indicates the signature or type of the record. 
            Each record has a symbolic and a numeric signature in msodr.h. 
            Escher uses values from 0xF000 to 0xFFFF. Clients may define their own records in other 
            ranges. A description of each of the different types can be found in the following sections.
            </summary> 
            <remarks>
            For msofbtBlip records fbt:
            If a delay stream is not used, then the BLIP data follows the BSE header in a separate 
            record.  The FBT of the BLIP record is the MSOBLIPTYPE plus msofbtBlipFirst (0xF018). (If a 
            delay stream is being used, the BLIP's record header and data are both written there instead.)
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.MSOFBH.cbLength">
            <summary>
            Record Length: (cbLength) Stores the length of the record in bytes. If the record is an 
            atom, it refers to the length of the atom excluding the header. If the record is a 
            container, it refers to the sum of the lengths of the atoms inside it, plus the length 
            of the record headers.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.MSOFBH.SizeOf">
            <summary>
            Returns the size of this struct in bytes.  This is the number of bytes WriteToBiff(..) would write out.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.MSOPNGHeader">
            <summary>
            This is the header data that appears just before the raw PNG data in the output.  We write the raw data seperate from this header.  The raw PNG data is NOT part of this struct.
            </summary>
            <remarks>
            Taken straight out of the "BStore Container msofbtBstoreContainer" documentation in MSDN Library - July 1999.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.MSOPNGHeader.SizeOf">
            <summary>
            The size of this record's output (when written with WriteToBiff) in bytes.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.MSOMetaHeader">
            <summary>
            MSOMetaHeader is a very specific type of msofbt record for 
            storing metafiles in the "BStore Container (msofbtBstoreContainer)".
            </summary>
            <remarks>
            This structure comes striaght out of the "BStore Container msofbtBstoreContainer" topic 
            in the "Office 97 Drawing File Format" documentation in July 1999 MSDN Library.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.MSOMetaHeader.m_rgbUid">
            <summary>
            The secondary, or data, UID - should always be set.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.MSOMetaHeader.m_cb">
            <summary>
            Metafile Blip overhead = 34 bytes. m_cb gives the number of 
            bytes required to store an uncompressed version of the file, m_cbSave 
            is the compressed size.  m_mfBounds gives the boundary of all the 
            drawing calls within the metafile (this may just be the bounding box 
            or it may allow some whitespace, for a WMF this comes from the 
            SetWindowOrg and SetWindowExt records of the metafile).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.MSOMetaHeader.m_rcBounds">
            <summary>
            Boundary of metafile drawing commands.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.MSOMetaHeader.m_ptSize">
            <summary>
            Size of metafile in EMUs.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.MSOMetaHeader.m_cbSave">
            <summary>
            Cache of saved size (size of m_pvBits)
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.MSOMetaHeader.m_fCompression">
            <summary>
            MSOBLIPCOMPRESSION Value
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.MSOMetaHeader.SizeOf">
            <summary>
            Returns the size of this struct in bytes.  This is the number of bytes WriteToBiff(..) would write out.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.ImageInfo">
            <summary>
            Used by DDSheet.AddImage to specify various options about the image.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageInfo._top">
            <summary>
            Represent Top property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.ImageInfo.Top">
            <summary>
            The distance from cell's top to image's top. The unit is pixel.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageInfo._left">
            <summary>
            Represent Left property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.ImageInfo.Left">
            <summary>
            The distance from cell's left to image's left. The unit is pixel.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageInfo._lineWidth">
            <summary>
            Represent LineWidth property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.ImageInfo.LineWidth">
            <summary>
            The line width of image outline. The unit is pixel.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageInfo._displayWidth">
            <summary>
            Represent DisplayWidth property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.ImageInfo.DisplayWidth">
            <summary>
            The display width of image object in excel. The unit is pixel.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageInfo._displayHeight">
            <summary>
            Represent DisplayHeight property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.ImageInfo.DisplayHeight">
            <summary>
            The display height of image object in excel. The unit is pixel.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageInfo._cropFromTop">
            <summary>
            Represent CropFromTop property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.ImageInfo.CropFromTop">
            <summary>
            A percent indicate the times of top crop part occupying the total image height.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageInfo._cropFromLeft">
            <summary>
            Represent CropFromLeft property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.ImageInfo.CropFromLeft">
            <summary>
            A percent indicate the times of left crop part occupying the total image width.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageInfo._cropFromRight">
            <summary>
            Represent CropFromRight property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.ImageInfo.CropFromRight">
            <summary>
            A percent indicate the times of right crop part occupying the total image width.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageInfo._cropFromBottom">
            <summary>
            Represent CropFromBottom property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.ImageInfo.CropFromBottom">
            <summary>
            A percent indicate the times of bottom crop part occupying the total image height.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.ImageInfo.MoveWithCells">
            <summary>
            True if the object moves with the cells (Format Object dialog box, Properties tab).
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.ImageInfo.AutoSize">
            <summary>
            True if the object moves and sizes with the cells.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageInfo.lns">
            <summary>
            Private storage for Line style.  Values are:
            Solid: lns = 0
            Dash: lns = 1
            Dot: lns = 2
            Dash-dot: lns = 3
            Dash-dot-dot: lns = 4
            Null (unused): lns = 5
            Dark gray: lns = 6
            Medium gray: lns = 7
            Light gray: lns = 8 
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.ImageInfo.LineStyle">
            <summary>
            Sets or returns the style of the line bounding an image.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageInfo.lnw">
            <summary>
            Line weight:
            Hairline: lnw = 0
            Single: lnw = 1
            Double: lnw = 2
            Thick: lnw = 3
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.ImageInfo.LineWeight">
            <summary>
            Indicates the weight of the line surouding an image.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.ImageInfo.AutoFill">
            <summary>
            True if the Automatic Fill option is turned on (Format Object dialog box, Patterns tab). 
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.ImageInfo.QuadrantIndex">
            <summary>
            Defines what direction the image begins and ends in.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageInfo.fls">
            <summary>
            Fill Pattern.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.ImageInfo.FillPattern">
            <summary>
            Sets or returns whether the background of the image is filled or not.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.FPSPLcustom">
            <summary>
            FPSPLcustom represents SQID, and MSOSPID as well.  In c++ these were typedefs to the same struct.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FPSPLcustom.ichild">
            <summary>
            A 10 bit unsigned integer.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FPSPLcustom.igroup">
            <summary>
            A 22 bit unsigned integer.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.FSP">
            <summary>
            Shape Record msofbtSp.
            The instance field of the record header contains the shape type; 
            the record itself contains the shape ID and a group of persistent flags:
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FSP.spid">
            <summary>
            The shape ID.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FSP.fGroup">
            <summary>
            This shape is a group shape
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FSP.fChild">
            <summary>
            Not a top-level shape.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FSP.fPatriarch">
            <summary>
            This is the topmost group shape.
            </summary>
            <remarks>
            Exactly one of these per drawing. 
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FSP.fDeleted">
            <summary>
            The shape has been deleted.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FSP.fOleShape">
            <summary>
            The shape is an OLE object.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FSP.fHaveMaster">
            <summary>
            Shape has a hspMaster property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FSP.fFlipH">
            <summary>
            Shape is flipped horizontally
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FSP.fFlipV">
            <summary>
            Shape is flipped vertically
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FSP.fConnector">
            <summary>
            Connector type of shape.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FSP.fHaveAnchor">
            <summary>
            Shape has an anchor of some kind
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FSP.fBackground">
            <summary>
            Background shape
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FSP.fHaveSpt">
            <summary>
            Shape has a shape type property
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FSP.reserved">
            <summary>
            20 bit unsigned integer.  Not yet used.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.gridratio">
            <summary>
            This structure represents a portion of the OBJ BIFF Record, begining with the colL member at offset 14dec, 
            and ending with the dyB member at offset 28dec.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.gridratio.colL">
            <summary>
            Column containing upper left.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.gridratio.dxL">
            <summary>
            X (horz) position of upper left corner, relative to the the left  side of the underlying cell, expressed as 1/1024th of the cell's width.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.gridratio.rwT">
            <summary>
            Row containing upper-left corner of obj's bounding rect.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.gridratio.dyT">
            <summary>
            Vertical position (like dxL is to horizontal position), relative to top of underlying 
            cell in 1/1024th's of the cells height.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.gridratio.colR">
            <summary>
            col contatining lower right of OBR
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.gridratio.dxR">
            <summary>
            X pos of lower right OBR, relative to left side of UC.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.gridratio.rwB">
            <summary>
            Row contatining lower right of OBR.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.gridratio.dyB">
            <summary>
            Y pos of the lower right OBR relative to the top of UC in 1/1024th's of the underlying cells height.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.FDGGcustom">
            <summary>
            This struct represents what Escher calls FDGG.  Except for possibly spidMax's type (SQID) this does not appear to be "customized" as the name implies.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FDGGcustom.spidMax">
            <summary>
            The current maximum shape ID.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.FBSE">
            <summary>
            FBSE - File Blip Store Entry.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FBSE.btWin32">
            <summary>
            Required type on Win32.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FBSE.btMacOS">
            <summary>
            Required type on Mac
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FBSE.rgbUid">
            <summary>
            Identifier of blip.
            </summary>
            <remarks>
            Found in "MSDN Library - July 1999" under topic "BStore Container msofbtBstoreContainer":
            Each BSE contains a 16-byte checksum that is used to quickly compare a BLIP with other BLIPs in the store. Any algorithm could be used for this checksum. Escher uses the RSA Data Security, Inc. MD4 Message-Digest Algorithm for the checksums of its BLIP types. 
            
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FBSE.tag">
            <summary>
            Currently unused.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FBSE.size">
            <summary>
            Blip size in stream.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FBSE.cRef">
            <summary>
            Reference count on the blip.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FBSE.foDelay">
            <summary>
            File offset in the delay stream.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FBSE.usage">
            <summary>
            How this blip is used (MSOBLIPUSAGE).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FBSE.cbName">
            <summary>
            length of the blip name.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FBSE.unused2">
            <summary>
            for the future.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FBSE.unused3">
            <summary>
            for the future.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.FBSE.SizeOf">
            <summary>
            Returns the size of this struct in bytes.  This is the number of bytes WriteToBiff(..) would write out.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.MSOBLIPUSAGE">
            <summary>
            Used for FSBE.usage.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.MSOBLIPUSAGE.msoblipUsageDefault">
            <summary>
            All non-texture fill blips get this.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.MSOBLIPUSAGE.msoblipUsageMax">
            <summary>
            Since this is stored in a byte.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.MSOBLIPTYPE">
            <summary>
            Provides types for the BLIP Store Entry Record, msofbtBSE.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.MSOBI">
            <summary>
            Blip signature as encoded in the MSOFBH.inst
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.LineInfo">
            <summary>
            Used with the Sheet.AddLine method to specify information about the line.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.LineInfo.#ctor(System.Int32,System.Int16,System.Int32,System.Int16,System.Int32,System.Int16,System.Int32,System.Int16,GrapeCity.SpreadBuilder.Imaging.ObjectDirection,System.Int32,GrapeCity.SpreadBuilder.Imaging.LineStyles,System.Drawing.Color,System.Boolean,GrapeCity.SpreadBuilder.Imaging.SBFloatingMoveType,GrapeCity.SpreadBuilder.Imaging.LineArrowHeadStyles,GrapeCity.SpreadBuilder.Imaging.LineArrowHeadWidths,GrapeCity.SpreadBuilder.Imaging.LineArrowHeadLengths,GrapeCity.SpreadBuilder.Imaging.LineArrowHeadStyles,GrapeCity.SpreadBuilder.Imaging.LineArrowHeadWidths,GrapeCity.SpreadBuilder.Imaging.LineArrowHeadLengths)">
            <summary>
            Create a LineInfo class with setting all the fields and properties.
            </summary>
            <param name="columnLeft">The one-based column containing the upper-left corner of the line's bounding rectangle.</param>
            <param name="dxL">The X (horizontal) position of the upper-left corner of the object's bounding rectangle, relative to the left side of the underlying cell (specified in colL), expressed as 1/1024th of the cell's width.  </param>
            <param name="rowTop">The one-based row containing the upper-left corner of the line's bounding rectangle.</param>
            <param name="dyT">The Y (vertical) position of the upper-left corner of the object's bounding rectangle, relative to the top of the underlying cell, expressed as 1/1024th of the cell's height.</param>
            <param name="columnRight">The one-based column containing the lower-right corner of the line's bounding rectangle.</param>
            <param name="dxR">The X (horizontal) position of the lower-right corner of the object's bounding rectangle, relative to the left side of the underlying cell, expressed as 1/1024th of the cell's width.</param>
            <param name="rowBottom">The one-based row containing the lower-right corner of the line's bounding rectangle.</param>
            <param name="dyB">The Y (vertical) position of the lower-right corner of the object's bounding rectangle, relative to the top of the underlying cell, expressed as 1/1024th of the cell's height.</param>
            <param name="iQu">The direction of the line.  Use GrapeCity.SpreadBuilder.Escher.LineDirections constants to define the "quadrant index."</param>
            <param name="weight">The thickness of the line.</param>
            <param name="style">The style of the line.</param>
            <param name="netColor">The System.Drawing.Color for the line.</param>
            <param name="fAuto">Excel automatic border option.</param>
            <param name="MoveType">The options users will have for moving or resizing the line in the spreadsheet.</param>
            <param name="StartAHStyle">The style of the starting arrowhead.</param>
            <param name="StartAHWidth">The width of the starting arrowhead.</param>
            <param name="StartAHLength">The length of the starting arrowhead.</param>
            <param name="EndAHStyle">The style of the ending arrowhead.</param>
            <param name="EndAHWidth">The width of the ending arrowhead.</param>
            <param name="EndAHLength">The length of the ending arrowhead.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.LineInfo.#ctor(System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,GrapeCity.SpreadBuilder.Imaging.ObjectDirection,System.Int32,GrapeCity.SpreadBuilder.Imaging.LineStyles,System.Drawing.Color,System.Boolean,GrapeCity.SpreadBuilder.Imaging.SBFloatingMoveType,GrapeCity.SpreadBuilder.Imaging.LineArrowHeadStyles,GrapeCity.SpreadBuilder.Imaging.LineArrowHeadWidths,GrapeCity.SpreadBuilder.Imaging.LineArrowHeadLengths,GrapeCity.SpreadBuilder.Imaging.LineArrowHeadStyles,GrapeCity.SpreadBuilder.Imaging.LineArrowHeadWidths,GrapeCity.SpreadBuilder.Imaging.LineArrowHeadLengths)">
            <summary>
            Create a LineInfo class with setting all the fields and properties.
            </summary>
            <param name="colL">The one-based column containing the upper-left corner of the line's bounding rectangle.</param>
            <param name="dxL">The X (horizontal) position of the upper-left corner of the object's bounding rectangle, relative to the left side of the underlying cell (specified in colL), expressed as 1/1024th of the cell's width.  </param>
            <param name="rwT">The one-based row containing the upper-left corner of the line's bounding rectangle.</param>
            <param name="dyT">The Y (vertical) position of the upper-left corner of the object's bounding rectangle, relative to the top of the underlying cell, expressed as 1/1024th of the cell's height.</param>
            <param name="colR">The one-based column containing the lower-right corner of the line's bounding rectangle.</param>
            <param name="dxR">The X (horizontal) position of the lower-right corner of the object's bounding rectangle, relative to the left side of the underlying cell, expressed as 1/1024th of the cell's width.</param>
            <param name="rwB">The one-based row containing the lower-right corner of the line's bounding rectangle.</param>
            <param name="dyB">The Y (vertical) position of the lower-right corner of the object's bounding rectangle, relative to the top of the underlying cell, expressed as 1/1024th of the cell's height.</param>
            <param name="iQu">The direction of the line.  Use GrapeCity.SpreadBuilder.Escher.LineDirections constants to define the "quadrant index."</param>
            <param name="weight">The thickness of the line.</param>
            <param name="style">The style of the line.</param>
            <param name="netColor">The System.Drawing.Color for the line.</param>
            <param name="fAuto">Excel automatic border option.</param>
            <param name="MoveType">The options users will have for moving or resizing the line in the spreadsheet.</param>
            <param name="StartAHStyle">The style of the starting arrowhead.</param>
            <param name="StartAHWidth">The width of the starting arrowhead.</param>
            <param name="StartAHLength">The length of the starting arrowhead.</param>
            <param name="EndAHStyle">The style of the ending arrowhead.</param>
            <param name="EndAHWidth">The width of the ending arrowhead.</param>
            <param name="EndAHLength">The length of the ending arrowhead.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.LineInfo.#ctor">
            <summary>
            The default constructor for the LineInfo class.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.LineInfo.ColumnLeft">
            <summary>
            Column containing the upper-left corner of the object's bounding rectangle.
            </summary>
            <remarks>Cannot be negative.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.LineInfo.colL">
            <summary>
            Column containing the upper-left corner of the object's bounding rectangle.
            </summary>
            <remarks>Cannot be negative.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.LineInfo.RowTop">
            <summary>
            Row containing the upper-left corner of the object's bounding rectangle.
            </summary>
            <remarks>Cannot be negative.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.LineInfo.rwT">
            <summary>
            Row containing the upper-left corner of the object's bounding rectangle.
            </summary>
            <remarks>Cannot be negative.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.LineInfo.ColumnRight">
            <summary>
            Column containing the lower-right corner of the object's bounding rectangle.
            </summary>
            <remarks>Cannot be negative.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.LineInfo.colR">
            <summary>
            Column containing the lower-right corner of the object's bounding rectangle.
            </summary>
            <remarks>Cannot be negative.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.LineInfo.RowBottom">
            <summary>
            Row containing the lower-right corner of the object's bounding rectangle.
            </summary>
            <remarks>Cannot be negative.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Imaging.LineInfo.rwB">
            <summary>
            Row containing the lower-right corner of the object's bounding rectangle.
            </summary>
            <remarks>Cannot be negative.</remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineInfo.dxL">
            <summary>
            X (horizontal) position of the upper-left corner of the object's bounding rectangle, 
            relative to the left side of the underlying cell (specified in colL), expressed as 1/1024th of the cell's 
            width.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineInfo.dyT">
            <summary>
            Y (vertical) position of the upper-left corner of the object's bounding rectangle, 
            relative to the top of the underlying cell, expressed as 1/1024th of the cell's height.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineInfo.dxR">
            <summary>
            X (horizontal) position of the lower-right corner of the object's bounding rectangle, relative to the left side of the underlying cell, expressed as 1/1024th of the cell's width.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineInfo.dyB">
            <summary>
            Y (vertical) position of the lower-right corner of the object's bounding rectangle, relative to the top of the underlying cell, expressed as 1/1024th of the cell's height.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineInfo.iQu">
            <summary>
            Use GrapeCity.SpreadBuilder.Escher.LineDirections constants to define "quadrant index" (direction of line).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineInfo.Weight">
            <summary>
            Set to one of the Excel enumerated line weight values. 
            <c>
            Effect for Microsoft Excel 97 file format. (BIFF8) 
            Parameter will generate line with weight parameter as points.
            Effect for versions 3, 4, 5, and 7.  Version 2 does not support lines.
            0 Hairline		0 points
            1 Single 		.75 points
            2 Double 		1.35 points
            3 Thick 		1.95 points
            </c>
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineInfo.Style">
            <summary>
            <c>
            Set to one of the Excel enumerated line style values.
            Effect for Microsoft Excel 97 file format. (BIFF8) 
            
            0 Solid
            1 Small Dash (No Equivalent Menu for Excel 2000)
            2 Square Dot
            3 Small Dash, Square Dot (No Equivalent Menu for Excel 2000)
            4 Small Dash, Square Dot, Square Dot (No Equivalent Menu for Excel 2000)
            5 Loosely spaced Square Dot (No Equivalent Menu for Excel 2000)
            6 Dash
            7 Long Dash
            8 Dash Dot
            9 Long Dash Dot
            10 Long Dash Dot Dot
            11 Round Dot		
            
            Effect for versions 3, 4, 5, and 7.  Version 2 does not support lines.
            0 Solid
            1 Long Dash 
            2 Dash
            3 Long Dash Dot
            4 Long Dash Dot Dot
            5 Pattern 50% Solid (No Equivalent Menu for Excel 2000)
            6 Pattern 75% Solid (No Equivalent Menu for Excel 2000)
            7 Pattern 25% Solid (No Equivalent Menu for Excel 2000)
            15 Transparent (No Line)
            </c>
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineInfo.Color">
            <summary>
            The color the line should be as System.Drawing.Color.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineInfo.fAuto">
            <summary>
            Set fAuto to 1 if you want the Excel automatic border option turned on.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineInfo.MoveType">
            <summary>
            Set to one of the SBFloatingMoveType constants.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineInfo.StartAHStyle">
            <summary>
            Use the LineArrowHeadStyles enumeration to specify the style for the arrow head at the start of the line.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineInfo.StartAHWidth">
            <summary>
            The starting arrowhead width.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineInfo.StartAHLength">
            <summary>
            The starting arrowhead length.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineInfo.EndAHStyle">
            <summary>
            Use the LineArrowHeadStyles enumeration to specify the style for the arrow head at the end of the line.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineInfo.EndAHWidth">
            <summary>
            The ending arrowhead width.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineInfo.EndAHLength">
            <summary>
            The ending arrowhead length.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.MSOBLIPCOMPRESSION">
            <summary>
            "Compression Status" flags.
            </summary>
            <remarks>
            These values are used by our MSOMetaHeader struct's m_fComopression member.
            </remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.MSOBLIPFILTER">
            <summary>
            From MSODrawing Docs:
            Filter values that define pre-filtering of metafile data to give better compression. 
            Currently no pre-filtering is done (it is likely that filtering on a per-record basis will 
            give substantially better compression in the future).
            </summary>
            <remarks>
            These values are/would be used by our MSOMetaHeader struct's m_fFilter member.
            </remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.ObjectDirection">
            <summary>
            Used by DDSheet.AddLine and DDSheet.AddImage to define line or image directions.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ObjectDirection.UpperLeftToLowerRight">
            <summary>
            Upper left to lower right.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ObjectDirection.UpperRightToLowerLeft">
            <summary>
            Upper right to lower left.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ObjectDirection.LowerRightToUpperLeft">
            <summary>
            Lower right to upper left.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ObjectDirection.LowerLeftToUpperRight">
            <summary>
            Lower left to upper right.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.SBFloatingMoveType">
            <summary>
            Used by DDSheet.AddLine(..) 
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.SBFloatingMoveType.MoveNoSize">
            <summary>
            Lines and Pictures move but do not size with cells.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.SBFloatingMoveType.MoveSize">
            <summary>
            Lines and Pictures move and size with cells.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.SBFloatingMoveType.NoMoveNoSize">
            <summary>
            Lines and Pictures do not move or size with cells.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.ImageLineWeight">
            <summary>
            Used with ImageInfo.LineWeight to specify the weight of a line bounding an image.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageLineWeight.Hairline">
            <summary>
            Hairline
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageLineWeight.Single">
            <summary>
            Single
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageLineWeight.Double">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageLineWeight.Thick">
            <summary>
            Thick
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.ImageLineStyle">
            <summary>
            Used with ImageInfo.LineStyle to specify the style of the line bounding an image.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageLineStyle.Solid">
            <summary>
            Solid
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageLineStyle.Dash">
            <summary>
            Dash
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageLineStyle.Dot">
            <summary>
            Dot
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageLineStyle.DashDot">
            <summary>
            Dash dot
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageLineStyle.DashDotDot">
            <summary>
            Dash dot dot
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageLineStyle.Null">
            <summary>
            Null
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageLineStyle.DarkGray">
            <summary>
            Dark gray
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageLineStyle.MediumGray">
            <summary>
            Medium gray
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.ImageLineStyle.LightGray">
            <summary>
            Light gray
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.LineStyles">
            <summary>
            Contains the various line styles for several versions of BIFF.  Note that some values are not valid in some versions of the Excel BIFF file format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineStyles.Solid">
            <summary>
            Sold.  
            </summary>
            <remarks>
            Effect for versions 3, 4, 5, and 7: Solid.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineStyles.SmallDash">
            <summary>
            Small Dash (No Equivalent Menu for Excel 2000).
            </summary>
            <remarks>
            Effect for versions 3, 4, 5, and 7: Long Dash.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineStyles.SquareDot">
            <summary>
            Square Dot.
            </summary>
            <remarks>Effect for versions 3, 4, 5, and 7: Dash.</remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineStyles.SmallDashSquareDot">
            <summary>
            Small Dash, Square Dot.
            </summary>
            <remarks>
            No Equivalent Menu for Excel 2000.
            Effect for versions 3, 4, 5, and 7: Long Dash Dot.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineStyles.SmallDashSquareDotSquareDot">
            <summary>
            Small Dash, Square Dot, Square Dot.
            </summary>
            <remarks>
            No Equivalent Menu for Excel 2000.
            Effect for versions 3, 4, 5, and 7: Long Dash Dot Dot.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineStyles.LooselySpacedSquareDot">
            <summary>
            Loosely spaced Square Dot.
            </summary>
            <remarks>
            No Equivalent Menu for Excel 2000.
            Effect for versions 3, 4, 5, and 7: Pattern 50% Solid (No Equivalent Menu for Excel 2000)
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineStyles.Dash">
            <summary>
            Dash.
            </summary>
            <remarks>
            Effect for versions 3, 4, 5, and 7: Pattern 75% Solid (No Equivalent Menu for Excel 2000).
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineStyles.LongDash">
            <summary>
            Long Dash.
            </summary>
            <remarks>
            Effect for versions 3, 4, 5, and 7: Pattern 25% Solid (No Equivalent Menu for Excel 2000).
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineStyles.DashDot">
            <summary>
            Dash Dot.
            </summary>
            <remarks>
            Effect for versions 3, 4, 5, and 7: Not Applicable.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineStyles.LongDashDot">
            <summary>
            Long Dash Dot.
            </summary>
            <remarks>
            Effect for versions 3, 4, 5, and 7: Not Applicable.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineStyles.LongDashDotDot">
            <summary>
            Long Dash Dot Dot.
            </summary>
            <remarks>
            Effect for versions 3, 4, 5, and 7: Not Applicable.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineStyles.RoundDot">
            <summary>
            Round Dot.
            </summary>
            <remarks>
            Effect for versions 3, 4, 5, and 7: Not Applicable.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineStyles.OldTransparent">
            <summary>
            Transparent (No Line), only effective in BIFF versions 3, 4, 5, and 7.
            </summary>
            <remarks>
            Effect for versions 3, 4, 5, and 7: Transparent (No Line).
            </remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.LineArrowHeadStyles">
            <summary>
            Excel enumerated type for arrowhead styles.
            </summary>
            <remarks>Used with DDSheet.AddLine(..).</remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineArrowHeadStyles.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineArrowHeadStyles.Open">
            <summary>
            Open
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineArrowHeadStyles.Filled">
            <summary>
            Filled
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineArrowHeadStyles.DoubleEndedOpen">
            <summary>
            Double ended open
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineArrowHeadStyles.DoubleEndedFilled">
            <summary>
            Double ended filled
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.LineArrowHeadWidths">
            <summary>
            Enumerated type for Excel arrowhead width. 
            </summary>
            <remarks>Used with DDSheet.AddLine(..).</remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineArrowHeadWidths.Narrow">
            <summary>
            Narrow
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineArrowHeadWidths.Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineArrowHeadWidths.Wide">
            <summary>
            Wide
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.LineArrowHeadLengths">
            <summary>
            Enumerated type for Excel arrowhead length.   
            </summary>
            <remarks>Used with DDSheet.AddLine(..).</remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineArrowHeadLengths.Short">
            <summary>
            Short
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineArrowHeadLengths.Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.LineArrowHeadLengths.Long">
            <summary>
            Long
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.AnchorType">
            <summary>
            The type of the anchor for the image in excel. 
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.AnchorType.TwoCellAnchor">
            <summary>
            Anchor by the Left/Top point and Right/Bottom point.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Imaging.AnchorType.OneCellAnchor">
            <summary>
            Anchor by the Left/Top point and Width/Height size. 
            Only supported by OpenXml.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Imaging.MetafileSaver">
            <summary>
            Will save a System.Drawing.Image object to various metafile encodings to stream, or to file.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.MetafileSaver.GetWinMetaFileBitsExtern(System.IntPtr,System.UInt32,System.IntPtr,System.Int32,System.IntPtr)">
             <summary>
             The GetWinMetaFileBits function converts the enhanced-format records from a metafile into Windows-format records and stores the converted records in the specified buffer. 
             </summary>
             <param name="hemf">[in] Handle to the enhanced metafile.</param>
             <param name="cbBuffer">[in] Specifies the size, in bytes, of the buffer into which the converted records are to be copied.</param>
             <param name="lpBuffer">[out] Pointer to the buffer that receives the converted records. If lpbBuffer is NULL, GetWinMetaFileBits returns the number of bytes required to store the converted metafile records.</param>
             <param name="fnMapMode">[in] Specifies the mapping mode to use in the converted metafile.</param>
             <param name="hdcRef">[in] Handle to the reference device context.</param>
             <returns>
             If the function succeeds and the buffer pointer is NULL, the return value is the number of bytes required to store the converted records; if the function succeeds and the buffer pointer is a valid pointer, the return value is the size of the metafile data in bytes.
             If the function fails, the return value is zero.
             Windows NT/2000/XP: To get extended error information, call GetLastError.
             </returns>
             <remarks>
             ///From Platform SDK:
            UINT GetWinMetaFileBits(
            	HENHMETAFILE hemf, // handle to the enhanced metafile
            	UINT cbBuffer,     // buffer size
            	LPBYTE lpbBuffer,  // records buffer
            	INT fnMapMode,     // mapping mode
            	HDC hdcRef         // handle to reference DC
            	);
            	
             From Header file: WINGDIAPI UINT  WINAPI GetWinMetaFileBits( IN HENHMETAFILE, IN UINT, OUT LPBYTE, IN INT, IN HDC);
             </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.MetafileSaver.GlobalLockExtern(System.IntPtr)">
            <summary>
            The GlobalLock function locks a global memory object and returns a pointer to the first byte of the object's memory block (from Platform SDK Docs).
            </summary>
            <param name="hGlobal">[in] Handle to the global memory object. This handle is returned by either the GlobalAlloc or GlobalReAlloc function.</param>
            <returns>
            If the function succeeds, the return value is a pointer to the first byte of the memory block.
            If the function fails, the return value is NULL. To get extended error information, call GetLastError.
            </returns>
            <remarks>
            The internal data structures for each memory object include a lock count that is initially zero. For movable memory objects, GlobalLock increments the count by one, and the GlobalUnlock function decrements the count by one. For each call that a process makes to GlobalLock for an object, it must eventually call GlobalUnlock. Locked memory will not be moved or discarded, unless the memory object is reallocated by using the GlobalReAlloc function. The memory block of a locked memory object remains locked until its lock count is decremented to zero, at which time it can be moved or discarded.
            Memory objects allocated with GMEM_FIXED always have a lock count of zero. For these objects, the value of the returned pointer is equal to the value of the specified handle.
            If the specified memory block has been discarded or if the memory block has a zero-byte size, this function returns NULL.
            Discarded objects always have a lock count of zero.
            
            Definition from Platform SDK Documentation:
            LPVOID GlobalLock(
             HGLOBAL hMem
            );
            
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.MetafileSaver.GlobalUnlockExtern(System.IntPtr)">
            <summary>
            The GlobalUnlock function decrements the lock count associated with a memory object that was allocated with GMEM_MOVEABLE. This function has no effect on memory objects allocated with GMEM_FIXED.
            </summary>
            <param name="hMem">[in] Handle to the global memory object. This handle is returned by either the GlobalAlloc or GlobalReAlloc function.</param>
            <returns>
            If the memory object is still locked after decrementing the lock count, the return value is a nonzero value.
            If the function fails, the return value is zero. To get extended error information, call GetLastError. If GetLastError returns NO_ERROR, the memory object is unlocked.
            </returns>
            <remarks>
            The internal data structures for each memory object include a lock count that is initially zero. For movable memory objects, the GlobalLock function increments the count by one, and GlobalUnlock decrements the count by one. For each call that a process makes to GlobalLock for an object, it must eventually call GlobalUnlock. Locked memory will not be moved or discarded, unless the memory object is reallocated by using the GlobalReAlloc function. The memory block of a locked memory object remains locked until its lock count is decremented to zero, at which time it can be moved or discarded.
            Memory objects allocated with GMEM_FIXED always have a lock count of zero. If the specified memory block is fixed memory, this function returns TRUE.
            If the memory object is already unlocked, GlobalUnlock returns FALSE and GetLastError reports ERROR_NOT_LOCKED.
            A process should not rely on the return value to determine the number of times it must subsequently call GlobalUnlock for a memory object.
            
            
            Definition from Platform SDK: 
            BOOL GlobalUnlock(
            HGLOBAL hMem
            );
            
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.MetafileSaver.GetDCExtern(System.IntPtr)">
            <summary>
            The GetDC function retrieves a handle to a display device context (DC) for the client area of a specified window or for the entire screen. You can use the returned handle in subsequent GDI functions to draw in the DC. 
            </summary>
            <param name="hWnd">
            [in] Handle to the window whose DC is to be retrieved. If this value is NULL, GetDC retrieves the DC for the entire screen. 
            Windows 98/Me, Windows 2000/XP: To get the DC for a specific display monitor, use the EnumDisplayMonitors and CreateDC functions. 
            </param>
            <returns>If the function succeeds, the return value is a handle to the DC for the specified window's client area. 
            If the function fails, the return value is NULL.Windows NT/2000/XP: To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.MetafileSaver.StreamFromImage(System.Drawing.Image,System.Drawing.Imaging.EmfType,System.Drawing.Graphics)">
            <summary>
            Creates a MemoryStream containing the specified type of EMF data and returns that stream.  
            The resultant stream will contain only the metafile data.
            </summary>
            <param name="img"></param>
            <param name="metafileType">
            Use EmfType.EmfOnly for GDI or Win32 compatable metafile data.
            Other EmfTypes might only be decodable by GDI+ / .NET.
            </param>
            <param name="aGraphics">
            This is a graphics that will be used to construct a Metafile instance. 
            It will NOT be disposed.  
            Caller is responsable for calling the Dispose() method on the supplied graphics.
            </param>
            <returns>
            A memory Stream containing the graphics.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.MetafileSaver.UnmanagedWmfFromImage(System.Drawing.Image)">
            <summary>
            Converts an System.Drawing.Image derived object to a 16 bit compatable WMF image with no headers.  
            This is required with Excel 95's imaging implementation.
            </summary>
            <param name="image">The System.Drawing.Image object to be converted to a the old style WMF bytes.</param>
            <returns>A byte array containing the 16 bit wmf image data.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.MetafileSaver.StreamFromImage(System.Drawing.Image,System.Drawing.Imaging.EmfType)">
            <summary>
            This implementation does not require the caller to supply a Graphics.  
            A temporary Graphics object will be created from a temporary instance of System.Windows.Forms.Control.  
            The Graphics and Control will be Disposed.
            This function's implementation is for applications such as SpreadBuilder which have no UI.  
            If the caller can supply a Graphics that might be a good idea so the caller can have greater control over the Graphics's settings and resources.
            </summary>
            <param name="img"></param>
            <param name="metafileType"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.MetafileSaver.SaveToFile(System.Drawing.Image,System.String,System.Drawing.Imaging.EmfType)">
            <summary>
            Saves the specified Image object as a metafile to the specified filename.
            </summary>
            <param name="img"></param>
            <param name="sFileName"></param>
            <param name="metafileType">
            Use EmfType.EmfOnly for GDI or Win32 compatable metafile data.
            Other EmfTypes might only be decodable by GDI+ / .NET.
            </param>
            <remarks>
            Ensure that the file does not exist before calling this method.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Imaging.MetafileSaver.CreateFakeGraphics">
            <summary>
            Returns a Graphics object from nothing.  The call MUST DISPOSE THE RETURNED GRAPHICS.
            </summary>
            <returns>
            A Graphics object.  The call MUST DISPOSE THE RETURNED GRAPHICS.
            </returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.NativeMethods">
            <summary>
            Contains some native method wrappers used by SpreadBuilder.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.NativeMethods.GetACP">
             <summary>
             Wrapper for the Kernel32 WinAPI function GetACP().
             </summary>
             <returns>
             The following are the ANSI code-page identifiers: 
            Identifier	Meaning
            874			Thai
            932			Japan
            936			Chinese (PRC, Singapore)
            949			Korean
            950			Chinese (Taiwan; Hong Kong SAR, PRC) 
            1200			Unicode (BMP of ISO 10646)
            1250			Windows 3.1 Eastern European 
            1251			Windows 3.1 Cyrillic
            1252			Windows 3.1 Latin 1 (U.S., Western Europe)
            1253			Windows 3.1 Greek
            1254			Windows 3.1 Turkish
            1255			Hebrew
            1256			Arabic
            1257			Baltic
             </returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.NoRepeatList`1">
            <summary>
            A list which do not contain the object which is the same with one of list items.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.NoRepeatList`1._list">
            <summary>
            Represent the list which contains all items.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.NoRepeatList`1.#ctor">
            <summary>
            Create a NoRepeatList class.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.NoRepeatList`1.AddItem(`0)">
            <summary>
            Add a item to list and return the item's index. 
            If there is same one, it will return the same 
            one's index and do not perform the adding.
            </summary>
            <param name="obj">The object which is used to add.</param>
            <returns>Return the added item or the same item's index.</returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.PageBreaks">
            <summary>
            Collection of Horiz or vertical pagebreaks.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.PageBreaks.m_breaks">
            <summary>
            Contains the PageBreak structures.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.PageBreaks.Clear">
            <summary>
            Removes all PageBreak's from this collection.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.PageBreaks.AddPageBreak(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Adds a pagebreak to the collection with the specified information.
            </summary>
            <param name="pri">See PageBreak.Pri property.</param>
            <param name="secStart">See PageBreak.secStart property.</param>
            <param name="secEnd">See PageBreak.secEnd property.</param>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.PageBreaks.Count">
            <summary>
            Gets breaks count.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.PageBreaks.Items">
            <summary>
            Return the items of PageBreaks.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.PageBreaks.PageBreak">
            <summary>
            Excel97DevKit: 
            The cbrk field contains the number of page breaks. Each element of the rgbrk 
            structure contains three 2-byte integers: the first specifies the row (or col for vertical) of the break, 
            the second specifies the starting column (or row for vertical), and the third specifies the ending column (or row for vertical)
            for the break. All row and column numbers are 1-based, and the breaks occur after the 
            row or column. This array is sorted by row, and then by starting/ending column. No 
            two page breaks may overlap.
            </summary>
            <remarks>
            The secEnd and secStart memebers are only applicable in BIFF8.
            BIFF documentation refers to this as a brk structure.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.PageBreaks.PageBreak.pri">
            <summary>
            Specifies the *1 based* row (horizontal page break) or column (vertical page break) that the break appears after.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.PageBreaks.PageBreak.secStart">
            <summary>
            Specifies the *1 based* starting row (horizontal page break) or starting column (vertical page break) of the page break.
            </summary>
            <remarks>*Only applies to BIFF8.</remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.PageBreaks.PageBreak.secEnd">
            <summary>
            Specifies the *1 based* ending row (horizontal page break) or ending column (vertical page break) of the page break.
            </summary>
            <remarks>*Only applies to BIFF8.</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.PageBreaks.PageBreak.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Creates the pagebreak with the specified information.
            </summary>
            <param name="pri">See PageBreak.Pri property.</param>
            <param name="secStart">See PageBreak.secStart property.</param>
            <param name="secEnd">See PageBreak.secEnd property.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.PageBreaks.PageBreak.System#IComparable#CompareTo(System.Object)">
            <summary>
            Sorts by row (or column for vertical break), and then by starting/ending column (or row for vertical break).
            </summary>
            <param name="obj"></param>
            <returns>
            Less than zero: This instance is less than obj. 
            Zero: This instance is equal to obj. 
            Greater than zero: This instance is greater than obj. 
            </returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Printing.MarginRecord">
            <summary>
            Represents one of the followign BIFF margin records: LeftMargin, RightMargin, TopMargin, or BottomMargin.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.MarginRecord.recordID">
            <summary>
            Private storage for the RecordID property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.MarginRecord.value">
            <summary>
            Private storage for the value property.  Stored as an 8-byte IEEE floating point number (in inches).
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Printing.MarginRecord.#ctor(GrapeCity.SpreadBuilder.BiffRecordID)">
            <summary>
            Initializes an instance of the LeftMarginRecord class.
            </summary>
            <param name="marginRecordID">Must be either BiffRecordID.LeftMargin, BiffRecordID.RightMargin, BiffRecordID.TopMargin, or BiffRecordID.BottomMargin.  Otherwise an ArgumentException will be thrown.</param>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.MarginRecord.RecordID">
            <summary>
            Sets or returns this record's BIFF record ID.  
            Must be either BiffRecordID.LeftMargin, BiffRecordID.RightMargin, BiffRecordID.TopMargin, or BiffRecordID.BottomMargin.  Otherwise an ArgumentException will be thrown.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.MarginRecord.Value">
            <summary>
            The width or height of the left margin in inches.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Printing.PageSetup">
            <summary>
            Represents page setup information for a worksheet such as a margins, paper size, etc...
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.MaxMarginValue">
            <summary>
            The margin's value MUST be greater than or equal to 0 and less than 49.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.leftMargin">
            <summary>
            Private storage for the Left property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.LeftMarginDefaultValue">
            <summary>
            Default value for the left property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.rightMargin">
            <summary>
            Private storage for the RightMargin property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.RightMarginDefaultValue">
            <summary>
            Default value for the RightMargin property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.topMargin">
            <summary>
            Private storage for the TopMargin property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.TopMarginDefaultValue">
            <summary>
            Default value for the TopMargin property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.bottomMargin">
            <summary>
            Private storage for the BottomMargin property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.BottomMarginDefaultValue">
            <summary>
            Default value for the BottomMargin property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.blackAndWhite">
            <summary>
            Private storage for the BlackAndWhite property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.BlackAndWhiteDefaultValue">
            <summary>
            Default for BlackAndWhite property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.draft">
            <summary>
            Private storage for the Draft property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.DraftDefaultValue">
            <summary>
            Default value for Draft property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.firstPageNumber">
            <summary>
            Private storage for FirstPageNumber property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.FirstPageNumberAuto">
            <summary>
            Use this value with PageSetup.FirstPageNumber to specify that the first page number used should be determined automatically.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.FirstPageNumberDefaultValue">
            <summary>
            Default value for FirstPageNumber property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.fitToPagesTall">
            <summary>
            Private storage for the FitToPagesTall property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.FitToPagesTallDefaultValue">
            <summary>
            Default value for FitToPagesTall property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.fitToPagesWide">
            <summary>
            Private storage for the FitToPagesWide property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.FitToPagesWideDefaultValue">
            <summary>
            Default value for the FitToPagesWide property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.footerMargin">
            <summary>
            Private storage for FooterMargin property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.FooterMarginDefaultValue">
            <summary>
            Default value for the FooterMargin property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.headerMargin">
            <summary>
            Private storage for the HeaderMargin property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.HeaderMarginDefaultValue">
            <summary>
            Default value for the HeaderMargin property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.order">
            <summary>
            Private storage for the Order property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.OrderDefaultValue">
            <summary>
            Default value for the Order property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.orientation">
            <summary>
            Private storage for Orientation property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.OrientationDefaultValue">
            <summary>
            Default value for the Orientation property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.paperSize">
            <summary>
            Private storage for the PaperSize property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.PaperSizeDefaultValue">
            <summary>
            Default value for PaperSize property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.printNotes">
            <summary>
            Private storage for the PrintNotes property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.PrintNotesDefaultValue">
            <summary>
            Default value for PrintNotes property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.zoom">
            <summary>
            Private storage for the Zoom property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.zoomDefaultValue">
            <summary>
            Default value for the Zoom property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PageSetup.fitToPage">
            <summary>
            Private flag used by the sheet to determine if FitToPagesWide/FitToPagesTall or Zoom was last set.  
            This is used by the Sheet's WSBOOL record to determine which option (scale/zoom or fit to page) should be the selected option.
            See the Zoom and FitToPagesWide and FitToPagesTall properties for usage.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Printing.PageSetup.#ctor">
            <summary>
            Initializes an instance of the PageSetup class.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.LeftMargin">
            <summary>
            Sets or returns the left margin value in points.
            </summary>
            <remarks>
            The value MUST be greater than or equal to 0 and less than 3528.
            </remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.RightMargin">
            <summary>
            Sets or returns the right margin value in points.
            </summary>
            <remarks>
            The value MUST be greater than or equal to 0 and less than 3528.
            </remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.TopMargin">
            <summary>
            Sets or returns the top margin value in points.
            </summary>
            <remarks>
            The value MUST be greater than or equal to 0 and less than 3528.
            </remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.BottomMargin">
            <summary>
            Sets or returns the bottom margin value in points.
            </summary>
            <remarks>
            The value MUST be greater than or equal to 0 and less than 3528.
            </remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.BlackAndWhite">
            <summary>
            True if elements of the document will be printed in black and white. Read/write Boolean.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.Draft">
            <summary>
            True if the sheet will be printed without graphics.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.FirstPageNumber">
            <summary>
            Returns or sets the first page number that will be used when this sheet is printed.
            If PageSetup.FirstPageNumberAuto is the value (default) then the first page number will be chosen automatically.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.FitToPagesTall">
            <summary>
            Returns or sets the number of pages tall the worksheet will be scaled to when it's printed.
            </summary>
            <remarks>If the Zoom property is True, the FitToPagesTall property is ignored.</remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.FitToPagesWide">
            <summary>
            Returns or sets the number of pages wide the worksheet will be scaled to when it's printed.
            If the Zoom property is True, the FitToPagesWide property is ignored.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.FitToPage">
            <summary>
            Returns whether the FitToPage option should be selected.
            </summary>
            <remarks>
            If FitToPagesWide or FitToPagesTall was set since the last Zoom this property will return true, to indicate the FitToPage option in the Page Setup dialog should be selected.
            If Zoom was set since FitToPagesWide or FitToPagesTall (or none of these properties were set at all) this property returns false indicating the zoom/percentage scaling option should be selected.
            </remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.FooterMargin">
            <summary>
            Returns or sets the distance from the bottom of the page to the footer, in points.
            </summary>
            <remarks>
            The value MUST be greater than or equal to 0 and less than 3528.
            </remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.HeaderMargin">
            <summary>
            Returns or sets the distance from the top of the page to the header, in points.
            </summary>
            <remarks>
            The value MUST be greater than or equal to 0 and less than 3528.
            </remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.Order">
            <summary>
            Returns or sets the order used to number pages when printing a large worksheet.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.Orientation">
            <summary>
            Sets or returns whether pages are printed in landscape or portrait.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.PaperSize">
            <summary>
            Sets or returns the size of the paper to be printed on.
            </summary>
            <remarks>Custom paper size is not fully implemented at this time.</remarks>
            <devDocs>To fully implement Custom Paper size we need to write the PLS record which is basically a dump of a DEVMODE record. But karl had to comment it out in c++ because it crashed the excel viewer.  So that will take some additional research.</devDocs>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.PrintNotes">
            <summary>
            True if cell notes are printed as end notes with the sheet.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Printing.PageSetup.Zoom">
            <summary>
            Gets or sets the zoom level.
            </summary>
            <value>The zoom level.</value>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Printing.PageSetup.CheckMargin(System.String,System.Double)">
            <summary>
            Check whether the value margin property is valid or not.
            </summary>
            <param name="propName">the name of margin property</param>
            <param name="value">the value which need be checked</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Printing.PageSetup.AreMarginsDirty">
            <summary>
            Returns true if any of the margin values differ from their default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Printing.PageSetup.IsSetupRecordDirty">
            <summary>
            Returns true if one of the SETUP record properties has been set, regardless of their current value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Printing.PagePrintOrder">
            <summary>
            Used with the PageSetup.Order property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PagePrintOrder.DownThenOver">
            <summary>
            Down then over
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PagePrintOrder.OverThenDown">
            <summary>
            Oover then down
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Printing.PagePrintOrientation">
            <summary>
            Used with PageSetup.Orientation.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PagePrintOrientation.Portrait">
            <summary>
            Portrait. When the item is serialized out as xml, its value is "portrait".
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Printing.PagePrintOrientation.Landscape">
            <summary>
            Landscape. When the item is serialized out as xml, its value is "landscape".
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.BiffExport">
            <summary>
            Export spreadsheet to xls file whose format is Biff.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.Init(GrapeCity.SpreadBuilder.Workbook)">
            <summary>
            Initial the fields.
            </summary>
            <param name="workbook">The SpreadBuilder Workbook.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.Export(GrapeCity.SpreadBuilder.Workbook,System.String)">
            <summary>
            Export excel to a file.
            </summary>
            <param name="workbook">The workbook of spreadsheet.</param>
            <param name="path">The export file path.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.Export(GrapeCity.SpreadBuilder.Workbook,System.IO.Stream)">
            <summary>
            Export excel to a stream.
            </summary>
            <param name="workbook">The workbook of spreadsheet.</param>
            <param name="outputStream">The output stream</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportCore(GrapeCity.CompoundDocument.IStorage)">
            <summary>
            Export to IStorage.
            </summary>
            <param name="stg">An object who has IStorage interface.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportCore2(System.IO.BinaryWriter)">
            <summary>
            Export to BinaryWriter.
            </summary>
            <param name="binWriter">The binWriter.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportBOF(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.BofTypes,GrapeCity.SpreadBuilder.FileFormat)">
            <summary>
            Writes the specified type of BOF record to the specified BinaryWriter.
            </summary>
            <param name="binWriter">The binWriter</param>
            <param name="bofType">BofTypes</param>
            <param name="fileVersion">The file version</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportEOF(System.IO.BinaryWriter)">
            <summary>
             Writes the BIFF EOF record.
            </summary>
            <param name="binWriter">
            The BinaryWriter to use to write the data.
            </param>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffExport.Excel_Hyperlink_Magic">
            <summary>
            When hyperlinks are written out (in DDSheet, and in metafiles), these "magic bytes" are written just before the hyperlink string.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffExport.HYPERLINK_DATALEN">
            <summary>
            This constant is the length of the excel_hyperlink_magic byte array.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffExport.excel_hyperlink_serialGUID">
            <summary>
            This is optional, refer to http://msdn.microsoft.com/en-us/library/dd906718,
            but if the hyperlink miss this record, binary file complies by office 2010 will fail.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffExport.excel_hyperlink_serialVersion">
            <summary>
            This is optional, refer to http://msdn.microsoft.com/en-us/library/dd906718
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffExport.excel_hyperlink_uriFlags">
            <summary>
            This is optional, refer to http://msdn.microsoft.com/en-us/library/dd906718
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportWorkBookGlobals(System.IO.BinaryWriter,System.Byte[]@)">
            <summary>
            Writes  out the data that applies to the workbook as a whole.
            </summary>
            <param name="binWriter">The BinaryWriter to use to write the data to.</param>
            <param name="salt">Output the salt of password</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportPassword(System.IO.BinaryWriter,System.String)">
            <summary>
            Export Password record.
            </summary>
            <param name="binWriter"></param>
            <param name="p">the password string</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportBOUNDSHEET(System.IO.BinaryWriter)">
            <summary>
            Writes the BIFF BOUNDSHEET record for each sheet.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportWINDOW1(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.DDSheets)">
            <summary>
            Writes the BIFF WINDOW1.
            </summary>
            <param name="binWriter">
            The BinaryWriter to use to write the record data.
            </param>
            <param name="sheets">DDSheets</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportPROTECT(System.IO.BinaryWriter,System.Boolean)">
            <summary>
            Writes the BIFF PROTECT 
            </summary>
            <param name="binWriter">The BinaryWriter to use to write the record data.</param>
            <param name="protectWorkBookStructure">A bool value indicate if protect Workbook</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportWINDOWPROTECT(System.IO.BinaryWriter,System.Boolean)">
            <summary>
            Writes the BIFF WINDOWPROTECT record uses the ProtectWorkbookWindows property to determine record value.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="protectWorkbookWindows">A bool value indicate if protect Workbook window</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportTABID(System.IO.BinaryWriter,System.Int32)">
            <summary>
            Writes the BIFF TABID record out if Biff version > 7 and there is more than one sheet.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="sheetsCount">The sheets count.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportDSF(System.IO.BinaryWriter,System.Boolean)">
            <summary>
            Writes out the BIFF DSF record.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="binWriter">If true a BIFF DSF record will be written. If false the record will not be written.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportCODEPAGE(System.IO.BinaryWriter)">
            <summary>
            Writes out the BIFF CODEPAGE record.
            </summary>
            <param name="binWriter">
            The binary writer to write to.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportFileSharing(System.IO.BinaryWriter,System.String,System.Boolean,System.String)">
            <summary>
            Export FileSharing record.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="writePassword">A string indicates Workbook's WritePassword property.</param>
            <param name="readOnlyRecommended">A bool value indicates Workbook's ReadOnlyRecommended property.</param>
            <param name="protectedBy">A string indicates who protects this workbook.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportWRITEACCESS(System.IO.BinaryWriter,System.String)">
            <summary>
            Writes the BIFF Workbook Global WRITEACCESS record.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="author">A string indicates the Workbook's Author.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportFilePass(System.IO.BinaryWriter,System.String,System.Byte[]@)">
            <summary>
            Export FilePass record.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="password">A string indicates Workbook's Password property.</param>
            <param name="salt">Output a byte array indicates the salt of password.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportSst(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Cells.SharedStrings)">
            <summary>
            Handles the writing of the SST record.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="sharedStrings"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExporteExtSst(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Cells.SharedStrings,System.Int64)">
            <summary>
            Writes the EXTSST record.
            </summary>
            <param name="binWriter">The BinaryWriter to write the data to.</param>
            <param name="sstStreamPosition">The stream position of SST record.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportSharedStrings(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Cells.SharedStrings)">
            <summary>
            Writes the BIFF SST and EXTSST records to the specified BinaryWriter.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="sharedStrings">A SharedStrings in SpreadBuilder Workbook.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportExcelBuiltInStyles(System.IO.BinaryWriter,System.Collections.IEnumerable)">
            <summary>
            Writes out all the BiffStyle objects as BIFF STYLE (293h) records to the specified BinaryWriter.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="ExcelBuiltInStyles">Collection of workbook global style.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportXFRecord8(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Style.XFRecord8)">
            <summary>
            Writes out this object's data acording to the BIFF XF record format.
            </summary>
            <param name="binWriter">The BinaryWriter who's write method will be used to write out the data.</param>
            <param name="xf">The xf record which need be exported.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportXFRecords(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Style.XFRecords)">
            <summary>
            Writes all the contained XF records to BIFF format.
            </summary>
            <param name="binWriter">
            The binary writer that should be used to write out the BIFF data.
            </param>
            <param name="cellXfs">
            The XFRecords which need be exported.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportNumberFormats(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Style.NumberFormats)">
            <summary>
            Enumerates each of the number format strings in this collection and writes them out as 
            BIFF FORMAT records.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="formats">The NumberFormats which need be exported.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportBiffFont(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Style.BiffFont)">
            <summary>
            Export one font.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="bf">The BiffFont which need be exported.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportFont(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Style.ExcelFont)">
            <summary>
            First converts ExcelFont to BiffFont. Then calls ExportBiffFont.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="iaColorMappings">The ExcelFont which need be exported.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportFonts(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Style.ExcelFonts)">
            <summary>
            Enumerates all ExcelFont objects and calls ExportFont.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="fonts">The ExcelFonts which need be exported.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportPALETTE(System.IO.BinaryWriter,System.Collections.Generic.IList{GrapeCity.SpreadBuilder.Style.COLORREF})">
            <summary>
            Writes the BIFF PALETTE record if there are colors in the m_paletteColors (custom colors).
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="paletteColors">The palette colors which need be exported.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportWorksheets(System.IO.BinaryWriter)">
            <summary>
            Export all sheets in workbook.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportWorksheet(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.DDSheet)">
            <summary>
            Writes this sheet's data (from BOF to EOF) to the specified BinaryWriter.
            </summary>
            <param name="biffWriter">The binary writer that should be used to write out the data.</param>
            <param name="sheet">The sheet which need be exported.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportMergeAreasRecord(System.IO.BinaryWriter,System.Collections.Generic.IList{GrapeCity.SpreadBuilder.Cells.MergeArea})">
            <summary>
            Export the MergedAreas record to the specified BinaryWriter according to the BIFF format.
            </summary>
            <param name="biffWriter">The BinaryWriter to write the data to.</param>
            <param name="areas">The MergeAreasRecord which need be exported.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportMergeArea(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Cells.MergeArea)">
            <summary>
            Export MergeArea record to the specified binary writer according to BIFF format.
            </summary>
            <param name="writer">The BinaryWriter to write this record's data to.</param>
            <param name="ms">The MergeArea which need be exported.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportHyperlinkRecords(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.DDSheet)">
            <summary>
            Export hyperlinks when the version is Biff8.
            </summary>
            <param name="binWriter">The BinaryWriter to write this record's data to.</param>
            <param name="sheet">The sheet which contains the hyperlinks which need be exported.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.GetDimensions(GrapeCity.SpreadBuilder.DDDimensions)">
            <summary>
            Get BiffDimensions8 which convert from DDDimensions.
            </summary>
            <param name="dimensions">The DDDimensions.</param>
            <returns>Struct BiffDimensions8.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportSheetData(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.DDSheet)">
            <summary>
            Writes the data portion of a sheet.  Called from the ExportSheet method to primarily write out the following BIFF records: ROW, DBCELL, and the various "cell records".
            </summary>
            <param name="binWriter">The binary writer to write the data to.</param>
            <param name="sheet">The sheet which contained the sheet data.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportRow(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.BiffRow)">
            <summary>
            Export a row.
            </summary>
            <param name="binWriter">The binary writer to write the data to.</param>
            <param name="pRow">The BiffRow which need be exported.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportDBCell(System.IO.BinaryWriter,System.Collections.Generic.ICollection{System.UInt32},System.UInt16[],System.Int32)">
            <summary>
            Export a BIFF DBCELL record with the specified information.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="indexPatch">
            WriteDBCELL will add the position of this DBCELL record tothe indexPatch arraylist.  
            This is needed because the INDEX record contains an array of offsets to each DBCELL record.
            </param>
            <param name="rowStreamOffsets"></param>
            <param name="iRowCountInThisBlock"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportCells(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.BiffCellTable,System.Int32)">
            <summary>
            Exported the cells in a row.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="cells">A BiffCellTable instance which need be exported.</param>
            <param name="rowIndex">An int indicates the index of the row which contains the cells.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportCell(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Cells.CellBase,System.Int32)">
            <summary>
            Must be implemented by a derived class.  Uses the specified BinaryWriter to write out the cell's BIFF record begining with teh the record code (or record ID), and including the entire record's data.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="cell">A CellBase instance which need be exported.</param>
            <param name="rowIndex">An int indicates the index of the row which contains the cell.</param>
            <returns>
            Record DATA Length (lenght of data only, not including 2 byte rec code, and 2 byte reclen) in Bytes.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportCellLabel(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Cells.CellLabel,System.Int32)">
            <summary>
            Export a BIFF LABEL record (204h) containg the data represented by this object.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="cellLabel">A CellLabel instance which need be exported.</param>
            <param name="rowIndex">An int indicates the index of the row which contains the label cell.</param>
            <returns>
            Record DATA LENGTH (value will not include the 2byte rec code, and 2 byte recsize in bytes.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportCellNumber(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Cells.CellNumber,System.Int32)">
            <summary>
            Writes the NUMBER cell value record.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="cellNumber">A CellNumber instance which need be exported.</param>
            <param name="rowIndex">An int indicates the index of the row which contains the number cell.</param>
            <returns>Record *data* size in bytes.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportCellError(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Cells.CellError,System.Int32)">
            <summary>
            Writes the error cell value record.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="cellError">A CellError instance which need be exported.</param>
            <param name="rowIndex">An int indicates the index of the row which contains the error cell.</param>
            <returns>Record *data* size in bytes.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportCellBool(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Cells.CellBool,System.Int32)">
            <summary>
            Writes the bool cell value record.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="cellBool">A CellBool instance which need be exported.</param>
            <param name="rowIndex">An int indicates the index of the row which contains the bool cell.</param>
            <returns>Record *data* size in bytes.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportCellBlank(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Cells.CellBlank,System.Int32)">
            <summary>
            Writes the data contained by this object in  BIFF BLANK (201h) record format.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="cellBlank">A CellBlank instance which need be exported.</param>
            <param name="rowIndex">An int indicates the index of the row which contains the blank cell.</param>
            <returns>
            The record *DATA* size in bytes.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportDimensions(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.BiffDimensions8)">
            <summary>
            Writes a Biff Dimensions.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="dim">The BiffDimensions8 which need be exported.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportColInfos(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.BiffColInfos)">
            <summary>
            Writes out a BIFF COLINFO record for each BiffColInfo contained by this sheet.
            The BiffColInfos (BiffColInfo's collection) is compacted first with it's Compact method.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="colInfos">The BiffColInfos which need be exported.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportColInfo(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.BiffColInfo)">
            <summary>
            Writes this BiffColInfo's data to  BIFF COLINFO record using the specified BinaryWriter.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="oColInfo">The BiffColInfo which need be exported.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportPageSetup(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Printing.PageSetup)">
            <summary>
            Writes the LEFTMARGIN, RIHGTMARGIN, TOPMARGIN, BOTTOMMARGIN records and the SETUP record.
            All the margin records are only written if their value differs from the default.
            The SETUP record is only written if one of the SETUP properties (any property on this class except the margins) were set (regardless of their current value).
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="pageSetup">The PageSetup which need be exported. </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportMarginRecord(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Printing.MarginRecord)">
            <summary>
            Serializes this record to the specified BinaryWriter according to the BIFF format.
            </summary>
            <param name="binWriter">The BinaryWriter to serialize this record to.</param>
            <param name="mr">The MarginRecord which need be exported.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportWsBool(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.DDSheet)">
            <summary>
            Writes the WSBOOL record.  Mostly default values, but fitToPage option flag for Page Setup dialog is written here.
            </summary>
            <param name="biffWriter">The BinaryWriter to serialize this record to.</param>
            <param name="sheet">The sheet which contains fitToPage value.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportPageBreaks(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.PageBreaks,GrapeCity.SpreadBuilder.BiffRecordID)">
            <summary>
            Writes out the "HORIZONTALPAGEBREAKS" or "VERTICALPAGEBREAKS" record if ncessary.  
            If there are no page breaks then the record is not written.
            </summary>
            <param name="binWriter">
            The BinaryWriter to write data to.
            </param>
            <param name="pageBreaks">
            The PageBreaks which need be exported.
            </param>
            <param name="recHorizontalOrVertical">
            Specify either BiffRecordID.VERTICALPAGEBREAKS or BiffRecordID.HORIZONTALPAGEBREAKS.  Any other record type will cause an ArgumentException to be thrown.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportINDEX(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.DDSheet)">
            <summary>
            Writes the BIFF INDEX record.
            </summary>
            <param name="binWriter">
            The BinaryWriter to write to.
            </param>
            <param name="sheet">The DDSheet.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportMSODRAWINGGROUP(System.IO.BinaryWriter)">
            <summary>
            Writes the MSODRAWINGGROUP record.  This record should appear in the workbook globals.
            </summary>
            <param name="binWriter">
            The BinaryWriter to write to.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportMSODRAWING(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.DDSheet,System.Int32)">
            <summary>
            Writes an MSODRAWING record for this sheet to the specified BinaryWriter.
            </summary>
            <param name="binWriter">
            The BinaryWriter to write to.
            </param>
            <param name="sheet">The sheet which contains the images and lines.</param>
            <param name="cnt">The index of image and line array.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportMSODRAWINGMasterHeader(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.DDSheet)">
            <summary>
            Writes MSODRAWING record (a.k.a. "Drawing Container msofbtDgContainer" in the "MS Office Drawing File Format" Docs).  
            </summary>
            <param name="binWriter">
            The BinaryWriter to write to.
            </param>
            <param name="sheet">The sheet which contains the images and lines.</param>
            <remarks>
            The only way I've ever been able to figure this out is to use BIFF utilities to read teh records, and compare our ouptut to it.  
            Then use the "Microsoft Office 97 Drawing File Format" documentation contained in the "July 1999 MSDN Library" to understand what the heck excel wrote out.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportImageObj(System.IO.BinaryWriter,System.UInt16)">
            <summary>
            Write the image obj record.(BIFF8)
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="objid">The BiffRecordID.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportLineObj(System.IO.BinaryWriter,System.UInt16)">
            <summary>
            Write the line obj record.(BIFF8)
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="objid">The BiffRecordID.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportLines(System.IO.BinaryWriter,System.Collections.Generic.IList{GrapeCity.SpreadBuilder.Imaging.OBJ_line},GrapeCity.SpreadBuilder.DDSheet)">
            <summary>
            Writes the OBJ_line objects on this sheet to the specified BinaryWriter with the OBJ_line.write_to_stream method.
            </summary>
            <param name="binWriter">The BinaryWriter to write the data to.</param>
            <param name="lines">The lines array.</param>
            <param name="lines">The sheet which contains lines.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportImagesForBiff7(System.IO.BinaryWriter,System.Collections.Generic.IList{GrapeCity.SpreadBuilder.Imaging.OBJImage})">
            <summary>
            Writes the OBJ_meta objects on this sheet to the specified BinaryWriter with the OBJ_meta.write_to_stream method.
            </summary>
            <param name="binWriter">The BinaryWriter to write the data to.</param>
            <param name="imagesList">The image list.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportFtEnd(System.IO.BinaryWriter)">
            <summary>
            Write ftEnd subRecord of obj record.
            </summary>
            <param name="binWriter">The BinaryWriter to write the data to.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportFtCF(System.IO.BinaryWriter)">
            <summary>
            Write ftCF subRecord of obj record. (image only)
            </summary>
            <param name="binWriter">The BinaryWriter to write the data to.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportFtPioGrbit(System.IO.BinaryWriter)">
            <summary>
            Write ftPioGrbit subRecord of obj record. (image only)
            </summary>
            <param name="binWriter">The BinaryWriter to write the data to.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportFtCmo(System.IO.BinaryWriter,System.UInt16,System.UInt16)">
            <summary>
            Write ftCmo subRecord of obj record.
            </summary>
            <param name="binWriter">The BinaryWriter to write the data to.</param>
            <param name="objType">obj type id</param>
            <param name="objid">obj id</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportFBSE(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Imaging.FBSE)">
            <summary>
            Writes this structure's 36 byte's of data to the specified BinaryWriter.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportFDGGcustom(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Imaging.FDGGcustom)">
            <summary>
            Writes this structs data to the specified BinaryWriter.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportFPSPLcustom(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Imaging.FPSPLcustom)">
            <summary>
            Writes out this strcutures 32 bits of data.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportFOPTE(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Imaging.FOPTE)">
            <summary>
            Stuffs the values of the members of FOPTE into the bits of a ushort, and a uint and 
            writes out the data.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportFSP(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Imaging.FSP)">
            <summary>
            Writes this struct's data to the specified BinaryWriter.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportGridratio(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Imaging.gridratio)">
            <summary>
            Writes this structure's data to the specified BinaryWriter.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportMSOFBH(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Imaging.MSOFBH)">
            <summary>
            Stuffs the members of MSOFBH (8 bytes) into two uint's and writes out the data.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportMSOMetaHeader(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Imaging.MSOMetaHeader)">
            <summary>
            Writes this struct's 50 bytes of data to the specified binary writer.
            </summary>
            <param name="binWriter">
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportMSOPNGHeader(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Imaging.MSOPNGHeader)">
            <summary>
            Writes this structs 17 bytes to the specified BinaryWriter.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportOBJhead(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Imaging.OBJhead)">
            <summary>
            Writes the Offset 4 (cObj) to offset 32 of the OBJ record.  
            This is the common OBJ record data, regardless what the OBJ record represents this HEAD data is always present.
            
            </summary>
            <param name="binWriter">
            The BinaryWriter to write the data to.
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportOBJ_grbit(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Imaging.OBJ_grbit)">
            <summary>
            Writes this structures 2 bytes of data to the specified binaryWriter.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportOBJ_line(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Imaging.OBJ_line,System.UInt32)">
            <summary>
            This override simply calls the other write_to_stream function with objectID set to objectNumber.
            </summary>
            <param name="biffVer">
            Inidcates the version of BIFF this output should be compatable with.
            </param>
            <param name="binWriter">
            The BinaryWriter to use to write out the data.
            </param>
            <param name="objectNumber">
            
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.MakeMsofbtOPT(GrapeCity.SpreadBuilder.Imaging.OBJImage,System.UInt32)">
            <summary>
            Creates a msofbtOPT property table array containing the image data for BIFF8 
            "MS Office 97 Drawing Format"/"Escher".  
            You can access the property table (which is actually a byte array of output data) by calling get_msofbtOPT.
            </summary>
            <param name="cnt">
            This indicates "the blip to display" by an ID/index into a global list of shapes or images.  
            This will be the value of the MSO Drawing Shape Property "pib" (260dec), 
            described as "blib to display".
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.MakeMsofbtOPT(GrapeCity.SpreadBuilder.Imaging.OBJ_line)">
            <summary>
            msofbtOPT creates a "Property Table Record" as a byte array that is accessable by 
            calling get_msofbtOPT().  This creates BIFF8 style Escher data, although the OBJ_line.WriteToBiff(..) creates BIFF 5 &amp; 7 style data.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportOBJlinetail(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Imaging.OBJlinetail)">
            <summary>
            Writes out this structs BIFF5 &amp; BIFF7 8 bytes of formatted data.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportOBJImage(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Imaging.OBJImage,System.UInt32,System.UInt16)">
            <summary>
            Writes out image for BIFF7, with OBJ, IMDATA and CONTINUE records.
            The resulting output will be BMP/DIB or WMF.
            You can make objectID the same as objectNumber if you don't know what else to do, thats what CPP code did.
            </summary>
            <param name="biffVer"></param>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
            <param name="objectNumber"></param>
            <param name="objectID"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.BiffExport.ExportOBJmetafiletail(System.IO.BinaryWriter,GrapeCity.SpreadBuilder.Imaging.OBJmetafiletail)">
            <summary>
            Writes out the "Picture Object Fields" portion of the OBJ record.  This should come after the common object data of the OBJ record.
            </summary>
            <param name="binWriter">The binary writer that should be used to write out the data.</param>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.BofTypes">
            <summary>
            Different types of BIFF BOF records.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.BiffRecordID">
            <summary>
            Enum containing all BIFF Record Identifiers (a.k.a. record numbers, Codes, OpCodes, Identifiers, whatever you want to call them).
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.EncryptedOpenXmlTools">
            <summary>
            The tool class for encrypting OpenXml format and exporting it. Can find the spec in [MS-OFFCRYPTO].
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptedOpenXmlTools.Export(System.IO.Stream,System.String,System.String)">
            <summary>
            Export the inputStream with encryption to a file.
            </summary>
            <param name="inputStream">An input stream which is a OpenXml format document.</param>
            <param name="path">The output file path.</param>
            <param name="password">The password</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptedOpenXmlTools.Export(System.IO.Stream,System.IO.Stream,System.String)">
            <summary>
            Export the inputStream with encryption to an outputstream.
            </summary>
            <param name="inputStream">An input stream which is a OpenXml format document.</param>
            <param name="outputStream">The output stream.</param>
            <param name="password">The password</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptedOpenXmlTools.ExportCore(System.IO.Stream,GrapeCity.CompoundDocument.IStorage,System.String)">
            <summary>
            Export the inputStream with encryption to an IStorage.
            </summary>
            <param name="inputStream">An input stream which is a OpenXml format document.</param>
            <param name="stg">IStorage instance.</param>
            <param name="password">The password</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptedOpenXmlTools.CreateDataSpaces(GrapeCity.CompoundDocument.IStorage)">
            <summary>
            Create DataSpaces IStorage.
            </summary>
            <param name="stg">The parent IStorage.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptedOpenXmlTools.CreateVersion(GrapeCity.CompoundDocument.IStorage)">
            <summary>
            Create Version IStream.
            </summary>
            <param name="stg">The parent IStorage.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptedOpenXmlTools.CreateTransformInfo(GrapeCity.CompoundDocument.IStorage)">
            <summary>
            Create TransformInfo IStorage.
            </summary>
            <param name="stg">The parent IStorage.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptedOpenXmlTools.CreateStrongEncryptionTransform(GrapeCity.CompoundDocument.IStorage)">
            <summary>
            Create StrongEncryptionTransform IStorage.
            </summary>
            <param name="stg">The parent IStorage.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptedOpenXmlTools.CreatePrimary(GrapeCity.CompoundDocument.IStorage)">
            <summary>
            Create Primary IStream.
            </summary>
            <param name="stg">The parent IStorage.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptedOpenXmlTools.CreateDataSpaceInfo(GrapeCity.CompoundDocument.IStorage)">
            <summary>
            Create DataSpaceInfo IStorage.
            </summary>
            <param name="stg">The parent IStorage.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptedOpenXmlTools.CreateStrongEncryptionDataSpace(GrapeCity.CompoundDocument.IStorage)">
            <summary>
            Create StrongEncryptionDataSpace IStream.
            </summary>
            <param name="stg">The parent IStorage.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptedOpenXmlTools.CreateDataSpaceMap(GrapeCity.CompoundDocument.IStorage)">
            <summary>
            Create DataSpaceMap IStream.
            </summary>
            <param name="stg">The parent IStorage.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptedOpenXmlTools.CreateUNICODELPP4(System.String,System.IO.BinaryWriter)">
            <summary>
            Make a string convert to UNICODELPP4.
            </summary>
            <param name="p">The string which need be converted.</param>
            <param name="binWriter">The BinaryWriter which trite UNICODELPP4 to.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptedOpenXmlTools.CreateStringData(System.String,System.IO.BinaryWriter)">
            <summary>
            Write the string to BinaryWriter.
            </summary>
            <param name="p">The string.</param>
            <param name="binWriter">The BinaryWriter.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptedOpenXmlTools.CreateEncryptionInfo(GrapeCity.CompoundDocument.IStorage,System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Create EncryptionInfo IStream.
            </summary>
            <param name="stg">The parent IStorage.</param>
            <param name="salt">The salt of the password.</param>
            <param name="pwv">EncryptedVerifier (16 bytes)</param>
            <param name="pwvh">EncryptedVerifierHash (variable)</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.EncryptedOpenXmlTools.CreateEncryptedPackage(GrapeCity.CompoundDocument.IStorage,System.Byte[],System.Int64)">
            <summary>
            Create EncryptionInfo IStream.
            </summary>
            <param name="stg">The parent IStorage.</param>
            <param name="encrypted">The encrypted input stream</param>
            <param name="length">The length of input stream</param>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.IExport">
            <summary>
            The interface for spreadsheet export.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.IExport.Export(GrapeCity.SpreadBuilder.Workbook,System.String)">
            <summary>
            Export excel to a file.
            </summary>
            <param name="workbook">The workbook of spreadsheet.</param>
            <param name="path">The export file path.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.IExport.Export(GrapeCity.SpreadBuilder.Workbook,System.IO.Stream)">
            <summary>
            Export excel to a stream.
            </summary>
            <param name="workbook">The workbook of spreadsheet.</param>
            <param name="outputStream">The output stream</param>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.OpenXmlExport">
            <summary>
            This class make SpreadBuilder Workbook export into OpenXmlSDK's SpreadsheetDocument.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.OpenXmlExport.OpenXmlStandard">
            <summary>
            Gets or sets the level of Open XML document conformance on exporting with Xlsx file format.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.Export(GrapeCity.SpreadBuilder.Workbook,System.String)">
            <summary>
            Export excel to a file.
            </summary>
            <param name="workbook">The workbook of spreadsheet.</param>
            <param name="path">The export file path.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.Export(GrapeCity.SpreadBuilder.Workbook,System.IO.Stream)">
            <summary>
            Export excel to a stream.
            </summary>
            <param name="workbook">The workbook of spreadsheet.</param>
            <param name="outputStream">The output stream</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportToStream(System.IO.Stream)">
            <summary>
            Export excel to a stream.
            </summary>
            <param name="outputStream">The output stream</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportCore(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Export to SpreadsheetDocument.
            </summary>
            <param name="doc">The SpreadsheetDocument instance.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.CreateUri(System.String)">
            <summary>
            Create Uri according to a string.
            </summary>
            <param name="uriStr">The string used to convert.</param>
            <returns>A Uri instance.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.GetColor(System.UInt16)">
            <summary>
            Get color according to Workbook's color list.
            </summary>
            <param name="index">The color index.</param>
            <returns>The Color</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.GetXfIndex(System.Int32)">
            <summary>
            Get the unique Xf record index.
            </summary>
            <param name="originXfIndex">The original Xf record index.</param>
            <returns>The unique Xf record index.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.SetColorRgb(DocumentFormat.OpenXml.Spreadsheet.ColorType,System.UInt16)">
            <summary>
            Set ColorType.Rgb.
            </summary>
            <param name="colorType">The ColorType whose Rgb property need be set.</param>
            <param name="index">The index of the color in Workbook's color list.</param>
            <returns>The ColorType whose Rgb property is set.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.GetReferenceString(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get Reference string according.
            </summary>
            <param name="colIndex1">The first column index.</param>
            <param name="rowIndex1">The first row index.</param>
            <param name="colIndex2">The second column index.</param>
            <param name="rowIndex2">The second row index.</param>
            <returns>The string represents Reference.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.GetCellReferenceString(System.Int32,System.Int32)">
            <summary>
            Get CellReference string according.
            </summary>
            <param name="colIndex">The column index.</param>
            <param name="rowIndex">The row index.</param>
            <returns>The string represents CellReference.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportWorkbook(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Export WorkbookPart of SpreadsheetDocument.
            </summary>
            <param name="doc">The SpreadsheetDocument instance.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportWorkbookProtection(DocumentFormat.OpenXml.Spreadsheet.Workbook,System.Boolean,System.Boolean)">
            <summary>
            Export WorkbookProtection of WorkbookPart.
            </summary>
            <param name="workbookDoc">The WorkbookPart of SpreadsheetDocument</param>
            <param name="lockStructure">A bool indicates whether protect workbook structure.</param>
            <param name="lockWindows">A bool indicates whether lock the workbook window.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportBookViews(DocumentFormat.OpenXml.Spreadsheet.Workbook,System.Collections.Generic.IList{System.Int32})">
            <summary>
            Export BookViews of WorkbookPart.
            </summary>
            <param name="workbookDoc">The WorkbookPart of SpreadsheetDocument</param>
            <param name="selectedIndexes">An IList generics indicates the selected DDSheets' indexes.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportFileSharing(DocumentFormat.OpenXml.Spreadsheet.Workbook,System.Boolean,System.String,System.String)">
            <summary>
            Export FileSharing of WorkbookPart.
            </summary>
            <param name="workbookDoc">The WorkbookPart of SpreadsheetDocument</param>
            <param name="readOnlyRecommended">A bool value indicates readOnlyRecommended.</param>
            <param name="wpw">A string indicates WritePassword.</param>
            <param name="protectedBy">A string indicates the person who protects the spreadsheet.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportStyles(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Export WorkbookStylesPart of SpreadsheetDocument.
            </summary>
            <param name="doc">The SpreadsheetDocument instance.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportNumberingFormats(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,GrapeCity.SpreadBuilder.Style.NumberFormats)">
            <summary>
            Export NumberingFormats of Stylesheet.
            </summary>
            <param name="sse">The Stylesheet of WorkbookStylesPart.</param>
            <param name="numberFormats">The NumberFormats of SpreadBuilder Workbook.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportDefaultCellStyleFormats(DocumentFormat.OpenXml.Spreadsheet.Stylesheet)">
            <summary>
            Export the master formatting records which define the formatting for all named cell styles in this workbook
            </summary>
            <param name="sse">The Stylesheet of WorkbookStylesPart.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportCellFormats(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,GrapeCity.SpreadBuilder.Style.XFRecords)">
            <summary>
            Export the master formatting records which define the formatting applied to cells in this workbook.
            </summary>
            <param name="sse">The Stylesheet of WorkbookStylesPart.</param>
            <param name="cellXfs">The XFRecords instance indicates to cell styles in SpreadBuilder Workbook.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportCellFormat(DocumentFormat.OpenXml.OpenXmlElement,GrapeCity.SpreadBuilder.Style.XFRecord8,System.Boolean)">
            <summary>
            Export the master formatting record.
            </summary>
            <param name="parent">An OpenXmlElement instance indicates parent element.</param>
            <param name="xf">The cell style which need be exported.</param>
            <param name="forCellStyle">A bool value indicate if the parent element is CellStyleFormats.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportFonts(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,GrapeCity.SpreadBuilder.Style.ExcelFonts)">
            <summary>
            Export fonts.
            </summary>
            <param name="sse">The Stylesheet of WorkbookStylesPart.</param>
            <param name="fonts">The fonts of SpreadBuilder Workbook.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportFills(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,GrapeCity.SpreadBuilder.INoRepeatList{GrapeCity.SpreadBuilder.Style.Fill})">
            <summary>
            Export Fills of Stylesheet. The Fills represents the background of cell.
            </summary>
            <param name="sse">The Stylesheet of WorkbookStylesPart.</param>
            <param name="fills">The fills in SpreadBuilder Workbook.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportBorders(DocumentFormat.OpenXml.Spreadsheet.Stylesheet,GrapeCity.SpreadBuilder.INoRepeatList{GrapeCity.SpreadBuilder.Style.CellBorder})">
            <summary>
            Export border styles of cell.
            </summary>
            <param name="sse">The Stylesheet of WorkbookStylesPart.</param>
            <param name="borders">The borders in SpreadBuilder Workbook.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportSharedStrings(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,GrapeCity.SpreadBuilder.Cells.SharedStrings)">
            <summary>
            Export SharedStringTablePart of SpreadsheetDocument.
            </summary>
            <param name="doc">The SpreadsheetDocument instance.</param>
            <param name="sharedStrings">The SharedStrings in SpreadBuilder Wordbook.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportWorksheets(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,GrapeCity.SpreadBuilder.DDSheets)">
            <summary>
            Export the sheets.
            </summary>
            <param name="doc">The SpreadsheetDocument instance.</param>
            <param name="ddsheets">A DDSheets instance indicates the sheets in SpreadBuilder.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportWorksheet(GrapeCity.SpreadBuilder.DDSheet,System.Int32,System.String,DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Export sheet includes WorksheetPart, Worksheet of WorkbookPart and related DrawingsPart.
            </summary>
            <param name="sheet">A DDSheet instance.</param>
            <param name="doc">The SpreadsheetDocument.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportSheetFormatPr(DocumentFormat.OpenXml.OpenXmlWriter)">
            <summary>
            Export sheet formatting properties.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportSheetPr(DocumentFormat.OpenXml.OpenXmlWriter,System.Boolean)">
            <summary>
            Export Sheet-level properties includes page setup properties of the worksheet.
            </summary>
            <param name="fitToPage">A bool value indicate fitToPage of PageSetup.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportSheetViews(DocumentFormat.OpenXml.OpenXmlWriter,System.Boolean,System.Boolean)">
            <summary>
            Export Worksheet views collection.
            </summary>
            <param name="showGridLines">A bool value indicates showGridLines.</param>
            <param name="isSelected">A bool value indicates DDSheet.Selected.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportHyperlinks(DocumentFormat.OpenXml.OpenXmlWriter,DocumentFormat.OpenXml.Packaging.WorksheetPart,GrapeCity.SpreadBuilder.DDSheet)">
            <summary>
            Export Hyperlinks of WorksheetPart.
            </summary>
            <param name="worksheetPart">The WorksheetPart.</param>
            <param name="sheet">A DDSheet instance of SpreadBuilder Workbook.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportPageSetup(DocumentFormat.OpenXml.OpenXmlWriter,GrapeCity.SpreadBuilder.Printing.PageSetup)">
            <summary>
            Export Page setup settings for the worksheet.
            </summary>
            <param name="pageSetup">The PageSetup setting of DDSheet.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportPageMargins(DocumentFormat.OpenXml.OpenXmlWriter,GrapeCity.SpreadBuilder.Printing.PageSetup)">
            <summary>
            Export Page margins for a sheet or a custom sheet view.
            </summary>
            <param name="pageSetup">The PageSetup setting of DDSheet.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportSheetData(DocumentFormat.OpenXml.OpenXmlWriter,GrapeCity.SpreadBuilder.BiffRowTable)">
            <summary>
            Export SheetData element.
            </summary>
            <param name="biffRowTable">The rows in DDSheet.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportColInfos(DocumentFormat.OpenXml.OpenXmlWriter,GrapeCity.SpreadBuilder.BiffColInfos)">
            <summary>
            Export Columns element.
            </summary>
            <param name="biffColInfos">A BiffColInfos instance in DDSheet.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportMergeCells(DocumentFormat.OpenXml.OpenXmlWriter,System.Collections.Generic.IList{GrapeCity.SpreadBuilder.Cells.MergeArea})">
            <summary>
            Export MergeCells element of WorksheetPart.
            </summary>
            <param name="mergeAreasRecord">A MergeAreasRecord instance in DDSheet.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportPageBreaks(DocumentFormat.OpenXml.OpenXmlWriter,GrapeCity.SpreadBuilder.PageBreaks,System.Boolean)">
            <summary>
            Export RowBreaks or ColumnBreaks element of WorksheetPart.
            </summary>
            <param name="pageBreaks">A PageBreaks instance indicates m_pageBreaksHorizontal or m_pageBreaksVertical in DDSheet.</param>
            <param name="isRow">A bool value indicates whether the PageBreaks is for creating RowBreaks or ColumnBreaks.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportCell(DocumentFormat.OpenXml.OpenXmlWriter,GrapeCity.SpreadBuilder.Cells.CellBase,DocumentFormat.OpenXml.Spreadsheet.Cell)">
            <summary>
            Export Cell element.
            </summary>
            <param name="cell">A CellBase instance in SpreadBuilder BiffRow.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportDrawing(DocumentFormat.OpenXml.OpenXmlWriter,DocumentFormat.OpenXml.Packaging.WorksheetPart,System.Int32,GrapeCity.SpreadBuilder.DDSheet)">
            <summary>
            Export DrawingsPart includes adding DrawingsPart, adding Drawing element and adding Image part.
            </summary>
            <param name="worksheetPart"></param>
            <param name="sheetId"></param>
            <param name="sheet"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportLines(DocumentFormat.OpenXml.Drawing.Spreadsheet.WorksheetDrawing,System.Collections.Generic.IList{GrapeCity.SpreadBuilder.Imaging.OBJ_line},GrapeCity.SpreadBuilder.DDSheet)">
            <summary>
            Export lines.
            </summary>
            <param name="wsd">WorksheetDrawing</param>
            <param name="linesList">A list of lines.</param>
            <param name="sheet">DDSheet</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportImages(DocumentFormat.OpenXml.Packaging.DrawingsPart,DocumentFormat.OpenXml.Drawing.Spreadsheet.WorksheetDrawing,System.Collections.Generic.IList{GrapeCity.SpreadBuilder.Imaging.OBJImage},System.Int32,GrapeCity.SpreadBuilder.DDSheet)">
            <summary>
            Export images.
            </summary>
            <param name="drawingsPart">DrawingsPart</param>
            <param name="worksheetDrawing">WorksheetDrawing</param>
            <param name="imagesList">A list of images.</param>
            <param name="sheetId">The sheet's id</param>
            <param name="sheet">DDSheet</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportImageLineStyle(DocumentFormat.OpenXml.Drawing.Spreadsheet.ShapeProperties,GrapeCity.SpreadBuilder.Imaging.OBJImage)">
            <summary>
            Export image's LineStyle.
            </summary>
            <param name="sp">ShapeProperties</param>
            <param name="oImage">OBJImage</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportImageFillStyle(DocumentFormat.OpenXml.Drawing.Spreadsheet.ShapeProperties,GrapeCity.SpreadBuilder.Imaging.OBJImage)">
            <summary>
            Export image's FillStyle.
            </summary>
            <param name="sp">ShapeProperties</param>
            <param name="oImage">OBJImage</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportImageSourceRectangle(DocumentFormat.OpenXml.Drawing.Spreadsheet.BlipFill,GrapeCity.SpreadBuilder.Imaging.OBJImage)">
            <summary>
            Export SourceRectangle.
            </summary>
            <param name="blipFill">BlipFill</param>
            <param name="oImage">OBJImage</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.ExportHyperlinkOnClick(DocumentFormat.OpenXml.Drawing.Spreadsheet.NonVisualDrawingProperties,DocumentFormat.OpenXml.Packaging.DrawingsPart,GrapeCity.SpreadBuilder.Imaging.OBJImage,System.Int32)">
            <summary>
            Export HyperlinkOnClick element of DrawingsPart.
            </summary>
            <param name="nvdp">The NonVisualDrawingProperties instance who is HyperlinkOnClick's parent element.</param>
            <param name="drawingsPart">The DrawingsPart.</param>
            <param name="oImage">An OBJImage instance.</param>
            <param name="cnt">The image's index.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.GetColumnOffset(System.Int32,System.Int32,GrapeCity.SpreadBuilder.DDSheet)">
            <summary>
            ColumnOffset of xls format transform into ColumnOffset of xlsx format and return ColumnOffset string.
            </summary>
            <param name="columnIndex">The column index.</param>
            <param name="xlsColOffset">The ColumnOffset of xls format.</param>
            <param name="sheet">The DDSheet.</param>
            <returns>A string indicates ColumnOffset of xlsx format.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlExport.GetRowOffset(System.Int32,System.Int32,GrapeCity.SpreadBuilder.DDSheet)">
            <summary>
            RowOffset of xls format transform into RowOffset of xlsx format and return RowOffset string.
            </summary>
            <param name="rowIndex">The row index</param>
            <param name="xlsRowOffset">The RowOffset of xls format.</param>
            <param name="sheet">The DDSheet.</param>
            <returns>A string indicates RowOffset of xlsx format.</returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.OpenXmlTransitionalPatcher">
            <summary>
            Patch the document according to the Transitional standard.
            </summary>
            <remarks>
            Refer to case 166868. The OpenXML sdk saves the document in Strict standard. 
            The Google Docs (Google Drive) does not support Strict standard fully.
            So need convert some files in the document according to the Transitional standard.
            It does not convert the document to Transitional standard fully. 
            Just make the necessary conversion to make Google Docs accept the document.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlTransitionalPatcher.CommonFilePatcher.PatchFile(System.IO.Compression.ZipArchive,System.String)">
            <summary>
            Patch one file in the package with the name.
            </summary>
            <param name="zip"></param>
            <param name="name">The file name in the package.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.OpenXmlTransitionalPatcher.CommonFilePatcher.PatchFileCore(System.String,System.IO.Stream)">
            <summary>
            Patch the file in the package with the stream.
            </summary>
            <param name="name"></param>
            <param name="inputStream">The input stream extract from the package.</param>
            <returns>The output stream after patching, used to replace the original one in the package.</returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.OpenXmlTransitionalPatcher.WorkbookFilePatcher">
            <summary>
            Patcher for "xl/workbook.xml".
            </summary>
            <remarks>
            Namespaces should be declared in root node.
            </remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.OpenXmlTransitionalPatcher.ContentTypeFilePatcher">
            <summary>
            Patcher for "[Content_Types].xml".
            </summary>
            <remarks>
            The content type for "/xl/workbook.xml" is missing in "[Content_Types].xml".
            </remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.OpenXmlTransitionalPatcher.RelationshipsFilePatcher">
            <summary>
            Patcher for relationships files ("*.rels").
            </summary>
            <remarks>
            The target path in *.rels is absolute, should change to relative.
            </remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.OpenXmlTransitionalPatchSettings">
            <summary>
            Patch settings.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.OpenXmlTransitionalPatchSettings.PatchRelationships">
            <summary>
            Patch the ".rels" relationships file in the "_rels" folder.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.OpenXmlTransitionalPatchSettings.PatchContentType">
            <summary>
            Patch the "[Content_Types].xml", add missing contents.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.OpenXmlTransitionalPatchSettings.PatchWorkbook">
            <summary>
            Patch the "xl/workbook.xml", move namespace declarations.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.OpenXmlTransitionalPatchSettings.All">
            <summary>
            Gets the OpenXmlPatchSettings object with all settings true.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.StandardEncryption">
            <summary>
            This approach utilizes a binary EncryptionInfo structure, 
            uses Advanced Encryption Standard (AES) as an encryption 
            algorithm, and SHA-1 as a hashing algorithm.
            Can find the spec in [MS-OFFCRYPTO].
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.StandardEncryption.H(System.Byte[],System.Byte[])">
            <summary>
            Perform SHA1Managed hash.
            </summary>
            <param name="b1">The first bytes array.</param>
            <param name="b2">The second bytes array.</param>
            <returns>The hashed bytes array.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.StandardEncryption.GenerateRandomBytes(System.Int32)">
            <summary>
            Get a random bytes.
            </summary>
            <param name="length">The length of the random bytes.</param>
            <returns>The random bytes.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.StandardEncryption.EncryptToBytes(System.IO.Stream,System.String,System.Byte[]@,System.Byte[]@,System.Byte[]@)">
            <summary>
            Encrypt stream to bytes with AES encryption, and output the salt, 
            encrypted verifier and encrypted verifier hash.
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="password">The password.</param>
            <param name="salt">Outputed salt.</param>
            <param name="encryptedVerifier">Outputed encrypted verifier.</param>
            <param name="encryptedVerifierHash">Outputed encrypted verifier hash.</param>
            <returns>Return encrypted bytes.</returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.ZlibExtensions">
            <summary>
            Used to compress/decompress simple zlib stream (without structure). For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.ZlibExtensions.Compress(System.IO.MemoryStream)">
            <summary>
            Compress stream.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.ZlibExtensions.DeCompress(System.IO.MemoryStream)">
            <summary>
            Decompress stream.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ARGUMENTCANNOTBELESSTHANZERO">
            <summary>
              Looks up a localized string similar to Аrgument cannot be less than zero..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ARGUMENTOUTOFRANGECANNOTBENEGATIVE">
            <summary>
              Looks up a localized string similar to The argument cannot be negative..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ARGUMENTOUTSIDEOFBOUNDS">
            <summary>
              Looks up a localized string similar to Argument is outside the bounds of the collection..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.BEGINNINGOFFILENOTSUPPORTED">
            <summary>
              Looks up a localized string similar to The &apos;beginning of file record&apos; does not support the specified ({0}) file version..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.BIFFVERSIONNOTYETIMPL">
            <summary>
              Looks up a localized string similar to Specified BIFF Version not yet implemented..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.BOFTYPENOTSUPPORTED">
            <summary>
              Looks up a localized string similar to Specified BofTypes value &apos;{0}&apos; not supported..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.BORDERBOTTOMSTYLERANGE">
            <summary>
              Looks up a localized string similar to Border style must be between 0 and 13..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.BORDERDIAGONALSTYLERANGE">
            <summary>
              Looks up a localized string similar to Border style must be between 0 and 13..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.BORDERDIAGONALVALUERANGE">
            <summary>
              Looks up a localized string similar to BorderDiagonalStyle must be 0-3..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.BORDERSTYLERANGE">
            <summary>
              Looks up a localized string similar to Border style must be between 0 and 13..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.COLUMNFROM">
            <summary>
              Looks up a localized string similar to Column from.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.COLUMNFROMRANGE">
            <summary>
              Looks up a localized string similar to The columnFrom argument must be less than the columnTo argument..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.COLUMNNOTNEGATIVE">
            <summary>
              Looks up a localized string similar to value must be non-negative..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.COULDNOTCLONEXFRECORD8">
            <summary>
              Looks up a localized string similar to Could not clone the specified XFRecord8 object..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.COULDNOTCREATEFILE">
            <summary>
              Looks up a localized string similar to Could not create file &apos;{0}&apos;.  Please ensure that the folder exists..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.COULDNOTCREATEWORKBOOKSTREAM">
            <summary>
              Looks up a localized string similar to Workbook stream could not be created..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.COULDNOTFINDAFPARENTREC">
            <summary>
              Looks up a localized string similar to Could not find the xfParent indicated by the rec parameter..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORCOMPACTINGPATCHINGXFRECORDS">
            <summary>
              Looks up a localized string similar to Error Compacting &amp; Patching XFRecords..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORCOMPRESSINGMETAFILE">
            <summary>
              Looks up a localized string similar to Error compressing metafile. Return code:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORCONVERTIMAGETOMETAFILE">
            <summary>
              Looks up a localized string similar to Error converting image to specialized metafile..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORCREATINGCOLORTRANSLATIONTABLE">
            <summary>
              Looks up a localized string similar to Error Creating Color Translation Table..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORSERIALIZINGMARGINS">
            <summary>
              Looks up a localized string similar to An error occurred serializing margins..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKFILEPASS">
            <summary>
              Looks up a localized string similar to Error writing Workbook FILEPASS records.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKFILESHARING">
            <summary>
              Looks up a localized string similar to Error writing Workbook FILESHARING records.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKGLOBALBOUNDSHEET">
            <summary>
              Looks up a localized string similar to Error writing WorkbookGlobals BOUNDSHEET records.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKGLOBALEOF">
            <summary>
              Looks up a localized string similar to Error writing WorkbookGlobals EOF record.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKGLOBALFONTRECORDS">
            <summary>
              Looks up a localized string similar to Error writing WorkbookGlobals FONT records.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKGLOBALFORMAT">
            <summary>
              Looks up a localized string similar to Error writing WorkbookGlobals FORMAT records.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKGLOBALPASSWORD">
            <summary>
              Looks up a localized string similar to Error writing WorkbookGlobals Password.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKGLOBALPROTECT">
            <summary>
              Looks up a localized string similar to Error writing WorkbookGlobals PROTECT.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKGLOBALSACCESSRECORD">
            <summary>
              Looks up a localized string similar to Error writing WorkbookGlobals Access record.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKGLOBALSBOF">
            <summary>
              Looks up a localized string similar to Error writing WorkbookGlobals BOF.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKGLOBALSCODEPAGE">
            <summary>
              Looks up a localized string similar to Error writing WorkbookGlobals CodePage.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKGLOBALSDSF">
            <summary>
              Looks up a localized string similar to Error writing WorkbookGlobals DSF.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKGLOBALSTABID">
            <summary>
              Looks up a localized string similar to Error writing WorkbookGlobals TABID.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKGLOBALSTYLE">
            <summary>
              Looks up a localized string similar to Error writing WorkbookGlobals STYLE records.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKGLOBALWINDOW1">
            <summary>
              Looks up a localized string similar to Error writing WorkbookGlobals WINDOW1.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKGLOBALWINDOWPROTECT">
            <summary>
              Looks up a localized string similar to Error writing WorkbookGlobals WindowProtect.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWORKBOOKGLOBALXF">
            <summary>
              Looks up a localized string similar to Error writing WorkbookGlobals XF records.  ExtendedInfo:[{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWRITEACCESS">
            <summary>
              Looks up a localized string similar to Unexpected error while writing WRITEACCESS record..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWRITINGSERUPRECORD">
            <summary>
              Looks up a localized string similar to Error writing SETUP record..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWRITINGSHAREDSTRINGTABLE">
            <summary>
              Looks up a localized string similar to Error writing shared string table..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRORWRITINGWORKBOOKGLOBALS">
            <summary>
              Looks up a localized string similar to Error Writing Workbook Globals. Extended Info:[{0}]..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ERRRORWRITINGSHEETSCOLLECTION">
            <summary>
              Looks up a localized string similar to Error writing Sheets collection: Extended Info Follows: {0}.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.Exception_ColumnCountLimit">
            <summary>
              Looks up a localized string similar to Column count on {0} file format cannot exceed {1}..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.Exception_Default_InvalidPassword">
            <summary>
              Looks up a localized string similar to The password is invalid..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.Exception_Default_WorksheetSizeLimit">
            <summary>
              Looks up a localized string similar to This workbook contains data in cells outside of the row and column limit of selected file format..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.Exception_HorizontalPageBreaksCount">
            <summary>
              Looks up a localized string similar to The count of HorizontalPageBreaks on {0} file format cannot exceed {1}..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.Exception_InvalidMargin">
            <summary>
              Looks up a localized string similar to Value is invalid. The value MUST be greater than or equal to 0 and less than 3528..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.Exception_InvalidSheetName">
            <summary>
              Looks up a localized string similar to Value is invalid. The name of worksheet cannot be empty, cannot exceed 31 characters and cannot contain any of following characters: : \ / ? * [ or ].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.Exception_LessThanAndEqual">
            <summary>
              Looks up a localized string similar to The length of property &apos;{0}&apos; must be less than or equal to {1}..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.Exception_LineColumn">
            <summary>
              Looks up a localized string similar to Line: Value of ColumnLeft property should be less than or equal to the value of ColumnRight property..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.Exception_LineRow">
            <summary>
              Looks up a localized string similar to Line: Value of RowTop property should be less than or equal to value of RowBottom property..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.Exception_NumberNotLessThan">
            <summary>
              Looks up a localized string similar to The parameter &apos;{0}&apos; cannot be less than {1}..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.Exception_PasswordLength">
            <summary>
              Looks up a localized string similar to The length of password on {0} file format cannot exceed {1}..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.Exception_ProtectWorkbookPasswordLength">
            <summary>
              Looks up a localized string similar to The length of ProtectWorkbookPassword on {0} file format cannot exceed {1}..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.Exception_RowCountLimit">
            <summary>
              Looks up a localized string similar to Row count on {0} file format cannot exceed {1}..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.FONTNAMELENGTH">
            <summary>
              Looks up a localized string similar to The font name cannot exceed 240 characters..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.FONTNAMENOTNULL">
            <summary>
              Looks up a localized string similar to The FontName value cannot be set to null..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.FONTSIZECANNOTBELESSOREQUALTOZERO">
            <summary>
              Looks up a localized string similar to FontSize cannot be less then or equal to zero..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.FONTSIZETOOLARGE">
            <summary>
              Looks up a localized string similar to FontSize is too large..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.FONTUNDERLINESTYLERANGE">
            <summary>
              Looks up a localized string similar to FontUnderlineStyle must be one of the GrapeCity.SpreadBuilder.FontUnderlineStyles enumeration values..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.FORMATRECORDDONOTSUPPORTTHISVERSION">
            <summary>
              Looks up a localized string similar to Format records don&apos;t support this version..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.HORIZONTALALIGNMENTRANGE">
            <summary>
              Looks up a localized string similar to Horizontal Alignment value must be between 0 and 6..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.IMAGE1">
            <summary>
              Looks up a localized string similar to Image: Right column specified is either the same as or to the left of the left column specified!.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.IMAGE2">
            <summary>
              Looks up a localized string similar to Image: Top row specified is either the same as or above the top row specified!.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.IMAGETYPEERROR">
            <summary>
              Looks up a localized string similar to Image type must either be MSOBLIPTYPE.msoblipEMF or MSOBLIPTYPE.msoblipPNG..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.INDEXERROR">
            <summary>
              Looks up a localized string similar to The specified zero based collection index is either less than zero or greater than Count-1..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.INDEXOUTSIDEOFBOUNDS">
            <summary>
              Looks up a localized string similar to Argument is outside the bounds of the collection..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.INVALIDMARGINRECORD">
            <summary>
              Looks up a localized string similar to Invalid margin record identifier..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.INVALIDMSOBLIPTYPE">
            <summary>
              Looks up a localized string similar to Invalid MSOBLIPTYPE specified in OBJImage!.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.InvalidURIError">
            <summary>
              Looks up a localized string similar to Invalid hyperlink URI.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.MSOFBTOPT">
            <summary>
              Looks up a localized string similar to You must call make_msofbtOPT() before calling get_msofbtOPT()..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.MSOFBTOPTDATA">
            <summary>
              Looks up a localized string similar to Exception encountered writing out msofbtOPT data for a metafile on sheet [{0}]..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.OBJMETAFILE">
            <summary>
              Looks up a localized string similar to The specified OBJ metafile cannot be null..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.OUTPUTSTREAMNOTWRITABLE">
            <summary>
              Looks up a localized string similar to The specified output stream must be writable..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.PARENTSHEETCANNOTBENULL">
            <summary>
              Looks up a localized string similar to The ParentSheet value cannot be specified as null..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.PARMMUSTBESAVETYPE">
            <summary>
              Looks up a localized string similar to The parameter must be the same type as the class or value type that implements this interface..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ProtectedBy_Default">
            <summary>
              Looks up a localized string similar to ActiveReports.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.RESERVEDDOESNOTFIX">
            <summary>
              Looks up a localized string similar to current reserved value does not fit into 5 bits..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.RESERVEDVALUE">
            <summary>
              Looks up a localized string similar to reserved value must fit into 5 bits (0-31)..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ROWFROM">
            <summary>
              Looks up a localized string similar to Row from.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ROWFROMRANGE">
            <summary>
              Looks up a localized string similar to The rowFrom argument must be less than the rowTo argument..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.ROWRANGE">
            <summary>
              Looks up a localized string similar to Row must be greater than or equal to zero..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.SFORMATCANNOTBENULL">
            <summary>
              Looks up a localized string similar to Argument sFormat cannot be null..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.SFORMATRANGE">
            <summary>
              Looks up a localized string similar to Format string too long. Must be less than 255 characters..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.SHEETCOLINFOERROR">
            <summary>
              Looks up a localized string similar to Error writing ColInfos records for sheet [{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.SHEETDRAWINGLINEERROR">
            <summary>
              Looks up a localized string similar to Error writing Master Header for drawings or lines for Sheet [{0}]..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.SHEETINDEXERROR">
            <summary>
              Looks up a localized string similar to Error writing INDEX record for sheet [{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.SHEETLINEERROR">
            <summary>
              Looks up a localized string similar to Error writing a line for sheet [{0}] to stream..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.SHEETNAMENOTFOUND">
            <summary>
              Looks up a localized string similar to Sheet name not found..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.SHEETNOTFOUND">
            <summary>
              Looks up a localized string similar to Sheet name not found..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.SHEETPAGEBREAKERROR">
            <summary>
              Looks up a localized string similar to Error writing page break records for sheet [{0}].
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.SPECIFYPAGEBREAKS">
            <summary>
              Looks up a localized string similar to Specify either BiffRecordID.VERTICALPAGEBREAKS or BiffRecordID.HORIZONTALPAGEBREAKS..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.TEXTANGLERANGE">
            <summary>
              Looks up a localized string similar to TextAngle value must be between 0 and 255..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.TOOMANYMERGEAREAS">
            <summary>
              Looks up a localized string similar to Too many MergeAreas..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.UNEXCEPTEDIMAGETYPE">
            <summary>
              Looks up a localized string similar to Unexpected ImageType encountered..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.UNEXPECTEDERROR">
            <summary>
              Looks up a localized string similar to Unexpected error creating Workbook Stream..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.UNEXPECTEDERRORBOFRECORD">
            <summary>
              Looks up a localized string similar to Unexpected error writing BOF record..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.UNKNOWNPROPERTYID">
            <summary>
              Looks up a localized string similar to Unknown property ID indicated..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.VALUEMUSTFIT12">
            <summary>
              Looks up a localized string similar to Value must fit into 12 bits (0-4095)..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.VALUEMUSTFIT14">
            <summary>
              Looks up a localized string similar to Value must fit into 14 bits (0-16383)..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.VALUEMUSTFIT1BYTE">
            <summary>
              Looks up a localized string similar to Value must fit into 1 byte..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.VALUEMUSTFIT2">
            <summary>
              Looks up a localized string similar to Value must fit into 2 bits..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.VALUEMUSTFIT3">
            <summary>
              Looks up a localized string similar to Value must fit into 3 bits (7dec or less)..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.VALUEMUSTFIT4">
            <summary>
              Looks up a localized string similar to Value must fit into 4 bits..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.VALUEMUSTFIT6">
            <summary>
              Looks up a localized string similar to Value must fit into 6 bits..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.VALUEMUSTFIT7">
            <summary>
              Looks up a localized string similar to Value must fit into 7 bits (127dec or less)..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.VALUEMUSTFIX3">
            <summary>
              Looks up a localized string similar to Value must fit into 3 bits..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.VERSIONNOTIMPLBIFFCELLLABEL">
            <summary>
              Looks up a localized string similar to Not implemented BIFF version..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.VERTTICALALIGNMENTRANGE">
            <summary>
              Looks up a localized string similar to Vertical Alignment value must be between 0 and 3..
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Resources.WIDTHTOOLARGE">
            <summary>
              Looks up a localized string similar to Specified value too large..
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SheetLayout.IsCellMergedInRow(GrapeCity.SpreadBuilder.Cells.DDCell)">
            <summary>
            Gets whether the cell is merged in multiple rows.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SheetLayout.CalculateEndIndexAndOffset(GrapeCity.SpreadBuilder.SheetLayout,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Calculate image object's end anchor's index and offset.
            </summary>
            <param name="sheetLayout">The SheetLayout</param>
            <param name="startIndex">The start anchor's index</param>
            <param name="startOffset">The start anchor's offset</param>
            <param name="imageSize">The image's height or width and the unit is pixel</param>
            <param name="isRow">A boolean indicates whether calculate the value for row or column direction</param>
            <param name="endIndex">Output the end anchor's index</param>
            <param name="endOffset">Output the end anchor's offset</param>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.SpreadUtility">
            <summary>
            This class contains generic BIFF related functions that have little or no depdendencies 
            on other classes, or that are used from multiple classes such as WriteBOF and WriteEOF 
            functions.  As WriteBOF/EOF is used from DDSheet, Workbook, etc...
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.DEFAULT_BUILTINSTYLES_FORMATINDEXES">
            <summary>
            Format indexes for default BuiltInStyles.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.DEFAULT_BUILTINSTYLES_FORMATINDEXES_JP">
            <summary>
            Format indexes for default BuiltInStyles when local culture is Japanese.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.DEFAULT_BUILTINSTYLES">
            <summary>
            Stores the default BuiltInStyles.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.JAPANESE_LCID">
            <summary>
            Japanese local culture identifier
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.DEFAULT_AUTHOR">
            <summary>
            The default author.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.DEFAULT_PROTECTEDBY">
            <summary>
            The default name of person who protect the workbook.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.EMUS_PER_INCH">
            <summary>
            The integer represents EMUs per inch.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.EMUS_PER_POINT">
            <summary>
            The integer represents EMUs per point.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.XLS_MAX_COLUMN_COUNT">
            <summary>
            The max colum count that an Excel sheet can have in xls format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.XLSX_MAX_COLUMN_COUNT">
            <summary>
            The max colum count that an Excel sheet can have in xlsx format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.XLS_MAX_ROW_COUNT">
            <summary>
            The max row count that an Excel sheet can have in xls format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.XLSX_MAX_ROW_COUNT">
            <summary>
            The max row count that an Excel sheet can have in xlsx format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.XLS_MAX_HPB_COUNT">
            <summary>
            The max HorizontalPageBreaks count that an Excel sheet can have in xls format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.XLSX_MAX_HPB_COUNT">
            <summary>
            The max HorizontalPageBreaks count that an Excel sheet can have in xlsx format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.XLS_MAX_VPB_COUNT">
            <summary>
            The max VerticalPageBreaks count that an Excel sheet can have in xls format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.XLSX_MAX_VPB_COUNT">
            <summary>
            The max VerticalPageBreaks count that an Excel sheet can have in xlsx format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.XLS_MAX_PASSWORD_LENGTH">
            <summary>
            The max length of Password/ProtectWorkbookPassword that workbook can have in xls format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.XLSX_MAX_PASSWORD_LENGTH">
            <summary>
            The max length of Password/ProtectWorkbookPassword that workbook can have in xlsx format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.DefaultRowHeight">
            <summary>
            The default row height depends on default font. 
            The default font is "Arial" and the size is 10.
            Please refer to Workbook.DefaultFontName and DefaultFontSizeInPoints.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.SpreadUtility.DpiX">
            <summary>
            Get DpiX.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.FileFormatString(GrapeCity.SpreadBuilder.FileFormat)">
            <summary>
            Convert file version to string.
            </summary>
            <param name="version">FileFormat</param>
            <returns>A string indicates the file version.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.GetMaxPasswordLength(GrapeCity.SpreadBuilder.FileFormat)">
            <summary>
            The max length of password/ProtectWorkbookPassword that the workbook can have in special Excel format.
            </summary>
            <param name="version">FileFormat</param>
            <returns>A integer indicates the max length of password.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.GetMaxColumnCount(GrapeCity.SpreadBuilder.FileFormat)">
            <summary>
            The max colum count that an Excel sheet can have in special Excel format.
            </summary>
            <param name="version">FileFormat</param>
            <returns>A integer indicates The max colum count that an Excel 
            sheet can have in special Excel format.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.GetMaxRowCount(GrapeCity.SpreadBuilder.FileFormat)">
            <summary>
            The max row count that an Excel sheet can have in special Excel format.
            </summary>
            <param name="version">FileFormat</param>
            <returns>A integer indicates The max colum count that an Excel 
            sheet can have in special Excel format.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.GetMaxHorizontalPageBreaksCount(GrapeCity.SpreadBuilder.FileFormat)">
            <summary>
            The max HorizontalPageBreaks count that an Excel sheet can have in special Excel format.
            </summary>
            <param name="version">FileFormat</param>
            <returns>A integer indicates The max HorizontalPageBreaks count that an Excel 
            sheet can have in special Excel format.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.GetMaxVerticalPageBreaksCount(GrapeCity.SpreadBuilder.FileFormat)">
            <summary>
            The max VerticalPageBreaks count that an Excel sheet can have in special Excel format.
            </summary>
            <param name="version">FileFormat</param>
            <returns>A integer indicates The max VerticalPageBreaks count that an Excel 
            sheet can have in special Excel format.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.ColumnWidthToPixel(System.Int32,System.Single)">
            <summary>
            Transform the Excel column width to pixel.
            </summary>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.RowHeightToPixel(System.Int32)">
            <summary>
            Convert Excel Row Height to pixel
            </summary>
            <param name="height">Row Height</param>
            <returns>A float</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.ColumnWidthToEMUs(System.Int32,System.Single)">
            <summary>
            Convert Excel Column Width to EMUs.
            </summary>
            <param name="width">Excel Column Width</param>
            <returns>A float indicates EMUs</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.RowHeightToEMUs(System.Int32)">
            <summary>
            Convert Excel Row Height to EMUs.
            </summary>
            <param name="value">pixel</param>
            <returns>A float indicates EMUs</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.PixelToEMUs(System.Int32)">
            <summary>
            Convert pixel to EMUs.
            </summary>
            <param name="value">an integer indicates a pixel value</param>
            <returns>A float indicates EMUs</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.PixelToEMUs(System.Single)">
            <summary>
            Convert pixel to EMUs.
            </summary>
            <param name="value">a float indicates a pixel value</param>
            <returns>A float indicates EMUs</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.BytesToString(System.Byte[],System.String)">
            <summary>
            Transform bytes to string with special seperator.
            </summary>
            <param name="bytes">The bytes which need be transformed.</param>
            <param name="seperator">A string indicates the seperator.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.InchesToExcelWidth(System.Single,System.Single)">
            <summary>
            Excel's width unit is defined as 1/256 of a character's width. 
            There is a very complex way to accurately determine this value, which is initialized once, and used by this function.
            </summary>
            <param name="inches"></param>
            <returns></returns>
            <remarks>
            - The primary source of information on how this conversion is done is from a MS KB article titled "XL2000: How Column Widths Are Determined in Excel" with article number "214123" or "Q214123".  
            Some very relevant info is below.
            
            -Excel begins with a default width of 8 characters and translates this into a given number of pixels, 
            depending on the Normal style font. 
            -It then rounds this number up to the nearest multiple of 8 pixels.
            -The number that you see in the Column Width dialog box is the pixel width retranslated into character units.
            -Numbers are fixed-spaced with most proportional fonts.
            - Spreadbuilder's default font is the proportional (not-fixed width) Arial 10.
            
            The saved value in Excel an integer which is actually 1/256 of a character width
            
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.InchesToExcelHeight(System.Single)">
            <summary>
            Excel's row height is specified in 1/20th of a point.
            </summary>
            <param name="inches"></param>
            <returns>The height in 1/20th of a point rounded down to the nearest inch.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.BorderStyleToBiff7BorderStyle(GrapeCity.SpreadBuilder.Style.BorderLineStyle)">
            <summary>
            Converts a standard border style value (BIFF8) to a BIFF7 border style value.
            </summary>
            <param name="biff8BorderStyle">The BIFF8 border style value (dgTop, dgLeft, etc..).</param>
            <returns>The closest match in BIFF7.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.ToUnderlineValues(GrapeCity.SpreadBuilder.Style.FontUnderlineStyles)">
            <summary>
            Convert FontUnderlineStyles to OpenXml UnderlineValues.
            </summary>
            <param name="style">FontUnderlineStyles</param>
            <returns>UnderlineValues</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.MSOBLIPTYPEToImagePartType(GrapeCity.SpreadBuilder.Imaging.MSOBLIPTYPE)">
            <summary>
            Convert MSOBLIPTYPE to ImagePartType.
            </summary>
            <param name="type">MSOBLIPTYPE</param>
            <returns>ImagePartType</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.ErrorValueToString(GrapeCity.SpreadBuilder.Cells.BiffCellBoolErrValues)">
            <summary>
            Get error string according to BiffCellErrorValues.
            </summary>
            <param name="value">BiffCellErrorValues</param>
            <returns>return the error string.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.ToPresetLineDashValues(GrapeCity.SpreadBuilder.Imaging.LineStyles)">
            <summary>
            Convert LineStyles to PresetLineDashValues.
            </summary>
            <param name="style">LineStyles</param>
            <returns>PresetLineDashValues</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.ToLineEndValues(GrapeCity.SpreadBuilder.Imaging.LineArrowHeadStyles)">
            <summary>
            Convert LineArrowHeadStyles to LineEndValues.
            </summary>
            <param name="style">LineArrowHeadStyles</param>
            <returns>LineEndValues</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.ToPresetLineDashValues(GrapeCity.SpreadBuilder.Imaging.ImageLineStyle)">
            <summary>
            Convert ImageLineStyle to PresetLineDashValues.
            </summary>
            <param name="style">ImageLineStyle</param>
            <returns>PresetLineDashValues</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.CreateFixedPoint(System.Single)">
            <summary>
            http://msdn.microsoft.com/en-us/library/dd910765
            Specifies an approximation of a real number, where the 
            approximation has a fixed number of digits after the radix point.
            Value of the real number = Integral + (Fractional / 65536.0)
            </summary>
            <param name="f"></param>
            <returns>A byte array of FixedPoint.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.ColumnNumToLetter(System.Int32)">
            <summary>
            Convert column number to column letter.
            </summary>
            <param name="colNum">colNum is column index plus 1</param>
            <returns>Return the letter.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.SpreadUtility.GetStartOffset(GrapeCity.SpreadBuilder.DDSheet,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get the start offset for a shape or image.
            </summary>
            <param name="sheet">The DDSheet</param>
            <param name="startIndex">The start row/column's index</param>
            <param name="startPixel">The start position and the unit is pixel.</param>
            <param name="isRow">Whether it is for a row offset.</param>
            <returns>The start position and the unit is excel's unit(1/256 or 1/1024).</returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.BiffVersion">
            <summary>
            Different versions of BIFF.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffVersion.V7">
            <summary>
            Version 7 of the Excel File format is used to support Excel 95.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.BiffVersion.V8">
            <summary>
            Version 8 of the Excel File format supports Excel 97-Excel 2002.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.FileFormat">
            <summary>
            Specifies the file format that the outputted file should support.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.FileFormat.Xls97Plus">
            <summary>
            Optimized for Microsoft Excel 97 and newer versions.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.FileFormat.Xls95">
            <summary>
            Microsoft Excel 95 format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.FileFormat.Xlsx">
            <summary>
            Microsoft Excel OpenXml format.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.CellBorder">
            <summary>
            This class is for Open Xml.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.CellBorder._diagonalDown">
            <summary>
            Represent whether show DiagonalDown border.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.CellBorder._diagonalUp">
            <summary>
            Represent whether show DiagonalUp border.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.CellBorder._left">
            <summary>
            Represent the left BorderStyle.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.CellBorder._top">
            <summary>
            Represent the top BorderStyle.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.CellBorder._right">
            <summary>
            Represent the right BorderStyle.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.CellBorder._bottom">
            <summary>
            Represent the bottom BorderStyle.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.CellBorder._diagonal">
            <summary>
            Represent the diagonal BorderStyle.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.CellBorder.#ctor">
            <summary>
            Create CellBorder instance.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.CellBorder.DiagonalDown">
            <summary>
            Gets and sets whether show DiagonalDown border.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.CellBorder.DiagonalUp">
            <summary>
            Gets and sets whether show DiagonalUp border.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.CellBorder.Left">
            <summary>
            Gets left BorderStyle.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.CellBorder.Top">
            <summary>
            Gets top BorderStyle.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.CellBorder.Right">
            <summary>
            Gets right BorderStyle.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.CellBorder.Bottom">
            <summary>
            Gets bottom BorderStyle.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.CellBorder.Diagonal">
            <summary>
            Gets diagonal BorderStyle.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.CellBorder.Equals(System.Object)">
            <summary>
            Compare with other CellBorder.
            </summary>
            <param name="obj">The other CellBorder.</param>
            <returns>A bool value indicates if they have the same properies' value.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.CellBorder.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.BorderStyle">
            <summary>
            This class is for Open Xml.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderStyle.Color">
            <summary>
            Gets and sets the color of the border.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderStyle.Style">
            <summary>
            Gets and sets BorderLineStyle.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.BorderStyle.Equals(System.Object)">
            <summary>
            Compare with other BorderStyle.
            </summary>
            <param name="obj">The other CellBorder.</param>
            <returns>A bool value indicates if they have the same properies' value.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.BorderStyle.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.ColorStuff">
            <summary>
            Generic miscellaneous utilities for dealing with colors in spreadbuilder.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ColorStuff.GetRValue(GrapeCity.SpreadBuilder.Style.COLORREF)">
            <summary>
            Returns the Red value of the specified COLORREFF rgb value.
            </summary>
            <param name="rgb"></param>
            <returns></returns>
            <remarks>COLORREF format is 0x00bbggrr == bits:0000 0000 bbbb bbbb gggg gggg rrrr rrrr</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ColorStuff.GetGValue(GrapeCity.SpreadBuilder.Style.COLORREF)">
            <summary>
            Returns the Green value of the specified COLORREFF rgb value.
            </summary>
            <param name="rgb"></param>
            <returns></returns>
            <remarks>COLORREF format is 0x00bbggrr == bits:0000 0000 bbbb bbbb gggg gggg rrrr rrrr</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ColorStuff.GetBValue(GrapeCity.SpreadBuilder.Style.COLORREF)">
            <summary>
            Returns the blue value of the specified COLORREFF rgb value.
            </summary>
            <param name="rgb"></param>
            <returns></returns>
            <remarks>COLORREF format is 0x00bbggrr == bits:0000 0000 bbbb bbbb gggg gggg rrrr rrrr</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ColorStuff.GetHLSFromRGB(GrapeCity.SpreadBuilder.Style.COLORREF,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Returns the HLS values for the specified RGB color in COLORREF format.
            </summary>
            <param name="color"></param>
            <param name="H">REF/OUT, is where the H value of an HLS color will be returned.</param>
            <param name="L">REF/OUT, is where the L value of an HLS color will be returned.</param>
            <param name="S">REF/OUT, is where the S value of an HLS color will be returned.</param>
            <remarks>COLORREF format is 0x00bbggrr == bits:0000 0000 bbbb bbbb gggg gggg rrrr rrrr</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ColorStuff.GetLabFromRGB(GrapeCity.SpreadBuilder.Style.COLORREF,System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns the Lab values for the specified RGB color in COLORREF format.
            </summary>
            <param name="color"></param>
            <param name="L">REF/OUT, is where the L value of an Lab color will be returned.</param>
            <param name="A">REF/OUT, is where the A value of an Lab color will be returned.</param>
            <param name="B">REF/OUT, is where the B value of an Lab color will be returned.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ColorStuff.ColorDifference(System.Double,System.Double,System.Double,GrapeCity.SpreadBuilder.Style.COLORREF)">
            <summary>
            CIE76 color difference algorithm.
            </summary>
            <param name="color1"></param>
            <param name="color2"></param>
            <returns></returns>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.ColorStuff.STDCOLOR_COUNT">
            <summary>
            A 56 color palette is always written to the BIFF file except in versions 2 and 3 where zero and 16 colors are written repectively.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.ColorStuff.biff8ColorPalette">
            <summary>
            The biff8ColorPalette is used to fill palettes of less than 56 colors
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.HSV">
            <summary>
            Used by MakeColorTranslationTable(...).
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.COLORREF">
            <summary>
            Represent's the Win32 COLORREF data type.
            </summary>
            <remarks>
            The COLORREF value is a 32-bit value used to specify an RGB color.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.COLORREF.val">
            <summary>
            The UInt32 that actually holds the win32 COLORREF value.
            This UInt32 should have the COLOREF format of 0x00bbggrr.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.COLORREF.#ctor(System.UInt32)">
            <summary>
            Uses the specified UInt32 value as the RGB color value according to Win32 PSDK's COLORREF documentation.
            </summary>
            <param name="colorInt">The 32 bit value representing an RGB color.  See remarks section.</param>
            <remarks>
            When specifying an explicit RGB color, the COLORREF value has the following hexadecimal form: 0x00bbggrr .
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.COLORREF.op_Implicit(GrapeCity.SpreadBuilder.Style.COLORREF)~System.UInt32">
            <summary>
            Provides an implicit conversion FROM COLORREF  TO  System.UInt32.  The UInt32 should have the COLOREF format of 0x00bbggrr.
            </summary>
            <param name="cRef"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.COLORREF.op_Implicit(System.UInt32)~GrapeCity.SpreadBuilder.Style.COLORREF">
            <summary>
            Provides an implcicit conversion TO COLORREF FROM System.UInt32.  The UInt32 should have the COLOREF format of 0x00bbggrr.
            </summary>
            <param name="iColor"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.COLORREF.op_Implicit(System.Drawing.Color)~GrapeCity.SpreadBuilder.Style.COLORREF">
            <summary>
            Provides an implicit conversion TO COLORREF FROM System.Drawing.Color, using System.Drawing.ColorTranslator.
            </summary>
            <param name="oColor"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.COLORREF.op_Implicit(GrapeCity.SpreadBuilder.Style.COLORREF)~System.Drawing.Color">
            <summary>
            Provides an implicit conversion TO System.Drawing.Color FROM COLORREF, using System.Drawing.ColorTranslator.
            </summary>
            <param name="cRef"></param>
            <returns></returns>
            <remarks>COLORREF format is 0x00bbggrr == bits:0000 0000 bbbb bbbb gggg gggg rrrr rrrr</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.COLORREF.op_Equality(GrapeCity.SpreadBuilder.Style.COLORREF,GrapeCity.SpreadBuilder.Style.COLORREF)">
            <summary>
            Implementation of the == comparison operator for comparing two COLORREF values.
            </summary>
            <param name="colA"></param>
            <param name="colB"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.COLORREF.op_Inequality(GrapeCity.SpreadBuilder.Style.COLORREF,GrapeCity.SpreadBuilder.Style.COLORREF)">
            <summary>
            Implementation of the != comparison operator for comparing two COLORREF values.
            </summary>
            <param name="colA"></param>
            <param name="colB"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.COLORREF.Equals(System.Object)">
            <summary>
            Implementation of the Equals method for comparing two COLORREF values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.COLORREF.GetHashCode">
            <summary>
            Returns a hashcode based on the integral value of the COLORREF.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.Fill">
            <summary>
            The fill class is for Open Xml.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.PatternFill">
            <summary>
            The PatternFill class is for Open Xml.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.PatternFill._backColor">
            <summary>
            Represents the back color.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.PatternFill._foreColor">
            <summary>
            Represents the fore color of the fill.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.PatternFill._patternType">
            <summary>
            Represents the pattern typer of the fill.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.PatternFill.BackColor">
            <summary>
            Gets and sets the back color.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.PatternFill.ForeColor">
            <summary>
            Gets and sets the fore color.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.PatternFill.PatternType">
            <summary>
            Gets and sets the pattern type.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.PatternFill.Equals(System.Object)">
            <summary>
            Compare to other whether they have the same properties' value.
            </summary>
            <param name="obj">The other PatternFill.</param>
            <returns>A bool value indicates if they have the same properties' value.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.PatternFill.GetHashCode">
            <summary>
            Returns the hash code for the value of this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.ExcelFonts">
            <summary>
            ExcelFonts contains the fonts that will eventually be written out to BIFF as BIffFonts.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFonts.Init">
            <summary>
            Fills the collection with the default font's required by every biff file. 
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFonts.GetColorIndex(System.UInt16)">
            <summary>
            Returns the colorIndex property value of the ExcelFont at the specified index.
            </summary>
            <param name="fontIndex">The index of the ExcelFont you want the colorIndex property value for.</param>
            <returns>
            The colorIndex property value of the ExcelFont at the specified index.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFonts.Trans_ColorIndex(System.UInt16,System.UInt16)">
            <summary>
            Returns either an existing font record with the new colorindex, or creates and returns a new font record.
            </summary>
            <param name="fontIndex"></param>
            <param name="colorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFonts.MapFont(GrapeCity.SpreadBuilder.Style.ExcelFont)">
            <summary>
            Seaches for a font in this collection that is the same as the specified font.  If found returns an index to that font.  If not found a font matching the specified font is created, added to this collection, and the index to the newly created font is returned.
            </summary>
            <param name="pFont"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFonts.get_FontName(System.UInt16)">
            <summary>
            Returns the font name of the font at the specified index in this collection.
            </summary>
            <param name="fontIndex"></param>
            <param name="sVal"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFonts.Trans_FontBold(System.UInt16,System.Boolean)">
            <summary>
            Sets the lfWeight (boldness) of the font at the specified index to the specified value (flag).
            </summary>
            <param name="fontIndex"></param>
            <param name="flag">True to set the font to bold, false to set the font to not bold.</param>
            <remarks>Font index of hte font.</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFonts.get_FontBold(System.UInt16)">
            <summary>
            Returns true if the lfWeight property of the ExcelFont object at the specified index has a value of LogFontWeights.FW_BOLD.
            </summary>
            <param name="fontIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFonts.Trans_FontStrikeOut(System.UInt16,System.Boolean)">
            <summary>
            Returns an index to a font that meets the settings of the font at the specified index, and the specified strikeout setting.
            </summary>
            <param name="fontIndex">
            The index to the font that you want to be strike-out
            </param>
            <param name="flag">True if the font should be strikeout, false if it should not be strikeout.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFonts.get_FontStrikeOut(System.UInt16)">
            <summary>
            Returns true if the lfWeight property of the ExcelFont object at the specified index has a value of strikeout setting.
            </summary>
            <param name="fontIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFonts.Trans_FontItalic(System.UInt16,System.Boolean)">
            <summary>
            Returns an index to a font that meets the settings of the font at the specified index, and the specified italic setting.
            </summary>
            <param name="fontIndex">
            The index to the font that you want to be italicized.
            </param>
            <param name="flag">True if the font should be italic, false if it should not be italic.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFonts.get_FontItalic(System.UInt16)">
            <summary>
            Returns true if the font at the specified index is italic.  Returns false if it is not italic.
            Ultimately used by DDCell for it's FontItalic.get property.
            </summary>
            <param name="fontIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFonts.Trans_FontSize(System.UInt16,System.Double)">
            <summary>
            Finds an existing, or creates a new font meeting the properties of the font at the 
            specified index but with the specified size.
            Returns the index to the font that was found or created.
            </summary>
            <param name="fontIndex"></param>
            <param name="val">Height of the font in points.</param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFonts.get_FontSize(System.UInt16)">
            <summary>
            Returns the height/size of the font in Points.
            </summary>
            <param name="fontIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFonts.Trans_FontUnderlineStyle(System.UInt16,GrapeCity.SpreadBuilder.Style.FontUnderlineStyles)">
            <summary>
            Finds an existing, or creates a new font meeting the properties of the font at the 
            specified index but with the specified underline style.
            </summary>
            <param name="fontIndex"></param>
            <param name="style"></param>
            <returns>Returns the index to the font that was found or created.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFonts.get_FontUnderlineStyle(System.UInt16)">
            <summary>
            Returns the FontUnderlineStyles value for the font at the specified index.
            </summary>
            <param name="fontIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFonts.FindItem(GrapeCity.SpreadBuilder.Style.ExcelFont)">
            <summary>
            searches ExcelFonts::m_list(FArray ExcelFont) for for a font identical to its argument.  \
            </summary>
            <param name="pFind"></param>
            <returns>
            If found, it returns an index, if not, it returns -1.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFont.Equals(System.Object)">
            <summary>
            OVERRIDE of object.Equals.  This method will compare the data stored by the two instances of ExcelFont.
            </summary>
            <param name="obj">The ExcelFont object to be compared to this instance.</param>
            <returns>
            If the data is equal, true will be returned.  
            If the data is not equal, false will be returned.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFont.op_Equality(GrapeCity.SpreadBuilder.Style.ExcelFont,GrapeCity.SpreadBuilder.Style.ExcelFont)">
            <summary>
            This method will compare the data stored by the two instances of ExcelFont.
            </summary>
            <param name="valA">
            An ExcelFont instance to be compared to the ExcelFont instance in valB.
            </param>
            <param name="valB">
            An ExcelFont instance to be compared to the ExcelFont instance in valA.
            </param>
            <returns>True if the two object's values are equal.  Otherwise false.</returns>
            <remarks>Will call this.Equals if both arguments are not null.</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFont.op_Inequality(GrapeCity.SpreadBuilder.Style.ExcelFont,GrapeCity.SpreadBuilder.Style.ExcelFont)">
            <summary>
            This method will compare the data stored by the two instances of ExcelFont.
            </summary>
            <param name="valA">An ExcelFont instance to be compared to the ExcelFont instance in valB.</param>
            <param name="valB">An ExcelFont instance to be compared to the ExcelFont instance in valA.</param>
            <returns>False if both arguments are equal.  Otherwide true.</returns>
            <remarks>Will call this.Equals if both arguments are not null.</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.ExcelFont.GetHashCode">
            <summary>
            Provides a hashcode by xor-ing each the values stored by this object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.BiffFont">
            <summary>
            This struct contains the font data as it will be written to BIFF (version 8).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont.dyHeight">
            <summary>
            Height of the font (in units of 1/20th of a point).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont.grbit">
            <summary>
            Font attributes (see the following table).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont.icv">
            <summary>
            Index to the color palette.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont.bls">
            <summary>
            Bold style; a number from 100dec to 1000dec (64h to 3E8h) that indicates the character weight ("boldness"). 
            The default values are 190h for normal text and 2BCh for bold text.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont.sss">
            <summary>
            Superscript/subscript.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont.bFamily">
            <summary>
            The proper value for bFamily can be obtained by using the Boolean OR operator to join 
            one BiffFont_Pitches value with one BiffFont_Families constant. 
            </summary>
            <remarks>
            For now we're using <code>(byte)(BiffFont_Families.DontCare | BiffFont_Pitches.Default)</code>.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont.bCharSet">
            <summary>
            Character set, as defined by the Windows API LOGFONT structure. 
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont.reserved">
            <summary>
            Reserved, must be zero.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont.cch">
            <summary>
            Number of *characters* (not bytes) in the font name.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont.rgch_FontName">
            <summary>
            The font name.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.BiffFont_ScriptStyles">
            <summary>
            Used for BiffFont.sss
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.BiffFont_UnderlineStyles">
            <summary>
            Used for BiffFont.uls
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.BiffFont_Families">
            <summary>
            Used for BiffFont.bFamily.
            These values were taken from VC++ include file wingdi.h.
            They are actually the LOGFONT's lfPitchAndFamily's "Family" values.
            The bFamily value of BiffFont should be one of these values or'd together 
            with a BiffFont_Pitches value to form an actual bFamily value.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont_Families.DontCare">
            <summary>
            Don't care or don't know.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont_Families.Romain">
            <summary>
            Variable stroke width, serifed.
            Times Roman, Century Schoolbook, etc.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont_Families.Swiss">
            <summary>
            Variable stroke width, sans-serifed.
            Helvetica, Swiss, etc.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont_Families.Modern">
            <summary>
            Constant stroke width, serifed or sans-serifed.
            Pica, Elite, Courier, etc.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont_Families.Script">
            <summary>
            Cursive, etc.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont_Families.Decorative">
            <summary>
            Old English, etc.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.BiffFont_Pitches">
            <summary>
            Used for BiffFont.bFamily.
            These values were taken from VC++ include file wingdi.h.
            They are actually the LOGFONT's lfPitchAndFamily's "Pitch" values.
            The bFamily value of BiffFont should be one of these values or'd together 
            with a BiffFont_Families value to form an actual bFamily value.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.BiffFont_CharSets">
            <summary>
            Used for BiffFont.bCharSet.
            LOGFONT's lfCharSet values from VC++ include file wingdi.h.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.LogFontWeights">
            <summary>
            For LOGFONT taken from VC++ include file wingdi.h
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.BiffFont_grbits">
            <summary>
            Font Attributes for BiffFont.grbit.  These values are masks, and should be OR'd together to form the grbit value.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont_grbits.fItalic">
            <summary>
            Bit = 1,
            Mask = 0x02,
            Value = 1 if the font is italic.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont_grbits.fStrikeout">
            <summary>
            Bit = 3,
            Mask = 0x08,
            Value = 1 if the font is struck out.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont_grbits.fOutline">
            <summary>
            Bit = 4,
            Mask = 0x10,
            Value = 1 if the font is outline style (Macintosh only).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BiffFont_grbits.fShadow">
            <summary>
            Bit = 5,
            Mask = 0x20,
            Value = 1 if the font is shadow style (Macintosh only).
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.NumberFormats">
            <summary>
            Contains a collection of number format strings for the workbook.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.NumberFormats.m_formatStrings">
            <summary>
            List of the actual format strings.  There are 8 built in formats.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.NumberFormats.m_ids">
            <summary>
            List of "ifmt" format ids at the same index as the associated formatString in m_formatStrings.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.NumberFormats.BUILTINFORMATCOUNT">
            <summary>
            Number of built in number formats in every workbook.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.NumberFormats.#ctor">
            <summary>
            Constructor for Numberformats.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.NumberFormats.FormatStrings">
            <summary>
            Gets list of the actual format strings.  There are 8 built in formats.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.NumberFormats.Ids">
            <summary>
            Gets list of "ifmt" format ids at the same index as the associated formatString in m_formatStrings.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.NumberFormats.Count">
            <summary>
            Returns the number of format strings currently in this collection.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.NumberFormats.Init">
            <summary>
            Adds the default "built in" numberformat strings for the workbook.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.NumberFormats.Add(System.String)">
            <summary>
            Adds the specified number format string to the collection, generates an "ifmt" identifer for the specified number format and returns the generated id.
            </summary>
            <param name="sNumberFormat">
            The number format string to be added to the collection.  This string will be saved out to the BIFF file.
            </param>
            <returns>
            The newly generated "ifmt" ID (can be used with XF records) for the specified sNumberFormat.
            </returns>
            <remarks>
            <para>
            For foreign currency symbols such as the Japanese Yen you can use a format such as: "[$�-0]#,##0.00".  Replace the Yen sign (�) with whatever currency symbol you want used there.
            </para>
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.NumberFormats.GetFormatById(System.UInt16)">
            <summary>
            Searches the collection for a number format with the specified "ifmt" id value.  
            </summary>
            <param name="ifmt">
            The ifmt ID you want to find the associated number format string for. This value can be taken directly from the ifmt field of an XF record.
            </param>
            <returns>
            The number format string associated with the ID or null if the id is not found.
            </returns>
            <remarks>
            This is the fastest way to lookup a numberformat (verses GetIdFromFormat).
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.NumberFormats.GetIdFromFormat(System.String)">
            <summary>
            Returns the "ifmt" id associated with the specified number format string.  
            If the format string does not already exist, it will be added and the ID for the newly added item will be returned.
            </summary>
            <param name="sNumberFormat">
            The number format in this collection that you want the "ifmt" id for.
            </param>
            <returns>
            The ifmt id for the specified number format string.
            </returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.HorzAlignments">
            <summary>
            Different types of horizontal alignments.  Used by DDCell.Alignment.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.HorzAlignments.General">
            <summary>
            General
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.HorzAlignments.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.HorzAlignments.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.HorzAlignments.Right">
            <summary>
            Rright
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.HorzAlignments.Fill">
            <summary>
            Fill
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.HorzAlignments.Justify">
            <summary>
            Justify
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.HorzAlignments.CenterAcrossSelection">
            <summary>
            Center across selection
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.VertAlignments">
            <summary>
            Difference types of vertical alignments.  Used by DDCell.VertAlignment.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.VertAlignments.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.VertAlignments.Center">
            <summary>
            Center
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.VertAlignments.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.VertAlignments.Justify">
            <summary>
            Justify
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.BorderLineStyle">
            <summary>
            Border line styles.  Used for DDCell.BorderTopStyle, .BorderBottomStyle, etc...
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderLineStyle.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderLineStyle.Thin">
            <summary>
            Thin
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderLineStyle.Medium">
            <summary>
            Medium
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderLineStyle.Dashed">
            <summary>
            Dashed
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderLineStyle.Dotted">
            <summary>
            Dotted
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderLineStyle.Thick">
            <summary>
            Thick
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderLineStyle.Double">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderLineStyle.Hair">
            <summary>
            Hair
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderLineStyle.MediumDashed">
            <remarks>
            Not supported in BIFF7 and earlier.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderLineStyle.DashDot">
            <remarks>
            Not supported in BIFF7 and earlier.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderLineStyle.MediumDashDot">
            <remarks>
            Not supported in BIFF7 and earlier.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderLineStyle.DashDotDot">
            <remarks>
            Not supported in BIFF7 and earlier.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderLineStyle.MediumDashDotDot">
            <remarks>
            Not supported in BIFF7 and earlier.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderLineStyle.SlantedDashDot">
            <remarks>
            Not supported in BIFF7 and earlier.
            </remarks>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.BorderDiagonalStyles">
            <summary>
            For DDCell's BorderDiagonalEnum property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderDiagonalStyles.None">
            <summary>
            No diagonal border will be drawn.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderDiagonalStyles.Down">
            <summary>
            Starts in the upper left corner, and goes down to the lower right corner.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderDiagonalStyles.Up">
            <summary>
            Starts in the bottom left corner, and goes up to the upper right corner.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.BorderDiagonalStyles.Both">
            <summary>
            Includes both Up &amp; Down styles, forming an X accross the cell.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.FontUnderlineStyles">
            <summary>
            Underline styles for DDCell.FontUnderlineStyle
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.FontUnderlineStyles.None">
            <summary>
            No underline.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.FontUnderlineStyles.Single">
            <summary>
            Single underline.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.FontUnderlineStyles.Double">
            <summary>
            Double underline.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.FontUnderlineStyles.SingleAcc">
            <summary>
            Single accounting underline.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.FontUnderlineStyles.DoubleAcc">
            <summary>
            Double accounting underline.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.XFRecord8">
            <summary>
            This class represents an BIFF XF record.  The XF record represents formmating information on a SpreadBuilder cell.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.XFRecord8.Clone">
            <summary>
            Creates a new XFRecord8 object that has the same values as this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.XFRecord8.Equals(System.Object)">
            <summary>
            OVERRIDE of object.Equals.  This method will compare the data stored by the two instances of XFRecord8.
            </summary>
            <param name="obj">The XFRecord8 object to be compared to this instance.</param>
            <returns>If the data is equal, true will be returned.  If the data is not equal, false will be returned.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.XFRecord8.op_Equality(GrapeCity.SpreadBuilder.Style.XFRecord8,GrapeCity.SpreadBuilder.Style.XFRecord8)">
            <summary>
            Checks both arguments for null, if a single argument, or both arguments are not null, then the result of XFRecord8.Equals(...) is returned.
            If both arguments are null, they are considered equal.
            </summary>
            <param name="lhs">An XFRecord8 instance to be compared to the XFRecord8 instance in rhs.</param>
            <param name="rhs">An XFRecord8 instance to be compared to the XFRecord8 instance in lhs.</param>
            <returns>True if the two object's values are equal.  Otherwise false.</returns>
            <remarks>May call this.Equals if an argument is not null.</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.XFRecord8.op_Inequality(GrapeCity.SpreadBuilder.Style.XFRecord8,GrapeCity.SpreadBuilder.Style.XFRecord8)">
            <summary>
            Checks both arguments for null, if a single argument, or both arguments are not null, then the NOT'ed result of XFRecord8.Equals(...) is returned.
            If both arguments are null, they are considered equal thus, this method will return false.
            </summary>
            <param name="valA">An XFRecord8 instance to be compared to the XFRecord8 instance in valB.</param>
            <param name="valB">An XFRecord8 instance to be compared to the XFRecord8 instance in valA.</param>
            <returns>False if both arguments are equal.  Otherwide true.</returns>
            <remarks>May call this.Equals if an argument is not null.</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.XFRecord8.GetHashCode">
            <summary>
            Returns a hash code based on the internally stored *values* of the class.
            </summary>
            <returns></returns>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.XFRecord8.xfParent">
            <summary>
            Index to the XF record of the parent style. Every cell XF must have a parent style XF, 
            which is usually ixfeNormal = 0.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.XFRecord8.dgDiag">
            <summary>
            Border line style (see the table in Excel File Format Doc).
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.XFRecord8.fillForeColor">
            <summary>
            aka icvFore: Index to the color palette for the forground color of the fill pattern. Apparently this is what is used as the "background color" (no pattern, just a backcolor) for a cell.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.XFRecord8.fillBackColor">
            <summary>
            aka icvBack: Index to the color palette for the background color of the fill pattern.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.XFRecord8_hAlignments">
            <summary>
            Values for the XFRecord8.hAlignment property.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.XFRecord8_vAlignments">
            <summary>
            Values for the XFRecord8.vAlignment property.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.XFRecords">
            <summary>
            XFRecords is a collection of the BIFF XF records.  This class is used to manage the XF records, as well as serialize/save them in the proper BIFF format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.XFRecords.FXINDEX_NORMAL">
            <summary>
            Index with in the XFRecords collection to the "Normal" Style XF record.
            BIFF documentation calls this value "ixfeNormal".
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.XFRecords.m_list">
            <summary>
            Contains the actual full collection of XFRecord8 objects.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Style.XFRecords.m_flatList">
            <summary>
            m_flatList contains only the unique XFRecords in the m_list array.  
            It's kind of a compacted form of m_list, where "compacting" is done by 
            XFRecords just before saving to BIFF to minimize the number of records persisted.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.XFRecords.#ctor(GrapeCity.SpreadBuilder.Workbook)">
            <summary>
            Initializes an instance of hte XFRecords class. with the specified owner workbook.
            </summary>
            <param name="ownerBook">The workbook that this XFRecords collection is a member of.</param>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.XFRecords.OwnerWorkbook">
            <summary>
            The workbook that this XFRecords collection is an instance of.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.XFRecords.AddDefaults">
            <summary>
            Sets up the default collection of workbook global XF records.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.XFRecords.AddRec(GrapeCity.SpreadBuilder.Style.XFRecord8)">
            <summary>
            Adds an XFRecord8 to the collection.
            </summary>
            <param name="item">The XFRecord8 instance to add to this collection.</param>
            <returns>The zero based index at which the specified XFRecord has been added.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.XFRecords.GetRec(System.Int32)">
            <summary>
            Returns the XFRecord8 found at the specified index.
            </summary>
            <param name="index">A zero based index of the XFRecord.</param>
            <returns>The XFRecord found at the specified index or </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.XFRecords.FillDefault(GrapeCity.SpreadBuilder.Style.XFRecord8)">
            <summary>
            Sets the values of the memebers of an XFRecord8 object to their "default" values.
            </summary>
            <param name="item">The XFRecord8 object to be setup.  If this variable is null, it will set to a newly created instance of an XFRecord8.</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.XFRecords.ClearRecords">
            <summary>
            Removes all references to the items contained with in this collection.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Style.XFRecords.Count">
            <summary>
            Returns the total number of items in this collection that can be accessed with AddRec/GetRec.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.XFRecords.FixInheritanceFlags(GrapeCity.SpreadBuilder.Style.XFRecord8)">
            <summary>
            Verifies and fixes (if necessary) all "fAtr" fields (inheritance indication fields) in a version 8 BIFF XF record.
            </summary>
            <param name="rec">An XF8Record with a valid xfParent field who's inheritance flags should be "fixed".</param>
            <remarks>May throw an ArgumentException if the xfParent indicated by rec cannot be found.</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.XFRecords.MapXFRecord(GrapeCity.SpreadBuilder.Style.XFRecord8)">
            <summary>
            Searches this existing XFRecords collection for an XFrecord identical to the one 
            specified.  If found, it returns the index to the found XF record.  If it is not found, 
            the specified XF is added, and the index to the newly added XF is returned.
            </summary>
            <param name="rec"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.XFRecords.CompareXFRecord8(GrapeCity.SpreadBuilder.Style.XFRecord8,GrapeCity.SpreadBuilder.Style.XFRecord8)">
            <summary>
            Compares the specified XFRecord instances and returns a weighting indicating how similar the two records are.
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.XFRecords.CompactAndPatchForBiff(System.UInt16[])">
            <summary>
            Compacts the XFRecords �expanded list� into a �compacted list�.  And the specified iaPatchIndex array is filled with �XF index patches� (see remarks).
            </summary>
            <param name="iaPatchedIndexes">
            This is an array of int that you put the old XFIndex in, and it returns the new 
            remapped XFIndex for that XFRecord.
            </param>
            <remarks>
            �XF index patches� (the iaPatchIndex array) is an array the same size as the �expanded list� of XFRecords.   You use an original SpreadBuilder object�s (such as a cell�s) XFRecord index as an index in this array and it will return the equivalent index for the �compacted list�.
            The �compacted list� is what is actually saved to the file format.  This step should not be performed until just before saving and after the point when any SpreadBuilder objects (e.g. cells, rows) will be modified.  Since SpreadBuilder objects are saved with only an index to their XFRecord, their index needs patched just before saving, and that is the purpose of the iaPatchIndex array.
            In step 1 XFRecords are compacted according to these rules:
            1.	Only one XFRecord will be added for any identical XFRecords in the �expanded list�.  Thus if there are two XFRecords exactly the same, then one will not be added to the �compacted list�.
            2.	Any XFRecords that are not referenced by some SpreadBuilder object (such as a cell, column, or row) are also not added to the compacted array.
            3.	If the compacted XFRecords collection grows larger than what the file format can support then the remaining XFRecords are removed from the compacted list.  Each of the XFRecord�s that are removed will be �patched� to their closest match.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Style.XFRecords.CompColors(System.UInt16,System.UInt16)">
            <summary>
            Compares two colors, 0 is perfect match, higher less so, up to max of 10^7.2.  
            </summary>
            <param name="idxLcolor">
            An index to a color in the Workbook.m_customColors array.
            </param>
            <param name="idxRcolor">
            An index to a color in the Workbook.m_customColors array.
            </param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Style.XFPropID">
            <summary>
            Used internally for Get/SetXFPropID &amp; XFTRans_SetProperty(...)
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Tools.DDMath">
            <summary>
            Contains methods that are generic, and don't really have a better place to go.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Tools.DDMath.MulDiv(System.Int32,System.Int32,System.Int32)">
            <summary>
            This is my own port of the Win32 Platform SDK function MulDiv.  The Platform SDK MSDN 
            documentation documented the function as follows:
            "The MulDiv function multiplies two 32-bit values and then divides the 64-bit result 
            by a third 32-bit value. The return value is rounded up or down to the nearest integer."
            </summary>
            <param name="nNumber">Specifies the multiplicand.</param>
            <param name="nNumerator">Specifies the multiplier.</param>
            <param name="nDenominator">Specifies the number by which the result of the multiplication (nNumber * nNumerator) is to be divided.</param>
            <returns>
            If the function succeeds, the return value is the result of the multiplication 
            and division. 
            If either an overflow occurred or nDenominator was 0, the return value is –1.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Tools.DDMath.RoundNear(System.Double,System.Double)">
            <summary>
            Rounds varnumber to the nearest fraction equal 
            </summary>
            <param name="dNum">Number to round.</param>
            <param name="dDelta">Fraction used as a measure of rounding.</param>
            <returns>dNum rounded to nearest multiple of dDelta.</returns>
            <example>
            RoundNear(53,6) == 54;
            RoundNear(1.16,0.25) == 1.25;
            RoundNear(1.12,0.25) == 1.00;
            RoundNear(1.125,0.25) == 1.25;
            </example>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Tools.BitTools.TrimBits(System.UInt16,System.Byte)">
            <summary>
            Makes sure that the specified value will fit into the specified number of bits.
            </summary>
            <param name="theValue"></param>
            <param name="numberOfBits"></param>
            <returns>
            If theValue will fit into the specified number of bits, the value is returned.
            If theValue is too large to fit into the specified number of bits, the highest value that 
            will fit into the specified number of bits is returned.
            If theValue is too small (less than zero) to fit into the specified number of bits, zero will be returned.
            </returns>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.OpenXmlStandard">
            <summary>
            Specifies the level of Open XML document conformance on exporting with Xlsx file format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.OpenXmlStandard.Strict">
            <summary>
            ISO/IEC 29500 Strict.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.OpenXmlStandard.Transitional">
            <summary>
            ISO/IEC 29500 Transitional.
            </summary>
        </member>
        <member name="T:GrapeCity.SpreadBuilder.Workbook">
            <summary>
            Represents a spreadsheet workbook that contains spreadsheets.  This object will represent information that is relevant to all spreadsheets in the workbook (e.g. Author, BIFF/file version, etc...).
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook.m_customColors">
            <summary>
            Contains COLORREF objects.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook.m_paletteColors">
            <summary>
            Contains COLORREF objects.
            </summary> 
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook.m_fonts">
            <summary>
            Collection of workbook global FONT records.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook.m_formats">
            <summary>
            Collection of workbook global FORMAT records.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook.m_xfRecords">
            <summary>
            Collection of workbook global XF records.
            The c++ code called this m_cellXF
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook.m_builtInStyles">
            <summary>
            Collection of workbook global STYLE records.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook.sharedStrings">
            <summary>
            Private storage for the SharedStrings property.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook.m_WriteDoubleStreamFileRec">
            <summary>
            If true a BIFF DSF record will be written.   If false the record will not be written.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook.mapCRC">
            <summary>
            Used to hold/map CRC values for metafiles.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook._biffExport">
            <summary>
            The exporter which is used to export biff format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook._openXmlExport">
            <summary>
            The exporter which is used to export OpenXml format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook._uniqueXFIndexList">
            <summary>
            The array store the compacted and patched xf index list.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook._colorTranslationTable">
            <summary>
            Color index mapping array.  This is necessary as the color array 
            is compacted before saving to reduce size and remove duplicates.  
            Use the old index as the index to this array, 
            and the array should return the new for that color index.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook._maxColumnCount">
            <summary>
            The max column count that this workbook can include. Will be set when saving.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook._maxRowCount">
            <summary>
            The row row count that this workbook can include. Will be set when saving.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.WriteDoubleStreamFileRec">
            <summary>
            Gets m_WriteDoubleStreamFileRec field indicates whether write a BIFF DSF record.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.ExportHandler">
            <summary>
            Get IExport according to file version.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook._useDefaultPalette">
            <summary>
            Represents whether export document with Excel default palette.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.UseDefaultPalette">
            <summary>
            Sets or returns whether export document with Excel default palette.
            </summary>
            <remarks>
            Setting this value to true, application will use the color which is in default palette and is closest to pre-defined custom color of control's forecolor and backcolor.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook._sheetName">
            <summary>
            Represents whether the name of sheet.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.SheetName">
            <summary>
            Sets or returns a value indicating the name of sheet. <b>Sheet</b> is default.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook.DefaultFontName">
            <summary>
            Returns the name of the default font.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook.DefaultFontSizeInPoints">
            <summary>
            Returns the size of the default font in points.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.TraceVerbose(System.String)">
            <summary>
            Provides tracing when defined appropriately in an application configuration file.
            </summary>
            <param name="message">The trace message to be written to a trace listener.</param>
            <remarks>
            This could be used with support and an appropriate app.config file to implement tracing when output is messed up for unknown reasons.
            I've applied these debugger attributes to it to attempt to keep it out of call stacks and debuggers stepping though it.
            If this method is found to be a sevear performance hinderence (presumably via profiling), then we should be able to uncomment the ConditionalAttribute below and only have it included in DEBUG builds only.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.TraceVerbose(System.String,System.Object[])">
            <summary>
            Provides tracing with string.format like capabilities.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.#ctor">
            <summary>
            The default constructor for Workbook.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.Clear">
            <summary>
            Removes all sheets, creates a fresh instance of all member class variables and 
            initializes all member data variables to their default value.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.AddDefaultFills">
            <summary>
            Add default Fills for OpenXml format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook.m_sheets">
            <summary>
            Internal storage for the DDSheets property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.Sheets">
            <summary>
            Returns the collection of shsets as a DDSheets collection object.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.MeasureString">
            <summary>
            Measures string size to calculate auto row height (in pixels).
            For internal use only.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.PixelsPerChar">
            <summary>
            The average width of "0123456789" ten characters.
            Recommended value is 7.4. For legacy sheets can be set as 7.
            For internal use only.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook.m_author">
            <summary>
            Internal storage for the Author property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.Author">
            <summary>
            Sets/returns the Author that will be written to the workbook.  
            </summary>
            <remarks>
            When MS Excel writes a workbook this is the user name, which is the name you entered
            when you installed MS Excel.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook.m_fileVersion">
            <summary>
            Internal storage for the FileVersion property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.FileVersion">
            <summary>
            Sets/gets the file version that the spreadsheet will be saved in.
            </summary>
            <remarks>
            After set FileFormat property to Xlsx, this property will keep original value.
            </remarks>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook._fileFormat">
            <summary>
            Internal storage for the FileFormat property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.FileFormat">
            <summary>
            Sets/gets the file format that the spreadsheet will be saved in.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.OpenXmlStandard">
            <summary>
            Gets or sets the level of Open XML document conformance on exporting with Xlsx file format.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.UseCompression">
            <summary>
            Gets or sets the value indicating should compression be used on exporting with Xlsx file format.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook.m_ProtectWorkBookStructure">
            <summary>
            Internal storage for ProtectWorkBookStructure property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.ProtectWorkBookStructure">
            <summary>
             Sets/gets the protection state for a sheet or workbook.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook.m_ProtectWorkbookWindows">
            <summary>
            Internal storage for ProtectWorkbookWindows property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.ProtectWorkbookWindows">
            <summary>
            Sets/gets an option from the Protect Workbook dialog box.  If this property is set to 
            true, Excel will not let the user add, delete, reorder, or rename sheets in the workbook.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook._protectWorkbookPassword">
            <summary>
            Internal storage for ProtectWorkbookPassword property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.ProtectWorkbookPassword">
            <summary>
            Sets/gets the password for protecting the elements in workbook.
            </summary>
            <remarks>
            The password will take effect when one of ProtectWorkbookWindows and ProtectWorkBookStructure
            property is true.
            </remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.SharedStrings">
            <summary>
            The SharedString collection.
            </summary>
        </member>
        <member name="F:GrapeCity.SpreadBuilder.Workbook._security">
            <summary>
            Represents Security property.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.Security">
            <summary>
            Returns a <see cref="T:GrapeCity.SpreadBuilder.DDSecurity"/> object for initializing document security.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.Save(System.IO.Stream)">
            <summary>
            Saves the current spreadsheet workbook to the specified Stream.
            </summary>
            <param name="outputStream">
            The output stream to save the workbook data to. The stream might be a MemoryStream, or HttpResponse.OutputStream (for example).
            </param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.Save(System.String)">
            <summary>
            Saves the current spreadsheet data to the specified stream.
            </summary>
            <param name="sFileName">A valid filename.</param>
            <remarks>
            Permissions to write to the specified file are Demanded.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.PreExport">
            <summary>
            This method will be invoke before exporting.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.VerifyPasswordLength">
            <summary>
            Verify the password's size according current file version.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.VerifyProtectWorkbookPasswordLength">
            <summary>
            Verify the ProtectWorkbookPassword's size according current file version.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.VerifyWorksheets">
            <summary>
            Verify the each worksheet according current file version.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.VerifyWorksheetImages(System.Collections.Generic.IList{GrapeCity.SpreadBuilder.Imaging.OBJImage})">
            <summary>
            Verify the worksheet's images according current file version.
            </summary>
            <param name="arrayList">the images</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.VerifyWorksheetLines(System.Collections.Generic.IList{GrapeCity.SpreadBuilder.Imaging.OBJ_line})">
            <summary>
            Verify the worksheet's lines according current file version.
            </summary>
            <param name="arrayList">the lines</param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.VerifyWorksheetSize(GrapeCity.SpreadBuilder.DDSheet)">
            <summary>
            Verify the worksheet's size according current file version.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.GetGroupIDFromSheetPtr(GrapeCity.SpreadBuilder.DDSheet)">
            <summary>
            Returns the the Group id from the specified sheet.
            That is, the specified sheet is which Sheet number in the set of DDSheets
            which contain at least one OBJ_meta or OBJ_line.
            </summary>
            <param name="psheet"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.GetRefCount(System.Byte[])">
            <summary>
            Gets reference count for particular unique image identified by CRC
            </summary>
            <param name="crc"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.GetOBJImageAt(System.Int32)">
            <summary>
            Map Images in all sheets into an accessible list.
            </summary>
            <param name="cmeta"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.GetCountofSheetswithOBJ_metasorOBJ_lines">
            <summary>
            Returns the number of DDSheet's that have at least one metafile or line in it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.GetSheetslinemetaCount">
            <summary>
            Returns the total count of metafiles and lines that are contained in all of the sheets 
            in the Sheets collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.GetSheetsmetaCount">
            <summary>
            Returns the total count of metafiles that are contained in all of the sheets in the Sheets collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.getNumberofOBJ_metasandOBJ_linesOnLastSheetWithOBJ_metasandOBJ_lines">
            <summary>
            This is just some really goofy function from c++ that returns 
            the value of CountMSOObj() from the last sheet in the collection that has a nonzero 
            value for CountMSOObj().
            </summary>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.GetChildSpidFromGroupSpid(System.Int32)">
             <summary>
            consider the set of sheets that contain metafiles and lines.  the nth sheet of this set 
            has how many metafiles and lines??  this will return that value, add 1 to obtain the
            table transform for the FDGG record.
             </summary>
             <param name="dgid"></param>
             <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.GetColor(System.UInt16)">
            <summary>
            Takes color index, returns COLORREF Color.
            </summary>
            <param name="colorIndex"></param>
            <returns></returns>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.ColorTranslationTable">
            <summary>
            Color index mapping array.  This is necessary as the color array 
            is compacted before saving to reduce size and remove duplicates.  
            Use the old index as the index to this array, 
            and the array should return the new for that color index.
            </summary>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.UniqueXfIndexList">
            <summary>
            The array store the compacted and patched xf index list.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.MakeColorTranslationTableSimple">
            <summary>
            First, to understand this function it is important that you understand colors are 
            stored and accessed in BIFF.  All colors in BIFF are stored a single time in a global �
            color palette array� and the user�s of the color (mostly on XF records, which is XFRecord8 
            in this source) only stores an index to the color in this �color palette array�.  At 
            runtime, before saving, we build this palette in the �m_customColors� array.  
            Just before saving due to limitations in the BIFF format MakeColorTanslationTable will 
            take colors that exceed the maximum color count and find their closest match, and put 
            the new index to the color in the iaColorTranslations array.
            The absolute maximum color count in BIFF 7-8 is 119 as the XF record structure has only 
            7 bits to store the color index in and all Color idnexes must have 8 added to them 
            before saving (done in XFRecords.WriteToBiff).  In BIFF versions 2-4 the maximum is 16.
            </summary>
            <returns>
            The returned array works as follows:  You use the index of the color in the custom 
            colors array (the index determined at runtime as the spreadsheet is built) as the index 
            to the iaColorTranslation array.  The ushort value at this index in iaColorTranslations 
            will be the index to the color in the new �color palette array� that is saved to the 
            BIFF output.
            </returns>
            <remarks>
            This function is a simplified version of MakeColorTranslationTableComplex that may through assertions (not exceptions) if the color palette contains more colors than the BIFF format supports.  It will through assertions and just remove any color that does not fit in the color palette.  This is going to yield odd colors in a sheet when this occurs.  We need to fix it to find the closest match and reindex iaColorTanslations with that. Right now the lost colors will be reindexed with 0, which is always black.
            We could also improve this function by enumerating XF records and finding which colors are not in use anywhere, and remove those.  We do this with CompactAndPatch on XFRecords.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.MakeColorTranslationTableComplex">
            <summary>
            </summary>
            <param name="iaColorTranlations">
            iaColorTranslations works as follows:  You use the index of the color in the custom 
            colors array (the index determined at runtime as the spreadsheet is built) as the index 
            to the iaColorTranslation array.  The ushort value at this index in iaColorTranslations 
            will be the index to the color in the new �color palette array� that is saved to the 
            BIFF output.
            </param>
            <remarks>
            *This function is broken !!* 
            Even with a small list of colors (e.g. 5 colors) this 
            function doesn't properly map the indexes.  I spent to many days trying to fix it, so I 
            just rewrote my own simplified version named MakeColorTranslationTableSimple and it 
            worked, so I moved on.  Plan on getting back to this function with Ferhat sometime to 
            fix it.
            </remarks>
        </member>
        <member name="P:GrapeCity.SpreadBuilder.Workbook.XFRecords">
            <summary>
            Returns the XFRecords collection for the workbook.
            </summary>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XFTrans_SetProperty(System.UInt16,GrapeCity.SpreadBuilder.Style.XFPropID,System.Int16)">
            <summary>
            Set Horzontal Alignment, Vertical Alignment, TextRotation with XFRecords.
            </summary>
            <param name="baseXF"></param>
            <param name="propid"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XF_GetProperty(System.UInt16,GrapeCity.SpreadBuilder.Style.XFPropID)">
            <summary>
            Returns the value of the specified property on the specified XF record.
            Works with hAlighment, vAlighment, and TextRotation properties.
            </summary>
            <param name="xfIndex"></param>
            <param name="propid">
            Should be XFPropID.ALIGNMENT, XFPropID.VERTALIGNMENT, or XFPropID.TEXTROTATION.
            </param>
            <returns>
            The actual value of the specified property on the XF record.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.GetColorIndexFromColor(GrapeCity.SpreadBuilder.Style.COLORREF)">
            <summary>
            Searches the m_customColors array for the specified color.  If color is found, the 
            index to that color is returned.  If color is not found, it is added and the index of the 
            newly added color is returned.
            </summary>
            <param name="color">The color you want an index for.</param>
            <returns>The index to that color in the custom color array.</returns>
            <remarks>
            Note that the only difference between GetColorIndexFromColor, and GetColorIndexFromColor7Bit is that GetColorIndexFromColor7Bit will force the max color count to be less than 128 by finding the closest matching color.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.GetColorIndexFromColor7Bit(GrapeCity.SpreadBuilder.Style.COLORREF)">
            <summary>
            Searches the m_customColors array for the specified color.  If color is found, the 
            index to that color is returned.  If color is not found and there are less than 128 
            colors, the specified color is added and the index of the newly added color is 
            returned.  If there are already 128 or more colors, then the closest match to the 
            specified color is found, and the index to that closest matching color is returned.
            </summary>
            <param name="color">The color you want an index for.</param>
            <returns>The index to that color in the custom color array.</returns>
            <remarks>
            Note that the only difference between GetColorIndexFromColor, and GetColorIndexFromColor7Bit is that GetColorIndexFromColor7Bit will force the max color count to be less than 128 by finding the closest matching color.
            </remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XFTrans_SetFillForeColor(System.UInt16,System.Drawing.Color)">
            <summary>
            Sets the fillforecolor on the XF record at the specified index.  May create a new XF record.
            </summary>
            <param name="baseXF"></param>
            <param name="color"></param>
            <returns>
            The index to the XF record that has the properties of both the XF record at the specified index (baseXF), except with the specified fillforecolor.
            </returns>
            <remarks>Color.Transparent or Color.Empty can be used to turn the color off.</remarks>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XF_GetFillColor(System.UInt16)">
            <summary>
            Gets the FillColor for the XF record at the specified index.
            </summary>
            <param name="xfIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XFTrans_SetTextColor(System.UInt16,GrapeCity.SpreadBuilder.Style.COLORREF)">
            <summary>
            Ultimiately used by DDCell.ForeColor.set.
            </summary>
            <param name="baseXF"></param>
            <param name="color"></param>
            <returns>
            The index to the XF record (used with WorkBook.XFRecords.GetRec) that has the 
            properties of the baseXF, as well as the specified TextColor/ForeColor.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XF_GetTextColor(System.UInt16)">
            <summary>
            Ultimately used by DDCell.ForeColor.get.
            </summary>
            <param name="xfIndex"></param>
            <returns>
            The TextColor/ForeColor on the specified XFIndex.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XFTrans_GetFontIndexByXFIndex(System.UInt16)">
            <summary>
            Ultimately this is used by DDCell.FillColor.set.
            </summary>
            <param name="baseXF"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XFTrans_SetFontName(System.UInt16,System.String)">
            <summary>
            Ultimately used by DDCell to set a FontName.
            </summary>
            <param name="baseXF"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XF_GetFontName(System.UInt16)">
            <summary>
            Ultimately used by DDCell to retrieve a font name.
            Gets a the XFRecord at the specified XF index, calls ExcelFonts.get_FontName to return the font at the font index found on the XF.
            </summary>
            <param name="baseXF"></param>
            <param name="sVal"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XFTrans_SetFontBold(System.UInt16,System.Boolean)">
            <summary>
            Gets the XFRecord at the specified index.  
            Uses ExcelFonts.Trans_FontBold to properly set the bold/lfWeight of the ExcelFont used by the specified XF record.
            </summary>
            <param name="baseXF"></param>
            <param name="flag"></param>
            <returns>The index to the XF Record with the settings of the specified XF record and bold value.</returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XF_MapFontXF(GrapeCity.SpreadBuilder.Style.XFRecord8,System.UInt16)">
            <summary>
            Creates a new XFRecord, set's it's fontIndex property, uses XFRecords.MapXFRecord to properly obtain/create the XF record with the specified font.
            </summary>
            <param name="prevXF"></param>
            <param name="newFontIndex"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XF_GetFontBold(System.UInt16)">
            <summary>
            Uses ExcelFonts.get_FontBold to determine if the font used by the XF at the specifed index is bold.
            </summary>
            <param name="baseXF"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XFTrans_SetFontItalic(System.UInt16,System.Boolean)">
            <summary>
            Returns an index to an XF record that has the properties of the specified baseXF, and the specified font italic setting.
            </summary>
            <param name="baseXF"></param>
            <param name="flag"></param>
            <returns>
            Returns an index to an XF record that has the properties of the specified baseXF, and the specified font italic setting.
            </returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XF_GetFontItalic(System.UInt16)">
            <summary>
            Retrieves the font for the XF record at the specified index, and returns the value of that font's member property.
            Ultimately used by DDCell for it's FontItalic.get property.
            </summary>
            <param name="baseXF"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XFTrans_SetFontSize(System.UInt16,System.Double)">
            <summary>
            Sets font size/height in points.  Accurate to the nearest half of a point.
            </summary>
            <param name="baseXF"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XF_GetFontSize(System.UInt16)">
            <summary>
            Returns the font size in points.  Accurate to the nearest half of a point.
            </summary>
            <param name="baseXF"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XFTrans_SetFontUnderlineStyle(System.UInt16,GrapeCity.SpreadBuilder.Style.FontUnderlineStyles)">
            <summary>
            Uses XLFonts.Trans_FontUnderlineStyle to setup a font with the properties of the font for the specified XF record, but with the specified underline style.
            </summary>
            <param name="baseXF"></param>
            <param name="style"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XF_GetFontUnderlineStyle(System.UInt16)">
            <summary>
            Uses ExcelFonts.get_FontUnderlineStyle to retrieve the underline style of the font used by the specified XF record.
            </summary>
            <param name="baseXF"></param>
            <returns></returns>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XFTrans_SetFontStrikeOut(System.UInt16,System.Boolean)">
            <summary>
            Uses XLFonts.Trans_FontStrikeOut to setup a font with the properties of the font for the specified XF record, but with the specified underline style.
            </summary>
            <param name="baseXF"></param>
            <param name="style"></param>
        </member>
        <member name="M:GrapeCity.SpreadBuilder.Workbook.XF_GetFontStrikeOut(System.UInt16)">
            <summary>
            Uses ExcelFonts.get_FontStrikeOut to retrieve the underline style of the font used by the specified XF record.
            </summary>
            <param name="baseXF"></param>
            <returns></returns>
        </member>
        <member name="T:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData">
            <summary>
            https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cfb/05060311-bfce-4b12-874d-71fd4ce63aea
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.HeaderSignature">
            <summary>
            Header Signature (8 bytes): Identification signature for the compound file structure, and MUST be set to the value 0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.HeaderClsId">
            <summary>
            Header CLSID (16 bytes): Reserved and unused class ID that MUST be set to all zeroes (CLSID_NULL).
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.MinorVersion">
            <summary>
            Minor Version (2 bytes): Version number for nonbreaking changes. This field SHOULD be set to 0x003E if the major version field is either 0x0003 or 0x0004.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.MajorVersion">
            <summary>
            Major Version (2 bytes): Version number for breaking changes. This field MUST be set to either 0x0003 (version 3) or 0x0004 (version 4).
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.ByteOrder">
            <summary>
            Byte Order (2 bytes): This field MUST be set to 0xFFFE. This field is a byte order mark for all integer fields, specifying little-endian byte order.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.SectorShift">
            <summary>
            Sector Shift (2 bytes): This field MUST be set to 0x0009, or 0x000c, depending on the Major Version field. This field specifies the sector size of the compound file as a power of 2.
            If Major Version is 3, the Sector Shift MUST be 0x0009, specifying a sector size of 512 bytes.
            If Major Version is 4, the Sector Shift MUST be 0x000C, specifying a sector size of 4096 bytes.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.MiniSectorShift">
            <summary>
            Mini Sector Shift (2 bytes): This field MUST be set to 0x0006. This field specifies the sector size of the Mini Stream as a power of 2. The sector size of the Mini Stream MUST be 64 bytes.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.Reserved">
            <summary>
            Reserved (6 bytes): This field MUST be set to all zeroes.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.NumberOfDirectorySectors">
            <summary>
            Number of Directory Sectors (4 bytes): This integer field contains the count of the number of directory sectors in the compound file.
            If Major Version is 3, the Number of Directory Sectors MUST be zero.This field is not supported for version 3 compound files.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.NumberOfFatSectors">
            <summary>
            Number of FAT Sectors (4 bytes): This integer field contains the count of the number of FAT sectors in the compound file.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.FirstDirectorySectorLocation">
            <summary>
            First Directory Sector Location (4 bytes): This integer field contains the starting sector number for the directory stream.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.TransactionSignatureNumber">
            <summary>
            Transaction Signature Number (4 bytes): This integer field MAY contain a sequence number that is incremented every time the compound file is saved by an implementation that supports file transactions. This is the field that MUST be set to all zeroes if file transactions are not implemented.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.MiniStreamCutoffSize">
            <summary>
            Mini Stream Cutoff Size (4 bytes): This integer field MUST be set to 0x00001000. This field specifies the maximum size of a user-defined data stream that is allocated from the mini FAT and mini stream, and that cutoff is 4,096 bytes. Any user-defined data stream that is greater than or equal to this cutoff size must be allocated as normal sectors from the FAT.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.FirstMiniFatSectorLocation">
            <summary>
            First Mini FAT Sector Location (4 bytes): This integer field contains the starting sector number for the mini FAT.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.NumberOfMiniFatSectors">
            <summary>
            Number of Mini FAT Sectors (4 bytes): This integer field contains the count of the number of mini FAT sectors in the compound file.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.FirstDiFatSectorLocation">
            <summary>
            First DIFAT Sector Location (4 bytes): This integer field contains the starting sector number for the DIFAT.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.NumberOfDiFatSectors">
            <summary>
            Number of DIFAT Sectors (4 bytes): This integer field contains the count of the number of DIFAT sectors in the compound file.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundFileHeaderData.DiFatSectors">
            <summary>
            DIFAT (436 bytes): This array of 32-bit integer fields contains the first 109 FAT sector locations of the compound file.
            For version 4 compound files, the header size (512 bytes) is less than the sector size (4,096 bytes), so the remaining part of the header (3,584 bytes) MUST be filled with all zeroes.
            </summary>
        </member>
        <member name="T:GrapeCity.CompoundDocument.GcExcel.FatSpecialSectorId">
            <summary>
            Each sector, except for the header, is identified by a nonnegative, 32-bit sector number. The following sector numbers above 0xFFFFFFFA are reserved and MUST NOT be used to identify the location of a sector in a compound file.
            </summary>
        </member>
        <member name="F:GrapeCity.CompoundDocument.GcExcel.FatSpecialSectorId.MaxRegular">
            <summary>
            Maximum regular sector number.
            </summary>
        </member>
        <member name="F:GrapeCity.CompoundDocument.GcExcel.FatSpecialSectorId.NotAcceptable">
            <summary>
            Reserved for future use.
            </summary>
        </member>
        <member name="F:GrapeCity.CompoundDocument.GcExcel.FatSpecialSectorId.DiFatSector">
            <summary>
            Specifies a DIFAT sector in the FAT.
            </summary>
        </member>
        <member name="F:GrapeCity.CompoundDocument.GcExcel.FatSpecialSectorId.FatSector">
            <summary>
            Specifies a FAT sector in the FAT.
            </summary>
        </member>
        <member name="F:GrapeCity.CompoundDocument.GcExcel.FatSpecialSectorId.EndOfChain">
            <summary>
            End of a linked chain of sectors.
            </summary>
        </member>
        <member name="F:GrapeCity.CompoundDocument.GcExcel.FatSpecialSectorId.FreeSector">
            <summary>
            Specifies an unallocated sector in the FAT, Mini FAT, or DIFAT.
            </summary>
        </member>
        <member name="T:GrapeCity.CompoundDocument.GcExcel.CompoundFileData">
            <summary>
            [MS-CFB]: Compound File Binary File Format 9.0 (9/12/2018)
            <br/>
            <a href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cfb/53989ce4-7b05-4f8d-829b-d08d6148375b" />
            </summary>
        </member>
        <member name="M:GrapeCity.CompoundDocument.GcExcel.CompoundFileData.CreateAndInitialize">
            <summary>
            Creates an initialized compound file.
            </summary>
        </member>
        <member name="T:GrapeCity.CompoundDocument.GcExcel.RedBlackTreeItem`1">
            <summary>
            https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cfb/d30e462c-5f8a-435b-9c4c-cc0b9ea89956
            </summary>
        </member>
        <member name="T:GrapeCity.CompoundDocument.GcExcel.RedBlackTreeItem">
            <summary>
            https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cfb/d30e462c-5f8a-435b-9c4c-cc0b9ea89956
            and
            https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cfb/60fe8611-66c3-496b-b70d-a504c94c9ace
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.RedBlackTreeItem.TreeNodeColor">
            <summary>
            Color Flag (1 byte): This field MUST be 0x00 (red) or 0x01 (black). All other values are not valid.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.RedBlackTreeItem.LeftSibling">
            <summary>
            Left Sibling ID (4 bytes): This field contains the stream ID of the left sibling. 
            If there is no left sibling, the field MUST be set to NOSTREAM (0xFFFFFFFF).
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.RedBlackTreeItem.RightSibling">
            <summary>
            Right Sibling ID (4 bytes): This field contains the stream ID of the right sibling. 
            If there is no right sibling, the field MUST be set to NOSTREAM (0xFFFFFFFF).
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.RedBlackTreeItem.Index">
            <summary>
            Child ID (4 bytes): This field contains the stream ID of a child object. 
            If there is no child object, including all entries for stream objects, 
            the field MUST be set to NOSTREAM (0xFFFFFFFF).
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.RedBlackTreeItem.AddedToTree">
            <summary>
            Temp state that indicates whether this node was added to a tree.
            </summary>
        </member>
        <member name="T:GrapeCity.CompoundDocument.GcExcel.RedBlackTreeHelper">
            <summary>
            https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cfb/d30e462c-5f8a-435b-9c4c-cc0b9ea89956
            </summary>
        </member>
        <member name="M:GrapeCity.CompoundDocument.GcExcel.RedBlackTreeHelper.DescendantsAndSelf``1(``0)">
            <summary>
            Returns a collection of elements that contain this element,
            and all descendant elements of this element, from root to leaves.
            </summary>
            <typeparam name="T">The type of tree node</typeparam>
            <param name="root">The root node</param>
            <returns>A collection of elements that contain this element,
            and all descendant elements of this element, from root to leaves.
            </returns>
        </member>
        <member name="M:GrapeCity.CompoundDocument.GcExcel.RedBlackTreeHelper.AddRange``1(``0,System.Collections.Generic.List{``0})">
            <summary>
            Adds all nodes to the specified red-black tree.
            </summary>
            <typeparam name="T">The type of tree node</typeparam>
            <param name="root">The root of tree</param>
            <param name="children">The nodes to add</param>
        </member>
        <member name="T:GrapeCity.CompoundDocument.GcExcel.CompoundStorageRecord">
            <summary>
            Compound File Directory Entry
            https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cfb/60fe8611-66c3-496b-b70d-a504c94c9ace
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundStorageRecord.Name">
            <summary>
            Directory Entry Name (64 bytes) and 
            Directory Entry Name Length (2 bytes)
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundStorageRecord.ObjectType">
            <summary>
            Object Type (1 byte): This field MUST be 0x00, 0x01, 0x02, or 0x05, 
            depending on the actual type of object. 
            All other values are not valid.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundStorageRecord.ClsID">
            <summary>
            CLSID (16 bytes): This field contains an object class GUID, 
            if this entry is for a storage object or root storage object.
            For a stream object, this field MUST be set to all zeroes. 
            A value containing all zeroes in a storage or
            root storage directory entry is valid, and indicates that
            no object class is associated with the storage. 
            If an implementation of the file format enables applications to 
            create storage objects without explicitly setting an object class GUID, 
            it MUST write all zeroes by default. 
            If this value is not all zeroes, 
            the object class GUID can be used as a parameter to start applications.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundStorageRecord.StateBits">
            <summary>
            This field contains the user-defined flags 
            if this entry is for a storage object or root storage object. 
            For a stream object, this field SHOULD be set to all zeroes because 
            many implementations provide no way for applications to 
            retrieve state bits from a stream object. 
            If an implementation of the file format enables applications to 
            create storage objects without explicitly setting state bits, 
            it MUST write all zeroes by default.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundStorageRecord.CreationTime">
            <summary>
            Creation Time (8 bytes): 
            This field contains the creation time for a storage object, 
            or all zeroes to indicate that the creation time of
            the storage object was not recorded. 
            The Windows FILETIME structure is used to represent this field in UTC.
            For a stream object, this field MUST be all zeroes. 
            For a root storage object, this field MUST be all zeroes, 
            and the creation time is retrieved or set on the compound file itself.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundStorageRecord.ModifiedTime">
            <summary>
            Modified Time (8 bytes): 
            This field contains the modification time for a storage object,
            or all zeroes to indicate that the modified time of 
            the storage object was not recorded. 
            The Windows FILETIME structure is used to represent this field in UTC.
            For a stream object, this field MUST be all zeroes. 
            For a root storage object, this field MAY be set to all zeroes,
            and the modified time is retrieved or set on the compound file itself.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundStorageRecord.StartingSectorLocation">
            <summary>
            Starting Sector Location (4 bytes): 
            This field contains the first sector location if this is a stream object. 
            For a root storage object, this field MUST contain 
            the first sector of the mini stream, if the mini stream exists. 
            For a storage object, this field MUST be set to all zeroes.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundStorageRecord.StreamSize">
            <summary>
            Stream Size (8 bytes): 
            This 64-bit integer field contains the size of the user-defined data 
            if this is a stream object. 
            For a root storage object, this field contains the size of the mini stream. 
            For a storage object, this field MUST be set to all zeroes.
            </summary>
        </member>
        <member name="P:GrapeCity.CompoundDocument.GcExcel.CompoundStorageRecord.Stream">
            <summary>
            Cached stream for high level APIs use.
            </summary>
        </member>
        <member name="T:GrapeCity.CompoundDocument.IStorage">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="T:GrapeCity.CompoundDocument.Managed.Directory">
            <summary>
            Summary description for Storage.
            </summary>
        </member>
        <member name="T:GrapeCity.CompoundDocument.Managed.DirectoryEntry">
            <summary>
            Represents storage or stream
            </summary>
        </member>
        <member name="T:GrapeCity.CompoundDocument.Managed.Document">
            <summary>
            Summary description for Storage.
            </summary>
        </member>
        <member name="M:GrapeCity.CompoundDocument.Managed.Document.#ctor">
            <summary>
            Use this constructor when you want to create new document
            </summary>
        </member>
        <member name="M:GrapeCity.CompoundDocument.Managed.Document.#ctor(System.String)">
            <summary>
            Use this constructor when you want to open existing document
            </summary>
            <param name="fileName">name of file containing compound document</param>
        </member>
        <member name="T:GrapeCity.CompoundDocument.Managed.DocumentWriter">
            <summary>
            Summary description for DocumentWriter.
            </summary>
        </member>
        <member name="F:GrapeCity.CompoundDocument.Managed.Header.Fat1_109">
            Arrays (and other objects) offset must be multiple of 8 (for x64 target platform)
        </member>
        <member name="P:GrapeCity.CompoundDocument.Managed.Header.FatSectors">
            <summary>
            Easy way to access FAT as a single array (Fat0 | Fat1_109)
            </summary>
        </member>
        <member name="F:GrapeCity.CompoundDocument.StorageType.ContentOnly">
            <summary>
            Old managed Compound Document implementation: doesn't support all features, for XLS format.
            </summary>
        </member>
        <member name="F:GrapeCity.CompoundDocument.StorageType.EncryptionOnly">
            <summary>
            GcExcel implementation: doesn't support all features, for encryption.
            </summary>
        </member>
        <member name="F:GrapeCity.CompoundDocument.StorageType.NativeContent">
            <summary>
            Native implementation: for XKS95 (BIFF7).
            </summary>
        </member>
        <member name="T:GrapeCity.CompoundDocument.Storage">
            <summary>
            For internal use only.
            </summary>
        </member>
        <member name="M:GrapeCity.CompoundDocument.Storage.CreateStorage(GrapeCity.CompoundDocument.StorageType)">
            <summary>
            We have 3 storage implementations: native and 2 fast incomplete.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AssemblyNames">
            <summary>
            Contains strong assembly names and such
            </summary>
        </member>
        <member name="T:NPOI.POIFS.Common.POIFSBigBlockSize">
            <p>A class describing attributes of the Big Block Size</p>
        </member>
        <member name="M:NPOI.POIFS.Common.POIFSBigBlockSize.GetHeaderValue">
            Returns the value that Gets written into the 
             header.
            Is the power of two that corresponds to the
             size of the block, eg 512 => 9
        </member>
        <member name="T:NPOI.POIFS.Common.POIFSConstants">
            <summary>
            A repository for constants shared by POI classes.
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="F:NPOI.POIFS.Common.POIFSConstants.SMALLER_BIG_BLOCK_SIZE">
            Most files use 512 bytes as their big block size 
        </member>
        <member name="F:NPOI.POIFS.Common.POIFSConstants.LARGER_BIG_BLOCK_SIZE">
            Some use 4096 bytes 
        </member>
        <member name="F:NPOI.POIFS.Common.POIFSConstants.BIG_BLOCK_SIZE">
            Most files use 512 bytes as their big block size 
        </member>
        <member name="F:NPOI.POIFS.Common.POIFSConstants.MINI_BLOCK_SIZE">
            Most files use 512 bytes as their big block size 
        </member>
        <member name="F:NPOI.POIFS.Common.POIFSConstants.SMALL_BLOCK_SIZE">
            How big a block in the small block stream is. Fixed size 
        </member>
        <member name="F:NPOI.POIFS.Common.POIFSConstants.PROPERTY_SIZE">
            How big a single property is 
        </member>
        <member name="F:NPOI.POIFS.Common.POIFSConstants.BIG_BLOCK_MINIMUM_DOCUMENT_SIZE">
            The minimum size of a document before it's stored using 
             Big Blocks (normal streams). Smaller documents go in the 
             Mini Stream (SBAT / Small Blocks)
        </member>
        <member name="F:NPOI.POIFS.Common.POIFSConstants.LARGEST_REGULAR_SECTOR_NUMBER">
            The highest sector number you're allowed, 0xFFFFFFFA 
        </member>
        <member name="F:NPOI.POIFS.Common.POIFSConstants.FAT_SECTOR_BLOCK">
            Indicates the sector holds a FAT block (0xFFFFFFFD) 
        </member>
        <member name="F:NPOI.POIFS.Common.POIFSConstants.DIFAT_SECTOR_BLOCK">
            Indicates the sector holds a DIFAT block (0xFFFFFFFC) 
        </member>
        <member name="F:NPOI.POIFS.Common.POIFSConstants.END_OF_CHAIN">
            Indicates the sector is the end of a chain (0xFFFFFFFE) 
        </member>
        <member name="F:NPOI.POIFS.Common.POIFSConstants.UNUSED_BLOCK">
            Indicates the sector is not used (0xFFFFFFFF) 
        </member>
        <member name="F:NPOI.POIFS.Common.POIFSConstants.OOXML_FILE_HEADER">
            The first 4 bytes of an OOXML file, used in detection 
        </member>
        <member name="F:NPOI.POIFS.Common.POIFSConstants.RAW_XML_FILE_HEADER">
            The first 5 bytes of a raw XML file, used in detection 
        </member>
        <member name="T:NPOI.POIFS.FileSystem.BATManaged">
            <summary>
            This interface defines behaviors for objects managed by the Block
            Allocation Table (BAT).
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.BATManaged.CountBlocks">
            <summary>
            Gets the number of BigBlock's this instance uses
            </summary>
            <value>count of BigBlock instances</value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.BATManaged.StartBlock">
            <summary>
            Sets the start block for this instance
            </summary>
            <value>index into the array of BigBlock instances making up the the filesystem</value>
        </member>
        <member name="T:NPOI.POIFS.FileSystem.BlockStore">
            <summary>
            This abstract class describes a way to read, store, chain
            and free a series of blocks (be they Big or Small ones)
            </summary>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.BlockStore.GetBlockStoreBlockSize">
            <summary>
            Returns the size of the blocks managed through the block store.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.BlockStore.GetBlockAt(System.Int32)">
            <summary>
            Load the block at the given offset.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.BlockStore.TryGetBlockAt(System.Int32,NPOI.Util.ByteBuffer@)">
            <summary>
            Tries to load the block at the given offset.
            </summary>
            <param name="offset">An offset in the buffer, 0 or greater.</param>
            <param name="byteBuffer">The resulting buffer, if possible.</param>
            <returns>True if it was possible to load the block from the specified offset, false if the offset is beyond the size of the buffer.</returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.BlockStore.CreateBlockIfNeeded(System.Int32)">
            <summary>
            Extends the file if required to hold blocks up to
            the specified offset, and return the block from there.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.BlockStore.GetBATBlockAndIndex(System.Int32)">
            <summary>
            Returns the BATBlock that handles the specified offset,
            and the relative index within it
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.BlockStore.GetNextBlock(System.Int32)">
            <summary>
            Works out what block follows the specified one.
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.BlockStore.SetNextBlock(System.Int32,System.Int32)">
            <summary>
            Changes the record of what block follows the specified one.
            </summary>
            <param name="offset"></param>
            <param name="nextBlock"></param>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.BlockStore.GetFreeBlock">
            <summary>
            Finds a free block, and returns its offset.
            This method will extend the file/stream if needed, and if doing
             so, allocate new FAT blocks to address the extra space.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.BlockStore.GetChainLoopDetector">
            <summary>
            Creates a Detector for loops in the chain 
            </summary>
            <returns></returns>
        </member>
        <member name="T:NPOI.POIFS.FileSystem.ChainLoopDetector">
            <summary>
            Used to detect if a chain has a loop in it, so
             we can bail out with an error rather than
             spinning away for ever... 
            </summary>
        </member>
        <member name="T:NPOI.POIFS.FileSystem.DirectoryEntry">
            <summary>
            This interface defines methods specific to Directory objects
            managed by a Filesystem instance.
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DirectoryEntry.Entries">
            <summary>
            get an iterator of the Entry instances contained directly in
            this instance (in other words, children only; no grandchildren
            etc.)
            </summary>
            <value>The entries.never null, but hasNext() may return false
            immediately (i.e., this DirectoryEntry is empty). All
            objects retrieved by next() are guaranteed to be
            implementations of Entry.</value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DirectoryEntry.EntryNames">
            <summary>
            get the names of all the Entries contained directly in this
            instance (in other words, names of children only; no grandchildren etc).
            </summary>
            <value>the names of all the entries that may be retrieved with
            getEntry(String), which may be empty (if this DirectoryEntry is empty
            </value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DirectoryEntry.IsEmpty">
             <summary>
            is this DirectoryEntry empty?
             </summary>
             <value><c>true</c> if this instance contains no Entry instances; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DirectoryEntry.EntryCount">
            <summary>
            find out how many Entry instances are contained directly within
            this DirectoryEntry
            </summary>
            <value>number of immediately (no grandchildren etc.) contained
            Entry instances</value>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.DirectoryEntry.GetEntry(System.String)">
            <summary>
            get a specified Entry by name
            </summary>
            <param name="name">the name of the Entry to obtain.</param>
            <returns>the specified Entry, if it is directly contained in
            this DirectoryEntry</returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.DirectoryEntry.CreateDocument(System.String,System.IO.Stream)">
            <summary>
            Create a new DocumentEntry
            </summary>
            <param name="name">the name of the new DocumentEntry</param>
            <param name="stream">the Stream from which to Create the new DocumentEntry</param>
            <returns>the new DocumentEntry</returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.DirectoryEntry.CreateDocument(System.String,System.Int32)">
            <summary>
            Create a new DocumentEntry; the data will be provided later
            </summary>
            <param name="name">the name of the new DocumentEntry</param>
            <param name="size">the size of the new DocumentEntry</param>
            <param name="writer">BeforeWriting event handler</param>
            <returns>the new DocumentEntry</returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.DirectoryEntry.CreateDirectory(System.String)">
            <summary>
            Create a new DirectoryEntry
            </summary>
            <param name="name">the name of the new DirectoryEntry</param>
            <returns>the name of the new DirectoryEntry</returns>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DirectoryEntry.StorageClsid">
            <summary>
            Gets or sets the storage ClassID.
            </summary>
            <value>The storage ClassID.</value>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.DirectoryEntry.HasEntry(System.String)">
            <summary>
            Checks if entry with specified name present
            </summary>
            <param name="name">entry name</param>
            <returns>true if have</returns>
        </member>
        <member name="T:NPOI.POIFS.FileSystem.DirectoryNode">
            <summary>
            Simple implementation of DirectoryEntry
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.DirectoryNode.CreatePOIFSDocumentReader(System.String)">
            <summary>
            open a document in the directory's entry's list of entries
            </summary>
            <param name="documentName">the name of the document to be opened</param>
            <returns>a newly opened DocumentStream</returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.DirectoryNode.ChangeName(System.String,System.String)">
            <summary>
            Change a contained Entry's name
            </summary>
            <param name="oldName">the original name</param>
            <param name="newName">the new name</param>
            <returns>true if the operation succeeded, else false</returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.DirectoryNode.DeleteEntry(NPOI.POIFS.FileSystem.EntryNode)">
            <summary>
            Deletes the entry.
            </summary>
            <param name="entry">the EntryNode to be Deleted</param>
            <returns>true if the entry was Deleted, else false</returns>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DirectoryNode.Path">
            <summary>
            Gets the path.
            </summary>
            <value>this directory's path representation</value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DirectoryNode.FileSystem">
            <summary>
            return the filesystem that this belongs to
            TODO: Temporary workaround during #56791
            </summary>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DirectoryNode.NFileSystem">
            <summary>
            If this is NPOIFS based, return the NPOIFSFileSystem
            that this belong to, otherwise Null if OPOIFS based.
            return the filesystem that this belongs to
            </summary>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DirectoryNode.Entries">
            <summary>
            get an iterator of the Entry instances contained directly in
            this instance (in other words, children only; no grandchildren
            etc.)
            </summary>
            <value>
            The entries.never null, but hasNext() may return false
            immediately (i.e., this DirectoryEntry is empty). All
            objects retrieved by next() are guaranteed to be
            implementations of Entry.
            </value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DirectoryNode.EntryNames">
             get the names of all the Entries contained directly in this
             instance (in other words, names of children only; no grandchildren
             etc).
            
             @return the names of all the entries that may be retrieved with
                     getEntry(String), which may be empty (if this 
                     DirectoryEntry is empty)
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DirectoryNode.IsEmpty">
            <summary>
            is this DirectoryEntry empty?
            </summary>
            <value>
            	<c>true</c> if this instance contains no Entry instances; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DirectoryNode.EntryCount">
            <summary>
            find out how many Entry instances are contained directly within
            this DirectoryEntry
            </summary>
            <value>
            number of immediately (no grandchildren etc.) contained
            Entry instances
            </value>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.DirectoryNode.GetEntry(System.String)">
            <summary>
            get a specified Entry by name
            </summary>
            <param name="name">the name of the Entry to obtain.</param>
            <returns>
            the specified Entry, if it is directly contained in
            this DirectoryEntry
            </returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.DirectoryNode.CreateDirectory(System.String)">
            <summary>
            Create a new DirectoryEntry
            </summary>
            <param name="name">the name of the new DirectoryEntry</param>
            <returns>the name of the new DirectoryEntry</returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.DirectoryNode.CreateOrUpdateDocument(System.String,System.IO.Stream)">
             Set the contents of a document, creating if needed, 
              otherwise updating. Returns the created / updated DocumentEntry
            
             @param name the name of the new or existing DocumentEntry
             @param stream the InputStream from which to populate the DocumentEntry
            
             @return the new or updated DocumentEntry
            
             @exception IOException
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DirectoryNode.StorageClsid">
            <summary>
            Gets or Sets the storage clsid for the directory entry
            </summary>
            <value>The storage ClassID.</value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DirectoryNode.IsDirectoryEntry">
            <summary>
            Is this a DirectoryEntry?
            </summary>
            <value>true if the Entry Is a DirectoryEntry, else false</value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DirectoryNode.IsDeleteOK">
            <summary>
            extensions use this method to verify internal rules regarding
            deletion of the underlying store.
            </summary>
            <value> true if it's ok to Delete the underlying store, else
            false</value>
        </member>
        <member name="T:NPOI.POIFS.FileSystem.DocumentEntry">
            <summary>
            This interface defines methods specific to Document objects
            managed by a Filesystem instance.
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DocumentEntry.Size">
            <summary>
            get the size of the document, in bytes
            </summary>
            <value>size in bytes</value>
        </member>
        <member name="T:NPOI.POIFS.FileSystem.DocumentInputStream">
            This class provides methods to read a DocumentEntry managed by a
             {@link POIFSFileSystem} or {@link NPOIFSFileSystem} instance.
            It Creates the appropriate one, and delegates, allowing us to
             work transparently with the two.
        </member>
        <member name="F:NPOI.POIFS.FileSystem.DocumentInputStream.EOF">
            returned by read operations if we're at end of document 
        </member>
        <member name="M:NPOI.POIFS.FileSystem.DocumentInputStream.#ctor">
            For use by downstream implementations 
        </member>
        <member name="M:NPOI.POIFS.FileSystem.DocumentInputStream.#ctor(NPOI.POIFS.FileSystem.DocumentEntry)">
            Create an InputStream from the specified DocumentEntry
            
            @param document the DocumentEntry to be read
            
            @exception IOException if the DocumentEntry cannot be opened (like, maybe it has
                           been deleted?)
        </member>
        <member name="M:NPOI.POIFS.FileSystem.DocumentInputStream.Reset">
            Repositions this stream to the position at the time the mark() method was
            last called on this input stream. If mark() has not been called this
            method repositions the stream to its beginning.
        </member>
        <member name="T:NPOI.POIFS.FileSystem.DocumentNode">
            <summary>
            Simple implementation of DocumentEntry
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.DocumentNode.#ctor(NPOI.POIFS.Properties.DocumentProperty,NPOI.POIFS.FileSystem.DirectoryNode)">
             create a DocumentNode. This method Is not public by design; it
             Is intended strictly for the internal use of this package
            
             @param property the DocumentProperty for this DocumentEntry
             @param parent the parent of this entry
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DocumentNode.Size">
             get the zize of the document, in bytes
            
             @return size in bytes
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DocumentNode.IsDocumentEntry">
             Is this a DocumentEntry?
            
             @return true if the Entry Is a DocumentEntry, else false
        </member>
        <member name="P:NPOI.POIFS.FileSystem.DocumentNode.IsDeleteOK">
             extensions use this method to verify internal rules regarding
             deletion of the underlying store.
            
             @return true if it's ok to delete the underlying store, else
                     false
        </member>
        <member name="T:NPOI.POIFS.FileSystem.Entry">
            <summary>
            This interface provides access to an object managed by a Filesystem
            instance. Entry objects are further divided into DocumentEntry and
            DirectoryEntry instances.
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.Entry.Name">
            <summary>
            Get the name of the Entry
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.Entry.IsDirectoryEntry">
            <summary>
            Is this a DirectoryEntry?
            </summary>
            <value>
            	<c>true</c> if the Entry Is a DirectoryEntry; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.Entry.IsDocumentEntry">
            <summary>
            Is this a DocumentEntry?
            </summary>
            <value>
            	<c>true</c> if the Entry Is a DocumentEntry; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.Entry.Parent">
            <summary>
            Get this Entry's parent (the DirectoryEntry that owns this
            Entry). All Entry objects, except the root Entry, has a parent.
            </summary>
            <value>this Entry's parent; null iff this Is the root Entry</value>
            This property is moved to EntryNode
        </member>
        <member name="M:NPOI.POIFS.FileSystem.Entry.Delete">
            <summary>
            Delete this Entry. ThIs operation should succeed, but there are
            special circumstances when it will not:
            If this Entry Is the root of the Entry tree, it cannot be
            deleted, as there Is no way to Create another one.
            If this Entry Is a directory, it cannot be deleted unless it Is
            empty.
            </summary>
            <returns>true if the Entry was successfully deleted, else false</returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.Entry.RenameTo(System.String)">
            <summary>
            Rename this Entry. ThIs operation will fail if:
            There Is a sibling Entry (i.e., an Entry whose parent Is the
            same as this Entry's parent) with the same name.
            ThIs Entry Is the root of the Entry tree. Its name Is dictated
            by the Filesystem and many not be Changed.
            </summary>
            <param name="newName">the new name for this Entry</param>
            <returns>true if the operation succeeded, else false</returns>
        </member>
        <member name="T:NPOI.POIFS.FileSystem.EntryNode">
            <summary>
            Abstract implementation of Entry
            Extending classes should override isDocument() or isDirectory(), as
            appropriate
            Extending classes must override isDeleteOK()
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.EntryNode.#ctor(NPOI.POIFS.Properties.Property,NPOI.POIFS.FileSystem.DirectoryNode)">
            <summary>
            Create a DocumentNode. ThIs method Is not public by design; it
            Is intended strictly for the internal use of extending classes
            </summary>
            <param name="property">the Property for this Entry</param>
            <param name="parent">the parent of this entry</param>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.EntryNode.Property">
            <summary>
            grant access to the property
            </summary>
            <value>the property backing this entry</value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.EntryNode.IsRoot">
            <summary>
            Is this the root of the tree?
            </summary>
            <value><c>true</c> if this instance is root; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.EntryNode.IsDeleteOK">
            <summary>
            extensions use this method to verify internal rules regarding
            deletion of the underlying store.
            </summary>
            <value>
            	<c>true</c> if it's ok to Delete the underlying store; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.EntryNode.Name">
            <summary>
            Get the name of the Entry
            </summary>
            <value>The name.</value>
            Get the name of the Entry
            @return name
        </member>
        <member name="P:NPOI.POIFS.FileSystem.EntryNode.IsDirectoryEntry">
            <summary>
            Is this a DirectoryEntry?
            </summary>
            <value>
            	<c>true</c> if the Entry Is a DirectoryEntry; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.EntryNode.IsDocumentEntry">
            <summary>
            Is this a DocumentEntry?
            </summary>
            <value>
            	<c>true</c> if the Entry Is a DocumentEntry; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.EntryNode.Parent">
            <summary>
            Get this Entry's parent (the DocumentEntry that owns this
            Entry). All Entry objects, except the root Entry, has a parent.
            </summary>
            <value>this Entry's parent; null iff this Is the root Entry</value>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.EntryNode.Delete">
            <summary>
            Delete this Entry. ThIs operation should succeed, but there are
            special circumstances when it will not:
            If this Entry Is the root of the Entry tree, it cannot be
            deleted, as there Is no way to Create another one.
            If this Entry Is a directory, it cannot be deleted unless it Is
            empty.
            </summary>
            <returns>
            true if the Entry was successfully deleted, else false
            </returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.EntryNode.RenameTo(System.String)">
            <summary>
            Rename this Entry. ThIs operation will fail if:
            There Is a sibling Entry (i.e., an Entry whose parent Is the
            same as this Entry's parent) with the same name.
            ThIs Entry Is the root of the Entry tree. Its name Is dictated
            by the Filesystem and many not be Changed.
            </summary>
            <param name="newName">the new name for this Entry</param>
            <returns>
            true if the operation succeeded, else false
            </returns>
        </member>
        <member name="T:NPOI.POIFS.FileSystem.NDocumentInputStream">
            This class provides methods to read a DocumentEntry managed by a
            {@link NPOIFSFileSystem} instance.
        </member>
        <member name="F:NPOI.POIFS.FileSystem.NDocumentInputStream._current_offset">
            current offset into the Document 
        </member>
        <member name="F:NPOI.POIFS.FileSystem.NDocumentInputStream._current_block_count">
            current block count 
        </member>
        <member name="F:NPOI.POIFS.FileSystem.NDocumentInputStream._marked_offset">
            current marked offset into the Document (used by mark and Reset) 
        </member>
        <member name="F:NPOI.POIFS.FileSystem.NDocumentInputStream._marked_offset_count">
            and the block count for it 
        </member>
        <member name="F:NPOI.POIFS.FileSystem.NDocumentInputStream._document_size">
            the Document's size 
        </member>
        <member name="F:NPOI.POIFS.FileSystem.NDocumentInputStream._closed">
            have we been closed? 
        </member>
        <member name="F:NPOI.POIFS.FileSystem.NDocumentInputStream._document">
            the actual Document 
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NDocumentInputStream.#ctor(NPOI.POIFS.FileSystem.DocumentEntry)">
            Create an InputStream from the specified DocumentEntry
            
            @param document the DocumentEntry to be read
            
            @exception IOException if the DocumentEntry cannot be opened (like, maybe it has
                           been deleted?)
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NDocumentInputStream.#ctor(NPOI.POIFS.FileSystem.NPOIFSDocument)">
            Create an InputStream from the specified Document
            
            @param document the Document to be read
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NDocumentInputStream.Reset">
            Repositions this stream to the position at the time the mark() method was
            last called on this input stream. If mark() has not been called this
            method repositions the stream to its beginning.
        </member>
        <member name="T:NPOI.POIFS.FileSystem.NPOIFSDocument">
            This class manages a document in the NIO POIFS filesystem.
            This is the {@link NPOIFSFileSystem} version.
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSDocument.#ctor(NPOI.POIFS.FileSystem.DocumentNode)">
            Constructor for an existing Document 
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSDocument.#ctor(NPOI.POIFS.Properties.DocumentProperty,NPOI.POIFS.FileSystem.NPOIFSFileSystem)">
            Constructor for an existing Document 
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSDocument.#ctor(System.String,NPOI.POIFS.FileSystem.NPOIFSFileSystem,System.IO.Stream)">
             Constructor for a new Document
            
             @param name the name of the POIFSDocument
             @param stream the InputStream we read data from
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSDocument.Free">
            Frees the underlying stream and property
        </member>
        <member name="P:NPOI.POIFS.FileSystem.NPOIFSDocument.Size">
            @return size of the document
        </member>
        <member name="P:NPOI.POIFS.FileSystem.NPOIFSDocument.DocumentProperty">
            @return the instance's DocumentProperty
        </member>
        <member name="T:NPOI.POIFS.FileSystem.NPOIFSFileSystem">
            This is the main class of the POIFS system; it manages the entire
            life cycle of the filesystem.
            This is the new NIO version
        </member>
        <member name="F:NPOI.POIFS.FileSystem.NPOIFSFileSystem.bigBlockSize">
            What big block size the file uses. Most files
             use 512 bytes, but a few use 4096
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.#ctor">
            Constructor, intended for writing
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.#ctor(System.IO.Stream)">
             Create a POIFSFileSystem from an <tt>InputStream</tt>.  Normally the stream is read until
             EOF.  The stream is always closed.<p/>
            
             Some streams are usable After reaching EOF (typically those that return <code>true</code>
             for <tt>markSupported()</tt>).  In the unlikely case that the caller has such a stream
             <i>and</i> needs to use it After this constructor completes, a work around is to wrap the
             stream in order to trap the <tt>close()</tt> call.  A convenience method (
             <tt>CreateNonClosingInputStream()</tt>) has been provided for this purpose:
             <pre>
             InputStream wrappedStream = POIFSFileSystem.CreateNonClosingInputStream(is);
             HSSFWorkbook wb = new HSSFWorkbook(wrappedStream);
             is.Reset();
             doSomethingElse(is);
             </pre>
             Note also the special case of <tt>MemoryStream</tt> for which the <tt>close()</tt>
             method does nothing.
             <pre>
             MemoryStream bais = ...
             HSSFWorkbook wb = new HSSFWorkbook(bais); // calls bais.Close() !
             bais.Reset(); // no problem
             doSomethingElse(bais);
             </pre>
            
             @param stream the InputStream from which to read the data
            
             @exception IOException on errors Reading, or on invalid data
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.CloseInputStream(System.IO.Stream,System.Boolean)">
            @param stream the stream to be closed
            @param success <code>false</code> if an exception is currently being thrown in the calling method
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.HasPOIFSHeader(System.IO.Stream)">
            Checks that the supplied InputStream (which MUST
             support mark and reset, or be a PushbackInputStream)
             has a POIFS (OLE2) header at the start of it.
            If your InputStream does not support mark / reset,
             then wrap it in a PushBackInputStream, then be
             sure to always use that, and not the original!
            @param inp An InputStream which supports either mark/reset, or is a PushbackInputStream
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.HasPOIFSHeader(System.Byte[])">
            Checks if the supplied first 8 bytes of a stream / file
             has a POIFS (OLE2) header.
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.ReadCoreContents">
            Read and process the PropertiesTable and the
             FAT / XFAT blocks, so that we're Ready to
             work with the file
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.GetBlockAt(System.Int32)">
            Load the block at the given offset.
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.TryGetBlockAt(System.Int32,NPOI.Util.ByteBuffer@)">
            Try to load the block at the given offset, and if the offset is beyond the end of the buffer, return false.
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.CreateBlockIfNeeded(System.Int32)">
            Load the block at the given offset, 
             extending the file if needed
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.GetBATBlockAndIndex(System.Int32)">
            Returns the BATBlock that handles the specified offset,
             and the relative index within it
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.GetNextBlock(System.Int32)">
            Works out what block follows the specified one.
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.SetNextBlock(System.Int32,System.Int32)">
            Changes the record of what block follows the specified one.
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.GetFreeBlock">
            Finds a free block, and returns its offset.
            This method will extend the file if needed, and if doing
             so, allocate new FAT blocks to Address the extra space.
        </member>
        <member name="P:NPOI.POIFS.FileSystem.NPOIFSFileSystem.PropertyTable">
            For unit Testing only! Returns the underlying
             properties table
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.GetMiniStore">
            Returns the MiniStore, which performs a similar low
             level function to this, except for the small blocks.
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.AddDocument(NPOI.POIFS.FileSystem.NPOIFSDocument)">
             add a new POIFSDocument to the FileSytem 
            
             @param document the POIFSDocument being Added
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.AddDirectory(NPOI.POIFS.Properties.DirectoryProperty)">
             add a new DirectoryProperty to the FileSystem
            
             @param directory the DirectoryProperty being Added
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.CreateDocument(System.IO.Stream,System.String)">
             Create a new document to be Added to the root directory
            
             @param stream the InputStream from which the document's data
                           will be obtained
             @param name the name of the new POIFSDocument
            
             @return the new DocumentEntry
            
             @exception IOException on error creating the new POIFSDocument
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.CreateDirectory(System.String)">
             create a new DirectoryEntry in the root directory
            
             @param name the name of the new DirectoryEntry
            
             @return the new DirectoryEntry
            
             @exception IOException on name duplication
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.WriteFileSystem(System.IO.Stream)">
             Write the filesystem out
            
             @param stream the OutputStream to which the filesystem will be
                           written
            
             @exception IOException thrown on errors writing to the stream
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.syncWithDataSource">
            Has our in-memory objects write their state
             to their backing blocks 
        </member>
        <member name="P:NPOI.POIFS.FileSystem.NPOIFSFileSystem.Root">
             Get the root entry
            
             @return the root entry
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.Remove(NPOI.POIFS.FileSystem.EntryNode)">
             remove an entry
            
             @param entry to be Removed
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.GetBigBlockSize">
            @return The Big Block size, normally 512 bytes, sometimes 4096 bytes
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSFileSystem.GetBigBlockSizeDetails">
            @return The Big Block size, normally 512 bytes, sometimes 4096 bytes
        </member>
        <member name="T:NPOI.POIFS.FileSystem.NPOIFSMiniStore">
            This class handles the MiniStream (small block store)
             in the NIO case for {@link NPOIFSFileSystem}
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSMiniStore.GetBlockAt(System.Int32,System.Boolean)">
            Load the block at the given offset, optionally throwing an exception if the offset is beyond the limit of the buffer.
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSMiniStore.GetBlockAt(System.Int32)">
            Load the block at the given offset.
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSMiniStore.TryGetBlockAt(System.Int32,NPOI.Util.ByteBuffer@)">
            Try to load the block at the given offset, and if the offset is beyond the end of the buffer, return false.
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSMiniStore.CreateBlockIfNeeded(System.Int32)">
            Load the block, extending the underlying stream if needed
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSMiniStore.GetBATBlockAndIndex(System.Int32)">
            Returns the BATBlock that handles the specified offset,
             and the relative index within it
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSMiniStore.GetNextBlock(System.Int32)">
            Works out what block follows the specified one.
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSMiniStore.SetNextBlock(System.Int32,System.Int32)">
            Changes the record of what block follows the specified one.
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSMiniStore.GetFreeBlock">
            Finds a free block, and returns its offset.
            This method will extend the file if needed, and if doing
             so, allocate new FAT blocks to Address the extra space.
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSMiniStore.SyncWithDataSource">
            <summary>
            Writes the SBATs to their backing blocks, and updates 
            the mini-stream size in the properties. Stream size is
            based on full blocks used, not the data within the streams
            </summary>
        </member>
        <member name="T:NPOI.POIFS.FileSystem.NPOIFSStream">
            This handles Reading and writing a stream within a
             {@link NPOIFSFileSystem}. It can supply an iterator
             to read blocks, and way to write out to existing and
             new blocks.
            Most users will want a higher level version of this, 
             which deals with properties to track which stream
             this is.
            This only works on big block streams, it doesn't
             handle small block ones.
            This uses the new NIO code
            
            TODO Implement a streaming write method, and append
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSStream.#ctor(NPOI.POIFS.FileSystem.BlockStore,System.Int32)">
            Constructor for an existing stream. It's up to you
             to know how to Get the start block (eg from a 
             {@link HeaderBlock} or a {@link Property}) 
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSStream.#ctor(NPOI.POIFS.FileSystem.BlockStore)">
            Constructor for a new stream. A start block won't
             be allocated until you begin writing to it.
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSStream.GetStartBlock">
            What block does this stream start at?
            Will be {@link POIFSConstants#END_OF_CHAIN} for a
             new stream that hasn't been written to yet.
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSStream.GetBlockIterator">
            Returns an iterator that'll supply one {@link ByteBuffer}
             per block in the stream.
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSStream.UpdateContents(System.Byte[])">
            Updates the contents of the stream to the new
             Set of bytes.
            Note - if this is property based, you'll still
             need to update the size in the property yourself
        </member>
        <member name="M:NPOI.POIFS.FileSystem.NPOIFSStream.Free">
            Frees all blocks in the stream
        </member>
        <member name="T:NPOI.POIFS.FileSystem.POIFSDocumentPath">
            <summary>
            Class POIFSDocumentPath
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.POIFSDocumentPath.#ctor">
            <summary>
            simple constructor for the path of a document that is in the
            root of the POIFSFileSystem. The constructor that takes an
            array of Strings can also be used to create such a
            POIFSDocumentPath by passing it a null or empty String array
            </summary>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.POIFSDocumentPath.#ctor(System.String[])">
            <summary>
            constructor for the path of a document that is not in the root
            of the POIFSFileSystem
            </summary>
            <param name="components">the Strings making up the path to a document.
            The Strings must be ordered as they appear in
            the directory hierarchy of the the document
            -- the first string must be the name of a
            directory in the root of the POIFSFileSystem,
            and every Nth (for N &gt; 1) string thereafter
            must be the name of a directory in the
            directory identified by the (N-1)th string.
            If the components parameter is null or has
            zero length, the POIFSDocumentPath is
            appropriate for a document that is in the
            root of a POIFSFileSystem</param>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.POIFSDocumentPath.#ctor(NPOI.POIFS.FileSystem.POIFSDocumentPath,System.String[])">
            <summary>
            constructor that adds additional subdirectories to an existing
            path
            </summary>
            <param name="path">the existing path</param>
            <param name="components">the additional subdirectory names to be added</param>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.POIFSDocumentPath.Equals(System.Object)">
            <summary>
            equality. Two POIFSDocumentPath instances are equal if they
            have the same number of component Strings, and if each
            component String is equal to its coresponding component String
            </summary>
            <param name="o">the object we're checking equality for</param>
            <returns>true if the object is equal to this object</returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.POIFSDocumentPath.GetComponent(System.Int32)">
            <summary>
            get the specified component
            </summary>
            <param name="n">which component (0 ... length() - 1)</param>
            <returns>the nth component;</returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.POIFSDocumentPath.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.POIFSDocumentPath.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.POIFSDocumentPath.Length">
            <summary>
            Gets the length.
            </summary>
            <value>the number of components</value>
        </member>
        <member name="P:NPOI.POIFS.FileSystem.POIFSDocumentPath.Parent">
            <summary>
            Returns the path's parent or <c>null</c> if this path
            is the root path.
            </summary>
            <value>path of parent, or null if this path is the root path</value>
        </member>
        <member name="T:NPOI.POIFS.FileSystem.POIFSFileSystem">
            <summary>
            This is the main class of the POIFS system; it manages the entire
            life cycle of the filesystem.
            @author Marc Johnson (mjohnson at apache dot org) 
            </summary>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.POIFSFileSystem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NPOI.POIFS.FileSystem.POIFSFileSystem"/> class.  intended for writing
            </summary>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.POIFSFileSystem.#ctor(System.IO.Stream)">
            <summary>
            Create a POIFSFileSystem from an Stream. Normally the stream is Read until
            EOF.  The stream is always Closed.  In the unlikely case that the caller has such a stream and
            needs to use it after this constructor completes, a work around is to wrap the
            stream in order to trap the Close() call.  
            </summary>
            <param name="stream">the Streamfrom which to Read the data</param>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.POIFSFileSystem.HasPOIFSHeader(System.IO.Stream)">
            <summary>
            Checks that the supplied Stream(which MUST
            support mark and reset, or be a PushbackInputStream)
            has a POIFS (OLE2) header at the start of it.
            If your Streamdoes not support mark / reset,
            then wrap it in a PushBackInputStream, then be
            sure to always use that, and not the original!
            </summary>
            <param name="inp">An Streamwhich supports either mark/reset, or is a PushbackStream</param>
            <returns>
            	<c>true</c> if [has POIFS header] [the specified inp]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NPOI.POIFS.FileSystem.POIFSFileSystem.HasPOIFSHeader(System.Byte[])">
            Checks if the supplied first 8 bytes of a stream / file
             has a POIFS (OLE2) header.
        </member>
        <member name="T:NPOI.POIFS.NIO.ByteArrayBackedDataSource">
            <summary>
            A POIFS <see cref="T:NPOI.POIFS.NIO.DataSource"/> backed by a byte array.
            </summary>
        </member>
        <member name="T:NPOI.POIFS.NIO.DataSource">
            <summary>
            Common definition of how we read and write bytes
            </summary>
        </member>
        <member name="M:NPOI.POIFS.NIO.DataSource.Close">
            <summary>
            Close the underlying stream
            </summary>
        </member>
        <member name="M:NPOI.POIFS.NIO.DataSource.CopyTo(System.IO.Stream)">
            <summary>
            Copies the contents to the specified Stream
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:NPOI.POIFS.Properties.Child">
            <summary>
            This interface defines methods for finding and setting sibling
            Property instances
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="P:NPOI.POIFS.Properties.Child.PreviousChild">
            <summary>
            Gets or sets the previous child.
            </summary>
            <value>The previous child.</value>
        </member>
        <member name="P:NPOI.POIFS.Properties.Child.NextChild">
            <summary>
            Gets or sets the next child.
            </summary>
            <value>The next child.</value>
        </member>
        <member name="T:NPOI.POIFS.Properties.DirectoryProperty">
            <summary>
            Trivial extension of Property for POIFSDocuments
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Properties.DirectoryProperty.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NPOI.POIFS.Properties.DirectoryProperty"/> class.
            </summary>
            <param name="name">the name of the directory</param>
        </member>
        <member name="M:NPOI.POIFS.Properties.DirectoryProperty.#ctor(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NPOI.POIFS.Properties.DirectoryProperty"/> class.
            </summary>
            <param name="index">index number</param>
            <param name="array">byte data</param>
            <param name="offset">offset into byte data</param>
        </member>
        <member name="M:NPOI.POIFS.Properties.DirectoryProperty.ChangeName(NPOI.POIFS.Properties.Property,System.String)">
            <summary>
            Change a Property's name
            </summary>
            <param name="property">the Property whose name Is being Changed.</param>
            <param name="newName">the new name for the Property</param>
            <returns>true if the name Change could be made, else false</returns>
        </member>
        <member name="M:NPOI.POIFS.Properties.DirectoryProperty.DeleteChild(NPOI.POIFS.Properties.Property)">
            <summary>
            Delete a Property
            </summary>
            <param name="property">the Property being Deleted</param>
            <returns>true if the Property could be Deleted, else false</returns>
        </member>
        <member name="T:NPOI.POIFS.Properties.DirectoryProperty.PropertyComparator">
            <summary>
            Directory Property Comparer
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Properties.DirectoryProperty.PropertyComparator.Equals(System.Object)">
            <summary>
            Object equality, implemented as object identity
            </summary>
            <param name="o">Object we're being Compared to</param>
            <returns>true if identical, else false</returns>
        </member>
        <member name="M:NPOI.POIFS.Properties.DirectoryProperty.PropertyComparator.Compare(NPOI.POIFS.Properties.Property,NPOI.POIFS.Properties.Property)">
            <summary>
            Compare method. Assumes both parameters are non-null
            instances of Property. One property is less than another if
            its name is shorter than the other property's name. If the
            names are the same length, the property whose name comes
            before the other property's name, alphabetically, is less
            than the other property.
            </summary>
            <param name="o1">first object to compare, better be a Property</param>
            <param name="o2">second object to compare, better be a Property</param>
            <returns>negative value if o1 smaller than o2,
                    zero           if o1 equals o2,
                   positive value if o1 bigger than  o2.</returns>
        </member>
        <member name="P:NPOI.POIFS.Properties.DirectoryProperty.IsDirectory">
            <summary>
            Gets a value indicating whether this instance is directory.
            </summary>
            <value>
            	<c>true</c> if a directory type Property; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:NPOI.POIFS.Properties.DirectoryProperty.PreWrite">
            <summary>
            Perform whatever activities need to be performed prior to
            writing
            </summary>
        </member>
        <member name="P:NPOI.POIFS.Properties.DirectoryProperty.Children">
            <summary>
            Get an iterator over the children of this Parent; all elements
            are instances of Property.
            </summary>
            <value>Iterator of children; may refer to an empty collection</value>
        </member>
        <member name="M:NPOI.POIFS.Properties.DirectoryProperty.AddChild(NPOI.POIFS.Properties.Property)">
            <summary>
            Add a new child to the collection of children
            </summary>
            <param name="property">the new child to be added; must not be null</param>
        </member>
        <member name="T:NPOI.POIFS.Properties.DocumentProperty">
            <summary>
            Trivial extension of Property for POIFSDocuments
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Properties.DocumentProperty.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NPOI.POIFS.Properties.DocumentProperty"/> class.
            </summary>
            <param name="name">POIFSDocument name</param>
            <param name="size">POIFSDocument size</param>
        </member>
        <member name="M:NPOI.POIFS.Properties.DocumentProperty.#ctor(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NPOI.POIFS.Properties.DocumentProperty"/> class.
            </summary>
            <param name="index">index number</param>
            <param name="array">byte data</param>
            <param name="offset">offset into byte data</param> 
        </member>
        <member name="P:NPOI.POIFS.Properties.DocumentProperty.IsDirectory">
            <summary>
            Determines whether this instance is directory.
            </summary>
            <returns>
            	<c>true</c> if this instance is directory; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NPOI.POIFS.Properties.DocumentProperty.PreWrite">
            <summary>
            Perform whatever activities need to be performed prior to
            writing
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Properties.DocumentProperty.UpdateSize(System.Int32)">
            Update the size of the property's data
        </member>
        <member name="M:NPOI.POIFS.Properties.NPropertyTable.PreWrite">
            Prepare to be written
        </member>
        <member name="T:NPOI.POIFS.Properties.Parent">
            <summary>
            Behavior for parent (directory) properties
            @author Marc Johnson27591@hotmail.com
            </summary>
        </member>
        <member name="P:NPOI.POIFS.Properties.Parent.Children">
            <summary>
            Get an iterator over the children of this Parent
            all elements are instances of Property.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.POIFS.Properties.Parent.AddChild(NPOI.POIFS.Properties.Property)">
            <summary>
            Add a new child to the collection of children
            </summary>
            <param name="property">the new child to be added; must not be null</param>
        </member>
        <member name="P:NPOI.POIFS.Properties.Parent.PreviousChild">
            <summary>
            Sets the previous child.
            </summary>
        </member>
        <member name="P:NPOI.POIFS.Properties.Parent.NextChild">
            <summary>
            Sets the next child.
            </summary>
        </member>
        <member name="T:NPOI.POIFS.Properties.Property">
            <summary>
            This abstract base class is the ancestor of all classes
            implementing POIFS Property behavior.
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Properties.Property.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NPOI.POIFS.Properties.Property"/> class.
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Properties.Property.#ctor(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Constructor from byte data
            </summary>
            <param name="index">index number</param>
            <param name="array">byte data</param>
            <param name="offset">offset into byte data</param>
        </member>
        <member name="M:NPOI.POIFS.Properties.Property.WriteData(System.IO.Stream)">
            <summary>
            Write the raw data to an OutputStream.
            </summary>
            <param name="stream">the OutputStream to which the data Should be
            written.</param>
        </member>
        <member name="P:NPOI.POIFS.Properties.Property.StartBlock">
            <summary>
            Gets or sets the start block for the document referred to by this
            Property.
            </summary>
            <value>the start block index</value>
        </member>
        <member name="P:NPOI.POIFS.Properties.Property.ShouldUseSmallBlocks">
            <summary>
            Based on the currently defined size, Should this property use
            small blocks?
            </summary>
            <returns>true if the size Is less than _big_block_minimum_bytes</returns>
        </member>
        <member name="M:NPOI.POIFS.Properties.Property.IsSmall(System.Int32)">
            <summary>
            does the length indicate a small document?
            </summary>
            <param name="length">length in bytes</param>
            <returns>
            	<c>true</c> if the length Is less than
            _big_block_minimum_bytes; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:NPOI.POIFS.Properties.Property.Name">
            <summary>
            Gets or sets the name of this property
            </summary>
            <value>property name</value>
        </member>
        <member name="P:NPOI.POIFS.Properties.Property.IsDirectory">
            <summary>
            Gets a value indicating whether this instance is directory.
            </summary>
            <value>
            	<c>true</c> if a directory type Property; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NPOI.POIFS.Properties.Property.StorageClsid">
            <summary>
            Gets or sets the storage class ID for this property stream. ThIs Is the Class ID
            of the COM object which can read and write this property stream </summary>
            <value>Storage Class ID</value>
        </member>
        <member name="P:NPOI.POIFS.Properties.Property.PropertyType">
            <summary>
            Set the property type. Makes no attempt to validate the value.
            </summary>
            <value>the property type (root, file, directory)</value>
        </member>
        <member name="P:NPOI.POIFS.Properties.Property.NodeColor">
            <summary>
            Sets the color of the node.
            </summary>
            <value>the node color (red or black)</value>
        </member>
        <member name="P:NPOI.POIFS.Properties.Property.ChildProperty">
            <summary>
            Sets the child property.
            </summary>
            <value>the child property's index in the Property Table</value>
        </member>
        <member name="P:NPOI.POIFS.Properties.Property.ChildIndex">
            <summary>
            Get the child property (its index in the Property Table)
            </summary>
            <value>The index of the child.</value>
        </member>
        <member name="P:NPOI.POIFS.Properties.Property.Size">
            <summary>
            Gets or sets the size of the document associated with this Property
            </summary>
            <value>the size of the document, in bytes</value>
        </member>
        <member name="P:NPOI.POIFS.Properties.Property.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The index.</value>
            Get the index for this Property
            @return the index of this Property within its Property Table
        </member>
        <member name="M:NPOI.POIFS.Properties.Property.PreWrite">
            <summary>
            Perform whatever activities need to be performed prior to
            writing
            </summary>
        </member>
        <member name="P:NPOI.POIFS.Properties.Property.NextChildIndex">
            <summary>
            Gets the index of the next child.
            </summary>
            <value>The index of the next child.</value>
        </member>
        <member name="P:NPOI.POIFS.Properties.Property.PreviousChildIndex">
            <summary>
            Gets the index of the previous child.
            </summary>
            <value>The index of the previous child.</value>
        </member>
        <member name="M:NPOI.POIFS.Properties.Property.IsValidIndex(System.Int32)">
            <summary>
            Determines whether the specified index Is valid
            </summary>
            <param name="index">value to be checked</param>
            <returns>
            	<c>true</c> if the index Is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:NPOI.POIFS.Properties.Property.PreviousChild">
            <summary>
            Gets or sets the previous child.
            </summary>
            <value>the new 'previous' child; may be null, which has
            the effect of saying there Is no 'previous' child</value>
        </member>
        <member name="P:NPOI.POIFS.Properties.Property.NextChild">
            <summary>
            Gets or sets the next Child
            </summary>
            <value> the new 'next' child; may be null, which has the
            effect of saying there Is no 'next' child</value>
        </member>
        <member name="T:NPOI.POIFS.Properties.PropertyConstants">
            <summary>
            Constants used by Properties namespace
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Properties.PropertyFactory.ConvertToProperties(NPOI.POIFS.Storage.ListManagedBlock[])">
            <summary>
            Convert raw data blocks to an array of Property's
            </summary>
            <param name="blocks">The blocks to be converted</param>
            <returns>the converted List of Property objects. May contain
            nulls, but will not be null</returns>
        </member>
        <member name="M:NPOI.POIFS.Properties.RootProperty.#ctor(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NPOI.POIFS.Properties.RootProperty"/> class.
            </summary>
            <param name="index">index number</param>
            <param name="array">byte data</param>
            <param name="offset">offset into byte data</param>
        </member>
        <member name="P:NPOI.POIFS.Properties.RootProperty.Size">
            <summary>
            Gets or sets the size of the document associated with this Property
            </summary>
            <value>the size of the document, in bytes</value>
        </member>
        <member name="T:NPOI.POIFS.Storage.BATBlock">
            <summary>
            A block of block allocation table entries. BATBlocks are created
            only through a static factory method: createBATBlocks.
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="F:NPOI.POIFS.Storage.BATBlock._values">
            For a regular fat block, these are 128 / 1024 
             next sector values.
            For a XFat (DIFat) block, these are 127 / 1023
             next sector values, then a chaining value.
        </member>
        <member name="F:NPOI.POIFS.Storage.BATBlock._has_free_sectors">
            Does this BATBlock have any free sectors in it?
        </member>
        <member name="F:NPOI.POIFS.Storage.BATBlock.ourBlockIndex">
            Where in the file are we?
        </member>
        <member name="M:NPOI.POIFS.Storage.BATBlock.#ctor">
            <summary>
            Create a single instance initialized with default values
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Storage.BATBlock.#ctor(NPOI.POIFS.Common.POIFSBigBlockSize,System.Int32[],System.Int32,System.Int32)">
             Create a single instance initialized (perhaps partially) with entries
            
             @param entries the array of block allocation table entries
             @param start_index the index of the first entry to be written
                                to the block
             @param end_index the index, plus one, of the last entry to be
                              written to the block (writing is for all index
                              k, start_index &lt;= k &lt; end_index)
        </member>
        <member name="M:NPOI.POIFS.Storage.BATBlock.CreateBATBlock(NPOI.POIFS.Common.POIFSBigBlockSize,System.IO.BinaryReader)">
            Create a single BATBlock from the byte buffer, which must hold at least
             one big block of data to be read.
        </member>
        <member name="M:NPOI.POIFS.Storage.BATBlock.CreateEmptyBATBlock(NPOI.POIFS.Common.POIFSBigBlockSize,System.Boolean)">
            **
        </member>
        <member name="M:NPOI.POIFS.Storage.BATBlock.CreateBATBlocks(NPOI.POIFS.Common.POIFSBigBlockSize,System.Int32[])">
            <summary>
            Create an array of BATBlocks from an array of int block
            allocation table entries
            </summary>
            <param name="bigBlockSize">the poifs bigBlockSize</param>
            <param name="entries">the array of int entries</param>
            <returns>the newly created array of BATBlocks</returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.BATBlock.CreateXBATBlocks(NPOI.POIFS.Common.POIFSBigBlockSize,System.Int32[],System.Int32)">
            <summary>
            Create an array of XBATBlocks from an array of int block
            allocation table entries
            </summary>
            <param name="bigBlockSize"></param>
            <param name="entries">the array of int entries</param>
            <param name="startBlock">the start block of the array of XBAT blocks</param>
            <returns>the newly created array of BATBlocks</returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.BATBlock.CalculateStorageRequirements(System.Int32)">
            <summary>
            Calculate how many BATBlocks are needed to hold a specified
            number of BAT entries.
            </summary>
            <param name="entryCount">the number of entries</param>
            <returns>the number of BATBlocks needed</returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.BATBlock.CalculateXBATStorageRequirements(System.Int32)">
            <summary>
            Calculate how many XBATBlocks are needed to hold a specified
            number of BAT entries.
            </summary>
            <param name="entryCount">the number of entries</param>
            <returns>the number of XBATBlocks needed</returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.BATBlock.CalculateMaximumSize(NPOI.POIFS.Common.POIFSBigBlockSize,System.Int32)">
            Calculates the maximum size of a file which is addressable given the
             number of FAT (BAT) sectors specified. (We don't care if those BAT
             blocks come from the 109 in the header, or from header + XBATS, it
             won't affect the calculation)
             
            The actual file size will be between [size of fatCount-1 blocks] and
              [size of fatCount blocks].
             For 512 byte block sizes, this means we may over-estimate by up to 65kb.
             For 4096 byte block sizes, this means we may over-estimate by up to 4mb
        </member>
        <member name="P:NPOI.POIFS.Storage.BATBlock.EntriesPerBlock">
            <summary>
            Gets the entries per block.
            </summary>
            <value>The number of entries per block</value>
        </member>
        <member name="P:NPOI.POIFS.Storage.BATBlock.EntriesPerXBATBlock">
            <summary>
            Gets the entries per XBAT block.
            </summary>
            <value>number of entries per XBAT block</value>
        </member>
        <member name="P:NPOI.POIFS.Storage.BATBlock.XBATChainOffset">
            <summary>
            Gets the XBAT chain offset.
            </summary>
            <value>offset of chain index of XBAT block</value>
        </member>
        <member name="P:NPOI.POIFS.Storage.BATBlock.HasFreeSectors">
            Does this BATBlock have any free sectors in it, or
             is it full?
        </member>
        <member name="M:NPOI.POIFS.Storage.BATBlock.GetUsedSectors(System.Boolean)">
            How many sectors in this block are taken?
            Note that calling {@link #hasFreeSectors()} is much quicker
        </member>
        <member name="P:NPOI.POIFS.Storage.BATBlock.OurBlockIndex">
            Retrieve where in the file we live 
        </member>
        <member name="M:NPOI.POIFS.Storage.BATBlock.#ctor(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Create a single instance initialized (perhaps partially) with entries
            </summary>
            <param name="entries">the array of block allocation table entries</param>
            <param name="start_index">the index of the first entry to be written
            to the block</param>
            <param name="end_index">the index, plus one, of the last entry to be
            written to the block (writing is for all index
            k, start_index less than k less than end_index)
            </param>
        </member>
        <member name="M:NPOI.POIFS.Storage.BATBlock.WriteData(System.IO.Stream)">
            <summary>
            Write the block's data to an Stream
            </summary>
            <param name="stream">the Stream to which the stored data should
            be written</param>
        </member>
        <member name="T:NPOI.POIFS.Storage.BigBlock">
            <summary>
            Abstract base class of all POIFS block storage classes. All
            extensions of BigBlock should write 512 bytes of data when
            requested to write their data.
            This class has package scope, as there is no reason at this time to
            make the class public.
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Storage.BigBlock.WriteData(System.IO.Stream,System.Byte[])">
            <summary>
            Default implementation of write for extending classes that
            contain their data in a simple array of bytes.
            </summary>
            <param name="stream">the OutputStream to which the data should be written.</param>
            <param name="data">the byte array of to be written.</param>
        </member>
        <member name="M:NPOI.POIFS.Storage.BigBlock.WriteBlocks(System.IO.Stream)">
            <summary>
            Write the block's data to an OutputStream
            </summary>
            <param name="stream">the OutputStream to which the stored data should be written</param>
        </member>
        <member name="M:NPOI.POIFS.Storage.BigBlock.WriteData(System.IO.Stream)">
            <summary>
            Write the storage to an OutputStream
            </summary>
            <param name="stream">the OutputStream to which the stored data should be written </param>
        </member>
        <member name="T:NPOI.POIFS.Storage.BlockAllocationTableReader">
            <summary>
            This class manages and creates the Block Allocation Table, which is
            basically a set of linked lists of block indices.
            Each block of the filesystem has an index. The first block, the
            header, is skipped; the first block after the header is index 0,
            the next is index 1, and so on.
            A block's index is also its index into the Block Allocation
            Table. The entry that it finds in the Block Allocation Table is the
            index of the next block in the linked list of blocks making up a
            file, or it is set to -2: end of list.
            
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Storage.BlockAllocationTableReader.#ctor(NPOI.POIFS.Common.POIFSBigBlockSize,System.Int32,System.Int32[],System.Int32,System.Int32,NPOI.POIFS.Storage.BlockList)">
            <summary>
            create a BlockAllocationTableReader for an existing filesystem. Side
            effect: when this method finishes, the BAT blocks will have
            been Removed from the raw block list, and any blocks labeled as
            'unused' in the block allocation table will also have been
            Removed from the raw block list. </summary>
            <param name="bigBlockSizse">the poifs bigBlockSize</param>
            <param name="block_count">the number of BAT blocks making up the block allocation table</param>
            <param name="block_array">the array of BAT block indices from the
            filesystem's header</param>
            <param name="xbat_count">the number of XBAT blocks</param>
            <param name="xbat_index">the index of the first XBAT block</param>
            <param name="raw_block_list">the list of RawDataBlocks</param>
        </member>
        <member name="M:NPOI.POIFS.Storage.BlockAllocationTableReader.#ctor(NPOI.POIFS.Common.POIFSBigBlockSize,NPOI.POIFS.Storage.ListManagedBlock[],NPOI.POIFS.Storage.BlockList)">
            <summary>
            create a BlockAllocationTableReader from an array of raw data blocks
            </summary>
            <param name="bigBlockSize"></param>
            <param name="blocks">the raw data</param>
            <param name="raw_block_list">the list holding the managed blocks</param>
        </member>
        <member name="M:NPOI.POIFS.Storage.BlockAllocationTableReader.#ctor(NPOI.POIFS.Common.POIFSBigBlockSize)">
            <summary>
            Initializes a new instance of the <see cref="T:NPOI.POIFS.Storage.BlockAllocationTableReader"/> class.
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Storage.BlockAllocationTableReader.FetchBlocks(System.Int32,System.Int32,NPOI.POIFS.Storage.BlockList)">
            <summary>
            walk the entries from a specified point and return the
            associated blocks. The associated blocks are Removed from the block list
            </summary>
            <param name="startBlock">the first block in the chain</param>
            <param name="headerPropertiesStartBlock"></param>
            <param name="blockList">the raw data block list</param>
            <returns>array of ListManagedBlocks, in their correct order</returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.BlockAllocationTableReader.IsUsed(System.Int32)">
            <summary>
            determine whether the block specified by index is used or not
            </summary>
            <param name="index">determine whether the block specified by index is used or not</param>
            <returns>
            	<c>true</c> if the specified block is used; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.BlockAllocationTableReader.GetNextBlockIndex(System.Int32)">
            <summary>
            return the next block index
            </summary>
            <param name="index">The index of the current block</param>
            <returns>index of the next block (may be
            POIFSConstants.END_OF_CHAIN, indicating end of chain
            (duh))</returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.BlockAllocationTableReader.SetEntries(NPOI.POIFS.Storage.ListManagedBlock[],NPOI.POIFS.Storage.BlockList)">
            <summary>
            Convert an array of blocks into a Set of integer indices
            </summary>
            <param name="blocks">the array of blocks containing the indices</param>
            <param name="raw_blocks">the list of blocks being managed. Unused
            blocks will be eliminated from the list</param>
        </member>
        <member name="T:NPOI.POIFS.Storage.BlockAllocationTableWriter">
            <summary>
            This class manages and creates the Block Allocation Table, which is
            basically a set of linked lists of block indices.
            Each block of the filesystem has an index. The first block, the
            header, is skipped; the first block after the header is index 0,
            the next is index 1, and so on.
            A block's index is also its index into the Block Allocation
            Table. The entry that it finds in the Block Allocation Table is the
            index of the next block in the linked list of blocks making up a
            file, or it is set to -2: end of list.
            *
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Storage.BlockAllocationTableWriter.#ctor(NPOI.POIFS.Common.POIFSBigBlockSize)">
            <summary>
            Initializes a new instance of the <see cref="T:NPOI.POIFS.Storage.BlockAllocationTableWriter"/> class.
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Storage.BlockAllocationTableWriter.CreateBlocks">
            <summary>
            Create the BATBlocks we need
            </summary>
            <returns>start block index of BAT blocks</returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.BlockAllocationTableWriter.AllocateSpace(System.Int32)">
            <summary>
            Allocate space for a block of indices
            </summary>
            <param name="blockCount">the number of blocks to allocate space for</param>
            <returns>the starting index of the blocks</returns>
        </member>
        <member name="P:NPOI.POIFS.Storage.BlockAllocationTableWriter.StartBlock">
            <summary>
            Sets the start block for this instance
            </summary>
            <value>
            index into the array of BigBlock instances making up the the filesystem
            </value>
        </member>
        <member name="M:NPOI.POIFS.Storage.BlockAllocationTableWriter.SimpleCreateBlocks">
            <summary>
            create the BATBlocks
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Storage.BlockAllocationTableWriter.WriteBlocks(System.IO.Stream)">
            <summary>
            Write the storage to an OutputStream
            </summary>
            <param name="stream">the OutputStream to which the stored data should be written</param>
        </member>
        <member name="P:NPOI.POIFS.Storage.BlockAllocationTableWriter.CountBlocks">
            <summary>
            Gets the number of BigBlock's this instance uses
            </summary>
            <value>count of BigBlock instances</value>
        </member>
        <member name="T:NPOI.POIFS.Storage.BlockList">
            <summary>
            Interface for lists of blocks that are mapped by block allocation
            tables
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Storage.BlockList.Zap(System.Int32)">
            <summary>
            remove the specified block from the list
            </summary>
            <param name="index">the index of the specified block; if the index is
            out of range, that's ok</param>
        </member>
        <member name="M:NPOI.POIFS.Storage.BlockList.Remove(System.Int32)">
            <summary>
            Remove and return the specified block from the list
            </summary>
            <param name="index">the index of the specified block</param>
            <returns>the specified block</returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.BlockList.FetchBlocks(System.Int32,System.Int32)">
            <summary>
            get the blocks making up a particular stream in the list. The
            blocks are removed from the list.
            </summary>
            <param name="startBlock">the index of the first block in the stream</param>
            <param name="headerPropertiesStartBlock"></param>
            <returns>the stream as an array of correctly ordered blocks</returns>
        </member>
        <member name="P:NPOI.POIFS.Storage.BlockList.BAT">
            <summary>
            set the associated BlockAllocationTable
            </summary>
            <value>the associated BlockAllocationTable</value>
        </member>
        <member name="T:NPOI.POIFS.Storage.BlockWritable">
            <summary>
            An interface for persisting block storage of POIFS components.
             @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Storage.BlockWritable.WriteBlocks(System.IO.Stream)">
            <summary>
            Writes the blocks.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="T:NPOI.POIFS.Storage.DataInputBlock">
             Wraps a <c>byte</c> array and provides simple data input access.
             Internally, this class maintains a buffer read index, so that for the most part, primitive
             data can be read in a data-input-stream-like manner.<p/>
            
             Note - the calling class should call the {@link #available()} method to detect end-of-buffer
             and Move to the next data block when the current is exhausted.
             For optimisation reasons, no error handling is performed in this class.  Thus, mistakes in
             calling code ran may raise ugly exceptions here, like {@link ArrayIndexOutOfBoundsException},
             etc .<p/>
            
             The multi-byte primitive input methods ({@link #readUshortLE()}, {@link #readIntLE()} and
             {@link #readLongLE()}) have corresponding 'spanning Read' methods which (when required) perform
             a read across the block boundary.  These spanning read methods take the previous
             {@link DataInputBlock} as a parameter.
             Reads of larger amounts of data (into <c>byte</c> array buffers) must be managed by the caller
             since these could conceivably involve more than two blocks.
            
             @author Josh Micich
        </member>
        <member name="F:NPOI.POIFS.Storage.DataInputBlock._buf">
            Possibly any size (usually 512K or 64K).  Assumed to be at least 8 bytes for all blocks
            before the end of the stream.  The last block in the stream can be any size except zero. 
        </member>
        <member name="M:NPOI.POIFS.Storage.DataInputBlock.ReadUshortLE">
            Reads a <c>short</c> which was encoded in <em>little endian</em> format.
        </member>
        <member name="M:NPOI.POIFS.Storage.DataInputBlock.ReadUshortLE(NPOI.POIFS.Storage.DataInputBlock)">
            Reads a <c>short</c> which spans the end of <c>prevBlock</c> and the start of this block.
        </member>
        <member name="M:NPOI.POIFS.Storage.DataInputBlock.ReadIntLE">
            Reads an <c>int</c> which was encoded in <em>little endian</em> format.
        </member>
        <member name="M:NPOI.POIFS.Storage.DataInputBlock.ReadIntLE(NPOI.POIFS.Storage.DataInputBlock,System.Int32)">
            Reads an <c>int</c> which spans the end of <c>prevBlock</c> and the start of this block.
        </member>
        <member name="M:NPOI.POIFS.Storage.DataInputBlock.ReadLongLE">
            Reads a <c>long</c> which was encoded in <em>little endian</em> format.
        </member>
        <member name="M:NPOI.POIFS.Storage.DataInputBlock.ReadLongLE(NPOI.POIFS.Storage.DataInputBlock,System.Int32)">
            Reads a <c>long</c> which spans the end of <c>prevBlock</c> and the start of this block.
        </member>
        <member name="M:NPOI.POIFS.Storage.DataInputBlock.ReadSpanning(NPOI.POIFS.Storage.DataInputBlock,System.Int32,System.Byte[])">
            Reads a small amount of data from across the boundary between two blocks.  
            The {@link #_readIndex} of this (the second) block is updated accordingly.
            Note- this method (and other code) assumes that the second {@link DataInputBlock}
            always is big enough to complete the read without being exhausted.
        </member>
        <member name="M:NPOI.POIFS.Storage.DataInputBlock.ReadFully(System.Byte[],System.Int32,System.Int32)">
            Reads <c>len</c> bytes from this block into the supplied buffer.
        </member>
        <member name="T:NPOI.POIFS.Storage.HeaderBlock">
            <summary>
            The block containing the archive header
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="F:NPOI.POIFS.Storage.HeaderBlock.bigBlockSize">
            What big block Size the file uses. Most files
             use 512 bytes, but a few use 4096
        </member>
        <member name="F:NPOI.POIFS.Storage.HeaderBlock._sbat_count">
            Number of small block allocation table blocks (int)
            (Number of MiniFAT Sectors in Microsoft parlance)
        </member>
        <member name="M:NPOI.POIFS.Storage.HeaderBlock.#ctor(System.IO.Stream)">
            <summary>
            create a new HeaderBlockReader from an Stream
            </summary>
            <param name="stream">the source Stream</param>
        </member>
        <member name="M:NPOI.POIFS.Storage.HeaderBlock.AlertShortRead(System.Int32,System.Int32)">
            <summary>
            Alerts the short read.
            </summary>
            <param name="read">The read.</param>
            <param name="expectedReadSize">The expected size.</param>
        </member>
        <member name="P:NPOI.POIFS.Storage.HeaderBlock.PropertyStart">
            <summary>
            Get start of Property Table
            </summary>
            <value>the index of the first block of the Property Table</value>
        </member>
        <member name="P:NPOI.POIFS.Storage.HeaderBlock.SBATStart">
            <summary>
            Gets start of small block allocation table
            </summary>
            <value>The SBAT start.</value>
        </member>
        <member name="P:NPOI.POIFS.Storage.HeaderBlock.SBATCount">
            <summary>
            Gets number of BAT blocks
            </summary>
            <value>The BAT count.</value>
        </member>
        <member name="P:NPOI.POIFS.Storage.HeaderBlock.BATArray">
            <summary>
            Gets the BAT array.
            </summary>
            <value>The BAT array.</value>
        </member>
        <member name="P:NPOI.POIFS.Storage.HeaderBlock.XBATCount">
            <summary>
            Gets the XBAT count.
            </summary>
            <value>The XBAT count.</value>
            @return XBAT count
        </member>
        <member name="P:NPOI.POIFS.Storage.HeaderBlock.XBATIndex">
            <summary>
            Gets the index of the XBAT.
            </summary>
            <value>The index of the XBAT.</value>
        </member>
        <member name="P:NPOI.POIFS.Storage.HeaderBlock.BigBlockSize">
            <summary>
            Gets The Big Block Size, normally 512 bytes, sometimes 4096 bytes
            </summary>
            <value>The size of the big block.</value>
            @return 
        </member>
        <member name="T:NPOI.POIFS.Storage.HeaderBlockConstants">
            <summary>
            Constants used in reading/writing the Header block
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="T:NPOI.POIFS.Storage.HeaderBlockWriter">
            <summary>
            The block containing the archive header
            @author Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Storage.HeaderBlockWriter.SetBATBlocks(System.Int32,System.Int32)">
            <summary>
            Set BAT block parameters. Assumes that all BAT blocks are
            contiguous. Will construct XBAT blocks if necessary and return
            the array of newly constructed XBAT blocks.
            </summary>
            <param name="blockCount">count of BAT blocks</param>
            <param name="startBlock">index of first BAT block</param>
            <returns>array of XBAT blocks; may be zero Length, will not be
            null</returns>
        </member>
        <member name="P:NPOI.POIFS.Storage.HeaderBlockWriter.PropertyStart">
            <summary>
            Set start of Property Table
            </summary>
            <value>the index of the first block of the Property
            Table</value>
        </member>
        <member name="P:NPOI.POIFS.Storage.HeaderBlockWriter.SBAStart">
            <summary>
            Set start of small block allocation table
            </summary>
            <value>the index of the first big block of the small
            block allocation table</value>
        </member>
        <member name="P:NPOI.POIFS.Storage.HeaderBlockWriter.SBATBlockCount">
            <summary>
            Set count of SBAT blocks
            </summary>
            <value>the number of SBAT blocks</value>
        </member>
        <member name="M:NPOI.POIFS.Storage.HeaderBlockWriter.CalculateXBATStorageRequirements(NPOI.POIFS.Common.POIFSBigBlockSize,System.Int32)">
            <summary>
            For a given number of BAT blocks, calculate how many XBAT
            blocks will be needed
            </summary>
            <param name="bigBlockSize"></param>
            <param name="blockCount">number of BAT blocks</param>
            <returns>number of XBAT blocks needed</returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.HeaderBlockWriter.WriteBlocks(System.IO.Stream)">
            <summary>
            Write the block's data to an Stream
            </summary>
            <param name="stream">the Stream to which the stored data should
            be written
            </param>
        </member>
        <member name="T:NPOI.POIFS.Storage.ListManagedBlock">
            <summary>
            An interface for blocks managed by a list that works with a
            BlockAllocationTable to keep block sequences straight
            @author Marc Johnson (mjohnson at apache dot org
            </summary>
        </member>
        <member name="P:NPOI.POIFS.Storage.ListManagedBlock.Data">
            <summary>
            Get the data from the block
            </summary>
            <value>the block's data as a byte array</value>
        </member>
        <member name="T:NPOI.POIFS.Storage.RawDataBlock">
            <summary>
            A big block created from an InputStream, holding the raw data
            @author Marc Johnson (mjohnson at apache dot org
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Storage.RawDataBlock.#ctor(System.IO.Stream)">
            <summary>
            Constructor RawDataBlock
            </summary>
            <param name="stream">the Stream from which the data will be read</param>
        </member>
        <member name="M:NPOI.POIFS.Storage.RawDataBlock.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NPOI.POIFS.Storage.RawDataBlock"/> class.
            </summary>
            <param name="stream">the Stream from which the data will be read</param>
            <param name="blockSize">the size of the POIFS blocks, normally 512 bytes {@link POIFSConstants#BIG_BLOCK_SIZE}</param>
        </member>
        <member name="P:NPOI.POIFS.Storage.RawDataBlock.EOF">
            <summary>
            When we read the data, did we hit end of file?
            </summary>
            <value><c>true</c> if the EoF was hit during this block, or; otherwise, <c>false</c>if not. If you have a dodgy short last block, then
            it's possible to both have data, and also hit EoF...</value>
        </member>
        <member name="P:NPOI.POIFS.Storage.RawDataBlock.HasData">
            <summary>
            Did we actually find any data to read? It's possible,
            in the event of a short last block, to both have hit
            the EoF, but also to have data
            </summary>
            <value><c>true</c> if this instance has data; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NPOI.POIFS.Storage.RawDataBlock.Data">
            <summary>
            Get the data from the block
            </summary>
            <value>the block's data as a byte array</value>
        </member>
        <member name="T:NPOI.POIFS.Storage.SmallDocumentBlock">
            <summary>
            Storage for documents that are too small to use regular
            DocumentBlocks for their data
            @author  Marc Johnson (mjohnson at apache dot org)
            </summary>
        </member>
        <member name="M:NPOI.POIFS.Storage.SmallDocumentBlock.Convert(NPOI.POIFS.Common.POIFSBigBlockSize,System.Byte[],System.Int32)">
            <summary>
            convert a single long array into an array of SmallDocumentBlock
            instances
            </summary>
            <param name="bigBlockSize">the poifs bigBlockSize</param>
            <param name="array">the byte array to be converted</param>
            <param name="size">the intended size of the array (which may be smaller)</param>
            <returns>an array of SmallDocumentBlock instances, filled from
            the array</returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.SmallDocumentBlock.Fill(NPOI.POIFS.Common.POIFSBigBlockSize,System.Collections.Generic.IList{NPOI.POIFS.Storage.SmallDocumentBlock})">
            <summary>
            fill out a List of SmallDocumentBlocks so that it fully occupies
            a Set of big blocks
            </summary>
            <param name="bigBlockSize"></param>
            <param name="blocks">the List to be filled out.</param>
            <returns>number of big blocks the list encompasses</returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.SmallDocumentBlock.Convert(NPOI.POIFS.Common.POIFSBigBlockSize,NPOI.POIFS.Storage.BlockWritable[],System.Int32)">
            <summary>
            Factory for creating SmallDocumentBlocks from DocumentBlocks
            </summary>
            <param name="bigBlocksSize"></param>
            <param name="store">the original DocumentBlocks</param>
            <param name="size">the total document size</param>
            <returns>an array of new SmallDocumentBlocks instances</returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.SmallDocumentBlock.Extract(NPOI.POIFS.Common.POIFSBigBlockSize,NPOI.POIFS.Storage.ListManagedBlock[])">
            <summary>
            create a list of SmallDocumentBlock's from raw data
            </summary>
            <param name="bigBlockSize"></param>
            <param name="blocks">the raw data containing the SmallDocumentBlock</param>
            <returns>a List of SmallDocumentBlock's extracted from the input</returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.SmallDocumentBlock.Read(NPOI.POIFS.Storage.BlockWritable[],System.Byte[],System.Int32)">
            <summary>
            Read data from an array of SmallDocumentBlocks
            </summary>
            <param name="blocks">the blocks to Read from.</param>
            <param name="buffer">the buffer to Write the data into.</param>
            <param name="offset">the offset into the array of blocks to Read from</param>
        </member>
        <member name="M:NPOI.POIFS.Storage.SmallDocumentBlock.CalcSize(System.Int32)">
            <summary>
            Calculate the storage size of a Set of SmallDocumentBlocks
            </summary>
            <param name="size"> number of SmallDocumentBlocks</param>
            <returns>total size</returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.SmallDocumentBlock.MakeEmptySmallDocumentBlock(NPOI.POIFS.Common.POIFSBigBlockSize)">
            <summary>
            Makes the empty small document block.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.SmallDocumentBlock.ConvertToBlockCount(System.Int32)">
            <summary>
            Converts to block count.
            </summary>
            <param name="size">The size.</param>
            <returns></returns>
        </member>
        <member name="M:NPOI.POIFS.Storage.SmallDocumentBlock.WriteBlocks(System.IO.Stream)">
            <summary>
            Write the storage to an OutputStream
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written</param>
        </member>
        <member name="P:NPOI.POIFS.Storage.SmallDocumentBlock.Data">
            <summary>
            Get the data from the block
            </summary>
            <value>the block's data as a byte array</value>
        </member>
        <member name="M:NPOI.Util.Arrays.Fill(System.Byte[],System.Byte)">
            <summary>
            Fills the specified array.
            </summary>
            <param name="array">The array.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:NPOI.Util.Arrays.Equals(System.Object,System.Object)">
            <summary>
            Equals the specified a1.
            </summary>
            <param name="a1">The a1.</param>
            <param name="b1">The b1.</param>
            <returns></returns>
        </member>
        <member name="M:NPOI.Util.Arrays.DeepEquals(System.Object[],System.Object[])">
             Returns <tt>true</tt> if the two specified arrays are <i>deeply
             Equal</i> to one another.  Unlike the {@link #Equals(Object[],Object[])}
             method, this method is appropriate for use with nested arrays of
             arbitrary depth.
            
             Two array references are considered deeply equal if both
             are <tt>null</tt>, or if they refer to arrays that contain the same
             number of elements and all corresponding pairs of elements in the two
             arrays are deeply Equal.
            
             Two possibly <tt>null</tt> elements <tt>e1</tt> and <tt>e2</tt> are
             deeply equal if any of the following conditions hold:
             <ul>
                <li> <tt>e1</tt> and <tt>e2</tt> are both arrays of object reference
                     types, and <tt>Arrays.DeepEquals(e1, e2) would return true</tt></li>
                <li> <tt>e1</tt> and <tt>e2</tt> are arrays of the same primitive
                     type, and the appropriate overloading of
                     <tt>Arrays.Equals(e1, e2)</tt> would return true.</li>
                <li> <tt>e1 == e2</tt></li>
                <li> <tt>e1.Equals(e2)</tt> would return true.</li>
             </ul>
             Note that this defInition permits <tt>null</tt> elements at any depth.
            
             If either of the specified arrays contain themselves as elements
             either directly or indirectly through one or more levels of arrays,
             the behavior of this method is undefined.
            
             @param a1 one array to be tested for Equality
             @param a2 the other array to be tested for Equality
             @return <tt>true</tt> if the two arrays are equal
             @see #Equals(Object[],Object[])
             @see Objects#deepEquals(Object, Object)
             @since 1.5
        </member>
        <member name="F:NPOI.Util.BigInteger._signum">
             The signum of this BigInteger: -1 for negative, 0 for zero, or
             1 for positive.  Note that the BigInteger zero <i>must</i> have
             a signum of 0.  This is necessary to ensures that there is exactly one
             representation for each BigInteger value.
            
             @serial
        </member>
        <member name="F:NPOI.Util.BigInteger.mag">
            The magnitude of this BigInteger, in <i>big-endian</i> order: the
            zeroth element of this array is the most-significant int of the
            magnitude.  The magnitude must be "minimal" in that the most-significant
            int ({@code mag[0]}) must be non-zero.  This is necessary to
            ensure that there is exactly one representation for each BigInteger
            value.  Note that this implies that the BigInteger zero has a
            zero-length mag array.
        </member>
        <member name="F:NPOI.Util.BigInteger.bitCount">
             One plus the bitCount of this BigInteger. Zeros means unitialized.
            
             @serial
             @see #bitCount
             @deprecated Deprecated since logical value is offset from stored
             value and correction factor is applied in accessor method.
        </member>
        <member name="F:NPOI.Util.BigInteger.bitLength">
             One plus the bitLength of this BigInteger. Zeros means unitialized.
             (either value is acceptable).
            
             @serial
             @see #bitLength()
             @deprecated Deprecated since logical value is offset from stored
             value and correction factor is applied in accessor method.
        </member>
        <member name="F:NPOI.Util.BigInteger.firstNonzeroIntNum">
            Two plus the index of the lowest-order int in the magnitude of this
            BigInteger that contains a nonzero int, or -2 (either value is acceptable).
            The least significant int has int-number 0, the next int in order of
            increasing significance has int-number 1, and so forth.
            @deprecated Deprecated since logical value is offset from stored
            value and correction factor is applied in accessor method.
        </member>
        <member name="F:NPOI.Util.BigInteger.LONG_MASK">
            This mask is used to obtain the value of an int as if it were unsigned.
        </member>
        <member name="M:NPOI.Util.BigInteger.#ctor(System.Int32[],System.Int32)">
            This internal constructor differs from its public cousin
            with the arguments reversed in two ways: it assumes that its
            arguments are correct, and it doesn't copy the magnitude array.
        </member>
        <member name="M:NPOI.Util.BigInteger.#ctor(System.Byte[])">
             Translates a byte array containing the two's-complement binary
             representation of a BigInteger into a BigInteger.  The input array is
             assumed to be in <i>big-endian</i> byte-order: the most significant
             byte is in the zeroth element.
            
             @param  val big-endian two's-complement binary representation of
                     BigInteger.
             @throws NumberFormatException {@code val} is zero bytes long.
        </member>
        <member name="M:NPOI.Util.BigInteger.#ctor(System.Int32[])">
            This private constructor translates an int array containing the
            two's-complement binary representation of a BigInteger into a
            BigInteger. The input array is assumed to be in <i>big-endian</i>
            int-order: the most significant int is in the zeroth element.
        </member>
        <member name="M:NPOI.Util.BigInteger.#ctor(System.Int64)">
            Constructs a BigInteger with the specified value, which may not be zero.
        </member>
        <member name="M:NPOI.Util.BigInteger.TrustedStripLeadingZeroInts(System.Int32[])">
            Returns the input array stripped of any leading zero bytes.
            Since the source is trusted the copying may be skipped.
        </member>
        <member name="M:NPOI.Util.BigInteger.ToString(System.Int32)">
             Returns the String representation of this BigInteger in the
             given radix.  If the radix is outside the range from {@link
             Character#Min_RADIX} to {@link Character#Max_RADIX} inclusive,
             it will default to 10 (as is the case for
             {@code Integer.toString}).  The digit-to-character mapping
             provided by {@code Character.forDigit} is used, and a minus
             sign is prepended if appropriate.  (This representation is
             compatible with the {@link #BigInteger(String, int) (String,
             int)} constructor.)
            
             @param  radix  radix of the String representation.
             @return String representation of this BigInteger in the given radix.
             @see    Integer#toString
             @see    Character#forDigit
             @see    #BigInteger(java.lang.String, int)
        </member>
        <member name="F:NPOI.Util.BigInteger.ZERO">
             The BigInteger constant zero.
            
             @since   1.2
        </member>
        <member name="F:NPOI.Util.BigInteger.One">
             The BigInteger constant one.
            
             @since   1.2
        </member>
        <member name="F:NPOI.Util.BigInteger.Two">
            The BigInteger constant two.  (Not exported.)
        </member>
        <member name="F:NPOI.Util.BigInteger.TEN">
             The BigInteger constant ten.
            
             @since   1.5
        </member>
        <member name="M:NPOI.Util.BigInteger.ValueOf(System.Int64)">
             Returns a BigInteger whose value is equal to that of the
             specified {@code long}.  This "static factory method" is
             provided in preference to a ({@code long}) constructor
             because it allows for reuse of frequently used BigIntegers.
            
             @param  val value of the BigInteger to return.
             @return a BigInteger with the specified value.
        </member>
        <member name="M:NPOI.Util.BigInteger.ValueOf(System.Int32[])">
            Returns a BigInteger with the given two's complement representation.
            Assumes that the input array will not be modified (the returned
            BigInteger will reference the input array if feasible).
        </member>
        <member name="M:NPOI.Util.BigInteger.BitLengthForInt(System.Int32)">
            Package private method to return bit length for an integer.
        </member>
        <member name="M:NPOI.Util.BigInteger.BitCount">
             Returns the number of bits in the two's complement representation
             of this BigInteger that differ from its sign bit.  This method is
             useful when implementing bit-vector style sets atop BigIntegers.
            
             @return number of bits in the two's complement representation
                     of this BigInteger that differ from its sign bit.
        </member>
        <member name="M:NPOI.Util.BigInteger.Abs">
             Returns a BigInteger whose value is the absolute value of this
             BigInteger.
            
             @return {@code abs(this)}
        </member>
        <member name="M:NPOI.Util.BigInteger.Negate">
             Returns a BigInteger whose value is {@code (-this)}.
            
             @return {@code -this}
        </member>
        <member name="M:NPOI.Util.BigInteger.Pow(System.Int32)">
             Returns a BigInteger whose value is <c>(this<sup>exponent</sup>)</c>.
             Note that {@code exponent} is an integer rather than a BigInteger.
            
             @param  exponent exponent to which this BigInteger is to be raised.
             @return <c>this<sup>exponent</sup></c>
             @throws ArithmeticException {@code exponent} is negative.  (This would
                     cause the operation to yield a non-integer value.)
        </member>
        <member name="M:NPOI.Util.BigInteger.MultiplyToLen(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32[])">
            Multiplies int arrays x and y to the specified lengths and places
            the result into z. There will be no leading zeros in the resultant array.
        </member>
        <member name="M:NPOI.Util.BigInteger.mulAdd(System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32)">
            Multiply an array by one word k and add to result, return the carry
        </member>
        <member name="M:NPOI.Util.BigInteger.squareToLen(System.Int32[],System.Int32,System.Int32[])">
            Squares the contents of the int array x. The result is placed into the
            int array z.  The contents of x are not changed.
        </member>
        <member name="M:NPOI.Util.BigInteger.addOne(System.Int32[],System.Int32,System.Int32,System.Int32)">
            Add one word to the number a mlen words into a. Return the resulting
            carry.
        </member>
        <member name="M:NPOI.Util.BigInteger.Signum">
             Returns the signum function of this BigInteger.
            
             @return -1, 0 or 1 as the value of this BigInteger is negative, zero or
                     positive.
        </member>
        <member name="M:NPOI.Util.BigInteger.ToByteArray">
             Returns a byte array containing the two's-complement
             representation of this BigInteger.  The byte array will be in
             <i>big-endian</i> byte-order: the most significant byte is in
             the zeroth element.  The array will contain the minimum number
             of bytes required to represent this BigInteger, including at
             least one sign bit, which is {@code (ceil((this.bitLength() +
             1)/8))}.  (This representation is compatible with the
             {@link #BigInteger(byte[]) (byte[])} constructor.)
            
             @return a byte array containing the two's-complement representation of
                     this BigInteger.
             @see    #BigInteger(byte[])
        </member>
        <member name="M:NPOI.Util.BigInteger.intLength">
            Returns the length of the two's complement representation in ints,
            including space for at least one sign bit.
        </member>
        <member name="M:NPOI.Util.BigInteger.GetInt(System.Int32)">
            Returns the specified int of the little-endian two's complement
            representation (int 0 is the least significant).  The int number can
            be arbitrarily high (values are logically preceded by infinitely many
            sign ints).
        </member>
        <member name="M:NPOI.Util.BigInteger.FirstNonzeroIntNum">
            Returns the index of the int that contains the first nonzero int in the
            little-endian binary representation of the magnitude (int 0 is the
            least significant). If the magnitude is zero, return value is undefined.
        </member>
        <member name="M:NPOI.Util.BigInteger.stripLeadingZeroBytes(System.Byte[])">
            Returns a copy of the input array stripped of any leading zero bytes.
        </member>
        <member name="M:NPOI.Util.BigInteger.makePositive(System.Byte[])">
            Takes an array a representing a negative 2's-complement number and
            returns the minimal (no leading zero bytes) unsigned whose value is -a.
        </member>
        <member name="M:NPOI.Util.BigInteger.makePositive(System.Int32[])">
            Takes an array a representing a negative 2's-complement number and
            returns the minimal (no leading zero ints) unsigned whose value is -a.
        </member>
        <member name="M:NPOI.Util.BigInteger.NumberOfLeadingZeros(System.Int32)">
             Returns the number of zero bits preceding the highest-order
             ("leftmost") one-bit in the two's complement binary representation
             of the specified {@code int} value.  Returns 32 if the
             specified value has no one-bits in its two's complement representation,
             in other words if it is equal to zero.
            
             Note that this method is closely related to the logarithm base 2.
             For all positive {@code int} values x:
             <ul>
             <li>floor(log<sub>2</sub>(x)) = {@code 31 - numberOfLeadingZeros(x)}</li>
             <li>ceil(log<sub>2</sub>(x)) = {@code 32 - numberOfLeadingZeros(x - 1)}</li>
             </ul>
            
             @return the number of zero bits preceding the highest-order
                 ("leftmost") one-bit in the two's complement binary representation
                 of the specified {@code int} value, or 32 if the value
                 is equal to zero.
             @since 1.5
        </member>
        <member name="M:NPOI.Util.BigInteger.NumberOfTrailingZeros(System.Int32)">
             Returns the number of zero bits following the lowest-order ("rightmost")
             one-bit in the two's complement binary representation of the specified
             {@code int} value.  Returns 32 if the specified value has no
             one-bits in its two's complement representation, in other words if it is
             equal to zero.
            
             @return the number of zero bits following the lowest-order ("rightmost")
                 one-bit in the two's complement binary representation of the
                 specified {@code int} value, or 32 if the value is equal
                 to zero.
             @since 1.5
        </member>
        <member name="M:NPOI.Util.BigInteger.BitCountForInt(System.Int32)">
             Returns the number of one-bits in the two's complement binary
             representation of the specified {@code int} value.  This function is
             sometimes referred to as the <i>population count</i>.
            
             @return the number of one-bits in the two's complement binary
                 representation of the specified {@code int} value.
             @since 1.5
        </member>
        <member name="M:NPOI.Util.BigInteger.compareMagnitude(NPOI.Util.BigInteger)">
             Compares the magnitude array of this BigInteger with the specified
             BigInteger's. This is the version of compareTo ignoring sign.
            
             @param val BigInteger whose magnitude array to be compared.
             @return -1, 0 or 1 as this magnitude array is less than, equal to or
                     greater than the magnitude aray for the specified BigInteger's.
        </member>
        <member name="M:NPOI.Util.BigInteger.Equals(System.Object)">
             Compares this BigInteger with the specified Object for equality.
            
             @param  x Object to which this BigInteger is to be compared.
             @return {@code true} if and only if the specified Object is a
                     BigInteger whose value is numerically equal to this BigInteger.
        </member>
        <member name="M:NPOI.Util.BigInteger.Min(NPOI.Util.BigInteger)">
             Returns the minimum of this BigInteger and {@code val}.
            
             @param  val value with which the minimum is to be computed.
             @return the BigInteger whose value is the lesser of this BigInteger and
                     {@code val}.  If they are equal, either may be returned.
        </member>
        <member name="M:NPOI.Util.BigInteger.Max(NPOI.Util.BigInteger)">
             Returns the maximum of this BigInteger and {@code val}.
            
             @param  val value with which the maximum is to be computed.
             @return the BigInteger whose value is the greater of this and
                     {@code val}.  If they are equal, either may be returned.
        </member>
        <member name="M:NPOI.Util.BigInteger.GetHashCode">
             Returns the hash code for this BigInteger.
            
             @return hash code for this BigInteger.
        </member>
        <member name="M:NPOI.Util.BigInteger.IntValue">
             Converts this BigInteger to an {@code int}.  This
             conversion is analogous to a
             <i>narrowing primitive conversion</i> from {@code long} to
             {@code int} as defined in section 5.1.3 of
             <cite>The Java(TM) Language Specification</cite>:
             if this BigInteger is too big to fit in an
             {@code int}, only the low-order 32 bits are returned.
             Note that this conversion can lose information about the
             overall magnitude of the BigInteger value as well as return a
             result with the opposite sign.
            
             @return this BigInteger converted to an {@code int}.
        </member>
        <member name="M:NPOI.Util.BigInteger.LongValue">
             Converts this BigInteger to a {@code long}.  This
             conversion is analogous to a
             <i>narrowing primitive conversion</i> from {@code long} to
             {@code int} as defined in section 5.1.3 of
             <cite>The Java(TM) Language Specification</cite>:
             if this BigInteger is too big to fit in a
             {@code long}, only the low-order 64 bits are returned.
             Note that this conversion can lose information about the
             overall magnitude of the BigInteger value as well as return a
             result with the opposite sign.
            
             @return this BigInteger converted to a {@code long}.
        </member>
        <member name="M:NPOI.Util.BigInteger.ShiftRight(System.Int32)">
             Returns a BigInteger whose value is {@code (this >> n)}.  Sign
             extension is performed.  The shift distance, {@code n}, may be
             negative, in which case this method performs a left shift.
             (Computes <c>floor(this / 2<sup>n</sup>)</c>.)
            
             @param  n shift distance, in bits.
             @return {@code this >> n}
             @throws ArithmeticException if the shift distance is {@code
                     Integer.Min_VALUE}.
             @see #shiftLeft
        </member>
        <member name="M:NPOI.Util.BigInteger.Not">
             Returns a BigInteger whose value is {@code (~this)}.  (This method
             returns a negative value if and only if this BigInteger is
             non-negative.)
            
             @return {@code ~this}
        </member>
        <member name="M:NPOI.Util.BigInteger.Or(NPOI.Util.BigInteger)">
             Returns a BigInteger whose value is {@code (this | val)}.  (This method
             returns a negative BigInteger if and only if either this or val is
             negative.)
            
             @param val value to be OR'ed with this BigInteger.
             @return {@code this | val}
        </member>
        <member name="M:NPOI.Util.BigInteger.Multiply(System.Int64)">
            Package private methods used by BigDecimal code to multiply a BigInteger
            with a long. Assumes v is not equal to INFLATED.
        </member>
        <member name="M:NPOI.Util.BigInteger.Multiply(NPOI.Util.BigInteger)">
             Returns a BigInteger whose value is {@code (this * val)}.
            
             @param  val value to be multiplied by this BigInteger.
             @return {@code this * val}
        </member>
        <member name="M:NPOI.Util.BigInteger.Add(NPOI.Util.BigInteger)">
             Returns a BigInteger whose value is {@code (this + val)}.
            
             @param  val value to be added to this BigInteger.
             @return {@code this + val}
        </member>
        <member name="M:NPOI.Util.BigInteger.add(System.Int32[],System.Int32[])">
            Adds the contents of the int arrays x and y. This method allocates
            a new int array to hold the answer and returns a reference to that
            array.
        </member>
        <member name="M:NPOI.Util.BigInteger.Subtract(NPOI.Util.BigInteger)">
             Returns a BigInteger whose value is {@code (this - val)}.
            
             @param  val value to be subtracted from this BigInteger.
             @return {@code this - val}
        </member>
        <member name="M:NPOI.Util.BigInteger.Subtract(System.Int32[],System.Int32[])">
            Subtracts the contents of the second int arrays (little) from the
            first (big).  The first int array (big) must represent a larger number
            than the second.  This method allocates the space necessary to hold the
            answer.
        </member>
        <member name="M:NPOI.Util.BigInteger.Divide(NPOI.Util.BigInteger)">
             Returns a BigInteger whose value is {@code (this / val)}.
            
             @param  val value by which this BigInteger is to be divided.
             @return {@code this / val}
             @throws ArithmeticException if {@code val} is zero.
        </member>
        <member name="F:NPOI.Util.MutableBigInteger._value">
            Holds the magnitude of this MutableBigInteger in big endian order.
            The magnitude may start at an offset into the value array, and it may
            end before the length of the value array.
        </member>
        <member name="F:NPOI.Util.MutableBigInteger.intLen">
            The number of ints of the value array that are currently used
            to hold the magnitude of this MutableBigInteger. The magnitude starts
            at an offset and offset + intLen may be less than value.Length.
        </member>
        <member name="F:NPOI.Util.MutableBigInteger.offset">
            The offset into the value array where the magnitude of this
            MutableBigInteger begins.
        </member>
        <member name="F:NPOI.Util.MutableBigInteger.One">
            MutableBigInteger with one element value array with the value 1. Used by
            BigDecimal divideAndRound to increment the quotient. Use this constant
            only when the method is not going to modify this object.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.#ctor">
            The default constructor. An empty MutableBigInteger is created with
            a one word capacity.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.#ctor(System.Int32)">
            Construct a new MutableBigInteger with a magnitude specified by
            the int val.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.#ctor(System.Int32[])">
            Construct a new MutableBigInteger with the specified value array
            up to the length of the array supplied.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.#ctor(NPOI.Util.BigInteger)">
            Construct a new MutableBigInteger with a magnitude equal to the
            specified BigInteger.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.#ctor(NPOI.Util.MutableBigInteger)">
            Construct a new MutableBigInteger with a magnitude equal to the
            specified MutableBigInteger.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.getMagnitudeArray">
            Internal helper method to return the magnitude array. The caller is not
            supposed to modify the returned array.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.toLong">
            Convert this MutableBigInteger to a long value. The caller has to make
            sure this MutableBigInteger can be fit into long.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.toBigInteger(System.Int32)">
            Convert this MutableBigInteger to a BigInteger object.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.clear">
            Clear out a MutableBigInteger for reuse.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.reset">
            Set a MutableBigInteger to zero, removing its offset.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.compare(NPOI.Util.MutableBigInteger)">
            Compare the magnitude of two MutableBigIntegers. Returns -1, 0 or 1
            as this MutableBigInteger is numerically less than, equal to, or
            greater than <c>b</c>.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.compareHalf(NPOI.Util.MutableBigInteger)">
            Compare this against half of a MutableBigInteger object (Needed for
            remainder tests).
            Assumes no leading unnecessary zeros, which holds for results
            from divide().
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.getLowestSetBit">
            Return the index of the lowest set bit in this MutableBigInteger. If the
            magnitude of this MutableBigInteger is zero, -1 is returned.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.getInt(System.Int32)">
            Return the int in use in this MutableBigInteger at the specified
            index. This method is not used because it is not inlined on all
            platforms.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.getLong(System.Int32)">
            Return a long which is equal to the unsigned value of the int in
            use in this MutableBigInteger at the specified index. This method is
            not used because it is not inlined on all platforms.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.normalize">
            Ensure that the MutableBigInteger is in normal form, specifically
            making sure that there are no leading zeros, and that if the
            magnitude is zero, then intLen is zero.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.ensureCapacity(System.Int32)">
            If this MutableBigInteger cannot hold len words, increase the size
            of the value array to len words.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.toIntArray">
            Convert this MutableBigInteger into an int array with no leading
            zeros, of a length that is equal to this MutableBigInteger's intLen.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.setInt(System.Int32,System.Int32)">
            Sets the int at index+offset in this MutableBigInteger to val.
            This does not get inlined on all platforms so it is not used
            as often as originally intended.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.setValue(System.Int32[],System.Int32)">
            Sets this MutableBigInteger's value array to the specified array.
            The intLen is set to the specified length.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.copyValue(NPOI.Util.MutableBigInteger)">
            Sets this MutableBigInteger's value array to a copy of the specified
            array. The intLen is set to the length of the new array.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.copyValue(System.Int32[])">
            Sets this MutableBigInteger's value array to a copy of the specified
            array. The intLen is set to the length of the specified array.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.isOne">
            Returns true iff this MutableBigInteger has a value of one.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.isZero">
            Returns true iff this MutableBigInteger has a value of zero.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.isEven">
            Returns true iff this MutableBigInteger is even.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.isOdd">
            Returns true iff this MutableBigInteger is odd.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.isNormal">
            Returns true iff this MutableBigInteger is in normal form. A
            MutableBigInteger is in normal form if it has no leading zeros
            after the offset, and intLen + offset &lt;= value.Length.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.toString">
            Returns a String representation of this MutableBigInteger in radix 10.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.rightShift(System.Int32)">
            Right shift this MutableBigInteger n bits. The MutableBigInteger is left
            in normal form.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.leftShift(System.Int32)">
            Left shift this MutableBigInteger n bits.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.divadd(System.Int32[],System.Int32[],System.Int32)">
            A primitive used for division. This method adds in one multiple of the
            divisor a back to the dividend result at a specified offset. It is used
            when qhat was estimated too large, and must be adjusted.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.mulsub(System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32)">
            This method is used for division. It multiplies an n word input a by one
            word input x, and subtracts the n word product from q. This is needed
            when subtracting qhat*divisor from dividend.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.primitiveRightShift(System.Int32)">
            Right shift this MutableBigInteger n bits, where n is
            less than 32.
            Assumes that intLen > 0, n > 0 for speed
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.primitiveLeftShift(System.Int32)">
            Left shift this MutableBigInteger n bits, where n is
            less than 32.
            Assumes that intLen > 0, n > 0 for speed
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.add(NPOI.Util.MutableBigInteger)">
            Adds the contents of two MutableBigInteger objects.The result
            is placed within this MutableBigInteger.
            The contents of the addend are not changed.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.subtract(NPOI.Util.MutableBigInteger)">
            Subtracts the smaller of this and b from the larger and places the
            result into this MutableBigInteger.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.difference(NPOI.Util.MutableBigInteger)">
            Subtracts the smaller of a and b from the larger and places the result
            into the larger. Returns 1 if the answer is in a, -1 if in b, 0 if no
            operation was performed.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.multiply(NPOI.Util.MutableBigInteger,NPOI.Util.MutableBigInteger)">
            Multiply the contents of two MutableBigInteger objects. The result is
            placed into MutableBigInteger z. The contents of y are not changed.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.mul(System.Int32,NPOI.Util.MutableBigInteger)">
            Multiply the contents of this MutableBigInteger by the word y. The
            result is placed into z.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.divideOneWord(System.Int32,NPOI.Util.MutableBigInteger)">
             This method is used for division of an n word dividend by a one word
             divisor. The quotient is placed into quotient. The one word divisor is
             specified by divisor.
            
             @return the remainder of the division is returned.
            
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.divide(NPOI.Util.MutableBigInteger,NPOI.Util.MutableBigInteger)">
             Calculates the quotient of this div b and places the quotient in the
             provided MutableBigInteger objects and the remainder object is returned.
            
             Uses Algorithm D in Knuth section 4.3.1.
             Many optimizations to that algorithm have been adapted from the Colin
             Plumb C library.
             It special cases one word divisors for speed. The content of b is not
             changed.
            
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.divide(System.Int64,NPOI.Util.MutableBigInteger)">
             Internally used  to calculate the quotient of this div v and places the
             quotient in the provided MutableBigInteger object and the remainder is
             returned.
            
             @return the remainder of the division will be returned.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.divideMagnitude(System.Int32[],NPOI.Util.MutableBigInteger)">
            Divide this MutableBigInteger by the divisor represented by its magnitude
            array. The quotient will be placed into the provided quotient object &amp;
            the remainder object is returned.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.unsignedLongCompare(System.Int64,System.Int64)">
            Compare two longs as if they were unsigned.
            Returns true iff one is bigger than two.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.divWord(System.Int32[],System.Int64,System.Int32)">
            This method divides a long quantity by an int to estimate
            qhat for two multi precision numbers. It is used when
            the signed value of n is less than zero.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.hybridGCD(NPOI.Util.MutableBigInteger)">
            Calculate GCD of this and b. This and b are changed by the computation.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.binaryGCD(NPOI.Util.MutableBigInteger)">
            Calculate GCD of this and v.
            Assumes that this and v are not zero.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.binaryGcd(System.Int32,System.Int32)">
            Calculate GCD of a and b interpreted as unsigned integers.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.mutableModInverse(NPOI.Util.MutableBigInteger)">
            Returns the modInverse of this mod p. This and p are not affected by
            the operation.
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.modInverse(NPOI.Util.MutableBigInteger)">
             Calculate the multiplicative inverse of this mod mod, where mod is odd.
             This and mod are not changed by the calculation.
            
             This method implements an algorithm due to Richard Schroeppel, that uses
             the same intermediate representation as Montgomery Reduction
             ("Montgomery Form").  The algorithm is described in an unpublished
             manuscript entitled "Fast Modular Reciprocals."
        </member>
        <member name="M:NPOI.Util.MutableBigInteger.euclidModInverse(System.Int32)">
            Uses the extended Euclidean algorithm to compute the modInverse of base
            mod a modulus that is a power of 2. The modulus is 2^k.
        </member>
        <member name="T:NPOI.Util.BitField">
            <summary>
            Manage operations dealing with bit-mapped fields.
            @author Marc Johnson (mjohnson at apache dot org)
            @author Andrew C. Oliver (acoliver at apache dot org)
            </summary>
        </member>
        <member name="M:NPOI.Util.BitField.#ctor(System.Int32)">
            <summary>
            Create a <see cref="T:NPOI.Util.BitField"/> instance
            </summary>
            <param name="mask">
            the mask specifying which bits apply to this
            BitField. Bits that are set in this mask are the
            bits that this BitField operates on
            </param>
        </member>
        <member name="M:NPOI.Util.BitField.#ctor(System.UInt32)">
            <summary>
            Create a <see cref="T:NPOI.Util.BitField"/> instance
            </summary>
            <param name="mask">
            the mask specifying which bits apply to this
            BitField. Bits that are set in this mask are the
            bits that this BitField operates on
            </param>
        </member>
        <member name="M:NPOI.Util.BitField.Clear(System.Int32)">
            <summary>
            Clear the bits.
            </summary>
            <param name="holder">the int data containing the bits we're interested in</param>
            <returns>the value of holder with the specified bits cleared (set to 0)</returns>
        </member>
        <member name="M:NPOI.Util.BitField.ClearShort(System.Int16)">
            <summary>
            Clear the bits.
            </summary>
            <param name="holder">the short data containing the bits we're interested in</param>
            <returns>the value of holder with the specified bits cleared (set to 0)</returns>
        </member>
        <member name="M:NPOI.Util.BitField.GetRawValue(System.Int32)">
            <summary>
            Obtain the value for the specified BitField, appropriately
            shifted right. Many users of a BitField will want to treat the
            specified bits as an int value, and will not want to be aware
            that the value is stored as a BitField (and so shifted left so
            many bits)
            </summary>
            <param name="holder">the int data containing the bits we're interested in</param>
            <returns>the selected bits, shifted right appropriately</returns>
        </member>
        <member name="M:NPOI.Util.BitField.GetShortRawValue(System.Int16)">
            <summary>
            Obtain the value for the specified BitField, unshifted
            </summary>
            <param name="holder">the short data containing the bits we're interested in</param>
            <returns>the selected bits</returns>
        </member>
        <member name="M:NPOI.Util.BitField.GetShortValue(System.Int16)">
            <summary>
            Obtain the value for the specified BitField, appropriately
            shifted right, as a short. Many users of a BitField will want
            to treat the specified bits as an int value, and will not want
            to be aware that the value is stored as a BitField (and so
            shifted left so many bits)
            </summary>
            <param name="holder">the short data containing the bits we're interested in</param>
            <returns>the selected bits, shifted right appropriately</returns>
        </member>
        <member name="M:NPOI.Util.BitField.GetValue(System.Int32)">
            <summary>
            Obtain the value for the specified BitField, appropriately
            shifted right. Many users of a BitField will want to treat the
            specified bits as an int value, and will not want to be aware
            that the value is stored as a BitField (and so shifted left so
            many bits)
            </summary>
            <param name="holder">the int data containing the bits we're interested in</param>
            <returns>the selected bits, shifted right appropriately</returns>
        </member>
        <member name="M:NPOI.Util.BitField.IsAllSet(System.Int32)">
            <summary>
            Are all of the bits set or not? This is a stricter test than
            isSet, in that all of the bits in a multi-bit set must be set
            for this method to return true
            </summary>
            <param name="holder">the int data containing the bits we're interested in</param>
            <returns>
            	<c>true</c> if all of the bits are set otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NPOI.Util.BitField.IsSet(System.Int32)">
            <summary>
            is the field set or not? This is most commonly used for a
            single-bit field, which is often used to represent a boolean
            value; the results of using it for a multi-bit field is to
            determine whether *any* of its bits are set
            </summary>
            <param name="holder">the int data containing the bits we're interested in</param>
            <returns>
            	<c>true</c> if any of the bits are set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NPOI.Util.BitField.Set(System.Int32)">
            <summary>
            Set the bits.
            </summary>
            <param name="holder">the int data containing the bits we're interested in</param>
            <returns>the value of holder with the specified bits set to 1</returns>
        </member>
        <member name="M:NPOI.Util.BitField.SetBoolean(System.Int32,System.Boolean)">
            <summary>
            Set a boolean BitField
            </summary>
            <param name="holder">the int data containing the bits we're interested in</param>
            <param name="flag">indicating whether to set or clear the bits</param>
            <returns>the value of holder with the specified bits set or cleared</returns>
        </member>
        <member name="M:NPOI.Util.BitField.SetShort(System.Int16)">
            <summary>
            Set the bits.
            </summary>
            <param name="holder">the short data containing the bits we're interested in</param>
            <returns>the value of holder with the specified bits set to 1</returns>
        </member>
        <member name="M:NPOI.Util.BitField.SetShortBoolean(System.Int16,System.Boolean)">
            <summary>
            Set a boolean BitField
            </summary>
            <param name="holder">the short data containing the bits we're interested in</param>
            <param name="flag">indicating whether to set or clear the bits</param>
            <returns>the value of holder with the specified bits set or cleared</returns>
        </member>
        <member name="M:NPOI.Util.BitField.SetShortValue(System.Int16,System.Int16)">
            <summary>
            Obtain the value for the specified BitField, appropriately
            shifted right, as a short. Many users of a BitField will want
            to treat the specified bits as an int value, and will not want
            to be aware that the value is stored as a BitField (and so
            shifted left so many bits)
            </summary>
            <param name="holder">the short data containing the bits we're interested in</param>
            <param name="value">the new value for the specified bits</param>
            <returns>the selected bits, shifted right appropriately</returns>
        </member>
        <member name="M:NPOI.Util.BitField.SetValue(System.Int32,System.Int32)">
            <summary>
            Sets the value.
            </summary>
            <param name="holder">the byte data containing the bits we're interested in</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NPOI.Util.BitField.SetByteBoolean(System.Byte,System.Boolean)">
            <summary>
            Set a boolean BitField
            </summary>
            <param name="holder"> the byte data containing the bits we're interested in</param>
            <param name="flag">indicating whether to set or clear the bits</param>
            <returns>the value of holder with the specified bits set or cleared</returns>
        </member>
        <member name="M:NPOI.Util.BitField.ClearByte(System.Byte)">
            <summary>
            Clears the bits.
            </summary>
            <param name="holder">the byte data containing the bits we're interested in</param>
            <returns>the value of holder with the specified bits cleared</returns>
        </member>
        <member name="M:NPOI.Util.BitField.SetByte(System.Byte)">
            <summary>
            Set the bits.
            </summary>
            <param name="holder">the byte data containing the bits we're interested in</param>
            <returns>the value of holder with the specified bits set to 1</returns>
        </member>
        <member name="M:NPOI.Util.ByteBuffer.Remaining">
            <summary>
            Returns the number of elements between the current position and the limit.
            </summary>
            <returns>The number of elements remaining in this buffer</returns>
        </member>
        <member name="M:NPOI.Util.ByteBuffer.HasRemaining">
            <summary>
            Tells whether there are any elements between the current position and the limit.
            </summary>
            <returns>true if, and only if, there is at least one element remaining in this buffer</returns>
        </member>
        <member name="T:NPOI.Util.ByteField">
            <summary>
            representation of a byte (8-bit) field at a fixed location within a
            byte array
            @author Marc Johnson (mjohnson at apache dot org    
            </summary>
        </member>
        <member name="M:NPOI.Util.ByteField.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NPOI.Util.ByteField"/> class.
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:NPOI.Util.ByteField.#ctor(System.Int32,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:NPOI.Util.ByteField"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NPOI.Util.ByteField.#ctor(System.Int32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NPOI.Util.ByteField"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="data">The data.</param>
        </member>
        <member name="P:NPOI.Util.ByteField.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:NPOI.Util.ByteField.ReadFromBytes(System.Byte[])">
            <summary>
            set the value from its offset into an array of bytes
            </summary>
            <param name="data">the byte array from which the value is to be read</param>
        </member>
        <member name="M:NPOI.Util.ByteField.ReadFromStream(System.IO.Stream)">
            <summary>
            set the value from an Stream
            </summary>
            <param name="stream">the Stream from which the value is to be read</param>
        </member>
        <member name="M:NPOI.Util.ByteField.Set(System.Byte,System.Byte[])">
            <summary>
            set the ByteField's current value and write it to a byte array
            </summary>
            <param name="value">value to be set</param>
            <param name="data">the byte array to write the value to</param>
        </member>
        <member name="M:NPOI.Util.ByteField.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NPOI.Util.ByteField.WriteToBytes(System.Byte[])">
            <summary>
            write the value out to an array of bytes at the appropriate offset
            </summary>
            <param name="data">the array of bytes to which the value is to be written</param>
        </member>
        <member name="T:NPOI.Util.ClassID">
            <summary>
            Represents a class ID (16 bytes). Unlike other little-endian
            type the {@link ClassID} is not just 16 bytes stored in the wrong
            order. Instead, it is a double word (4 bytes) followed by two
            words (2 bytes each) followed by 8 bytes.
            @author Rainer Klute 
            <a href="mailto:klute@rainer-klute.de">klute@rainer-klute.de</a>
            @version $Id: ClassID.java 489730 2006-12-22 19:18:16Z bayard $
            @since 2002-02-09
            </summary>
        </member>
        <member name="F:NPOI.Util.ClassID.bytes">
            The bytes making out the class ID in correct order,
            i.e. big-endian.
        </member>
        <member name="M:NPOI.Util.ClassID.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a <see cref="T:NPOI.Util.ClassID"/> and Reads its value from a byte array.
            </summary>
            <param name="src">The byte array to Read from.</param>
            <param name="offset">The offset of the first byte to Read.</param>
        </member>
        <member name="F:NPOI.Util.ClassID.LENGTH">
            The number of bytes occupied by this object in the byte
            stream. 
        </member>
        <member name="M:NPOI.Util.ClassID.Read(System.Byte[],System.Int32)">
            <summary>
            Reads the class ID's value from a byte array by turning little-endian into big-endian.
            </summary>
            <param name="src">The byte array to Read from</param>
            <param name="offset">The offset within the </param>
            <returns>A byte array containing the class ID.</returns>
        </member>
        <member name="M:NPOI.Util.ClassID.Write(System.Byte[],System.Int32)">
            <summary>
            Writes the class ID to a byte array in the little-endian format.
            </summary>
            <param name="dst">The byte array to Write to.</param>
            <param name="offset">The offset within the </param>
        </member>
        <member name="M:NPOI.Util.ClassID.Equals(System.Object)">
            <summary>
            Checks whether this ClassID is equal to another
            object.
            </summary>
            <param name="o">the object to compare this PropertySet with</param>
            <returns>true if the objects are equal, else
            false</returns>
        </member>
        <member name="M:NPOI.Util.ClassID.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NPOI.Util.ClassID.ToString">
            <summary>
            Returns a human-Readable representation of the Class ID in standard
            format <c>"{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}"</c>.
            </summary>
            <returns>
            A String representation of the Class ID represented by this object..
            </returns>
        </member>
        <member name="T:NPOI.Util.FixedField">
            <summary>
            behavior of a field at a fixed location within a byte array
            @author Marc Johnson (mjohnson at apache dot org
            </summary>
        </member>
        <member name="M:NPOI.Util.FixedField.ReadFromBytes(System.Byte[])">
            <summary>
            set the value from its offset into an array of bytes
            </summary>
            <param name="data">the byte array from which the value is to be read</param>
        </member>
        <member name="M:NPOI.Util.FixedField.ReadFromStream(System.IO.Stream)">
            <summary>
            set the value from an Stream
            </summary>
            <param name="stream">the Stream from which the value is to be read</param>
        </member>
        <member name="M:NPOI.Util.FixedField.ToString">
            <summary>
            return the value as a String
            </summary>
            <returns></returns>
        </member>
        <member name="M:NPOI.Util.FixedField.WriteToBytes(System.Byte[])">
            <summary>
            write the value out to an array of bytes at the appropriate offset
            </summary>
            <param name="data">the array of bytes to which the value is to be written</param>
        </member>
        <member name="T:NPOI.Util.HexDump">
            <summary>
            dump data in hexadecimal format; derived from a HexDump utility I
            wrote in June 2001.
            @author Marc Johnson
            @author Glen Stampoultzis  (glens at apache.org)
            </summary>
        </member>
        <member name="M:NPOI.Util.HexDump.Dump(System.Byte[],System.Int64,System.Int32,System.Int32)">
             dump an array of bytes to a String
            
             @param data the byte array to be dumped
             @param offset its offset, whatever that might mean
             @param index initial index into the byte array
             @param length number of characters to output
            
             @exception ArrayIndexOutOfBoundsException if the index is
                        outside the data array's bounds
             @return output string
        </member>
        <member name="M:NPOI.Util.HexDump.LongToHex(System.Int64)">
            <summary>
            char array of 4 (zero padded) uppercase hex chars and prefixed with '0x'
            </summary>
            <param name="value">The value.</param>
            <returns>char array of 4 (zero padded) uppercase hex chars and prefixed with '0x'</returns>
        </member>
        <member name="M:NPOI.Util.HexDump.ToHexChars(System.Int64,System.Int32)">
            <summary>
            Toes the hex chars.
            </summary>
            <param name="pValue">The p value.</param>
            <param name="nBytes">The n bytes.</param>
            <returns>char array of uppercase hex chars, zero padded and prefixed with '0x'</returns>
        </member>
        <member name="M:NPOI.Util.InputStream.Read">
            <summary>
            Reads the next byte of data from the input stream. The value byte is
            returned as an <c>int</c> in the range <c>0</c> to
            <c>255</c>. If no byte is available because the end of the stream
            has been reached, the value <c>-1</c> is returned. This method
            blocks until input data is available, the end of the stream is detected,
            or an exception is thrown.
            
            A subclass must provide an implementation of this method.
            </summary>
            <returns>
            the next byte of data, or <c>-1</c> if the end of the
            stream is reached.
            </returns>
            <exception cref="T:System.IO.IOException">if an I/O error occurs</exception>
        </member>
        <member name="M:NPOI.Util.InputStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Reads up to <c>len</c> bytes of data from the input stream into
             an array of bytes.  An attempt is made to read as many as
             <c>len</c> bytes, but a smaller number may be read.
             The number of bytes actually read is returned as an integer.
            
             <p> This method blocks until input data is available, end of file is
             detected, or an exception is thrown.</p>
            
             <p> If <c>len</c> is zero, then no bytes are read and
             <c>0</c> is returned; otherwise, there is an attempt to read at
             least one byte. If no byte is available because the stream is at end of
             file, the value <c>-1</c> is returned; otherwise, at least one
             byte is read and stored into <c>b</c>.</p>
            
             <p> The first byte read is stored into element <c>b[off]</c>, the
             next one into <c>b[off+1]</c>, and so on. The number of bytes read
             is, at most, equal to <c>len</c>. Let <i>k</i> be the number of
             bytes actually read; these bytes will be stored in elements
             <c>b[off]</c> through <c>b[off+</c><i>k</i><c>-1]</c>,
             leaving elements <c>b[off+</c><i>k</i><c>]</c> through
             <c>b[off+len-1]</c> unaffected.</p>
            
             <p> In every case, elements <c>b[0]</c> through
             <c>b[off]</c> and elements <c>b[off+len]</c> through
             <c>b[b.length-1]</c> are unaffected.</p>
            
             <p> The <c>read(b,</c> <c>off,</c> <c>len)</c> method
             for class <c>InputStream</c> simply calls the method
             <c>read()</c> repeatedly. If the first such call results in an
             <c>IOException</c>, that exception is returned from the call to
             the <c>read(b,</c> <c>off,</c> <c>len)</c> method.  If
             any subsequent call to <c>read()</c> results in a
             <c>IOException</c>, the exception is caught and treated as if it
             were end of file; the bytes read up to that point are stored into
             <c>b</c> and the number of bytes read before the exception
             occurred is returned. The default implementation of this method blocks
             until the requested amount of input data <c>len</c> has been read,
             end of file is detected, or an exception is thrown. Subclasses are encouraged
             to provide a more efficient implementation of this method.</p>
             </summary>
             <param name="b">the buffer into which the data is read.</param>
             <param name="off">the start offset in array <c>b</c> at which the data is written.</param>
             <param name="len">the maximum number of bytes to read.</param>
             <returns>
             the total number of bytes read into the buffer, or
             <c>-1</c> if there is no more data because the end of
             the stream has been reached.</returns>
             <exception cref="T:System.IO.IOException">If the first byte cannot be read for any reason
             other than end of file, or if the input stream has been closed, or if
             some other I/O error occurs.</exception>
             <exception cref="T:System.NullReferenceException">If <c>b</c> is <c>null</c>.</exception>
             <exception cref="T:System.IndexOutOfRangeException">If <c>off</c> is negative,
             <c>len</c> is negative, or <c>len</c> is greater than
             <c>b.length - off</c></exception>
             <see cref="M:NPOI.Util.InputStream.Read"/>
        </member>
        <member name="M:NPOI.Util.InputStream.Skip(System.Int64)">
             <summary>
             Skips over and discards <c>n</c> bytes of data from this input
             stream. The <c>skip</c> method may, for a variety of reasons, end
             up skipping over some smaller number of bytes, possibly <c>0</c>.
             This may result from any of a number of conditions; reaching end of file
             before <c>n</c> bytes have been skipped is only one possibility.
             The actual number of bytes skipped is returned. If {@code n} is
             negative, the {@code skip} method for class {@code InputStream} always
             returns 0, and no bytes are skipped. Subclasses may handle the negative
             value differently.
            
             <p> The <c>skip</c> method of this class creates a
             byte array and then repeatedly reads into it until <c>n</c> bytes
             have been read or the end of the stream has been reached. Subclasses are
             encouraged to provide a more efficient implementation of this method.
             For instance, the implementation may depend on the ability to seek.</p>
             </summary>
             <param name="n">the number of bytes to be skipped.</param>
             <returns>the actual number of bytes skipped.</returns>
             <exception cref="T:System.IO.IOException">if the stream does not support seek,
             or if some other I/O error occurs.
             </exception>
        </member>
        <member name="M:NPOI.Util.InputStream.Available">
             <summary>
             Returns an estimate of the number of bytes that can be read (or
             skipped over) from this input stream without blocking by the next
             invocation of a method for this input stream. The next invocation
             might be the same thread or another thread.  A single read or skip of this
             many bytes will not block, but may read or skip fewer bytes.
            
             <p> Note that while some implementations of {@code InputStream} will return
             the total number of bytes in the stream, many will not.  It is
             never correct to use the return value of this method to allocate
             a buffer intended to hold all data in this stream.</p>
            
             <p> A subclass' implementation of this method may choose to throw an
             {@link IOException} if this input stream has been closed by
             invoking the {@link #close()} method.</p>
            
             <p> The {@code available} method for class {@code InputStream} always
             returns {@code 0}.</p>
            
             <p> This method should be overridden by subclasses.</p>
             </summary>
             <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
        </member>
        <member name="M:NPOI.Util.InputStream.Close">
             <summary>
             Closes this input stream and releases any system resources associated
             with the stream.
            
             <p> The <c>Close</c> method of <c>InputStream</c> does nothing.</p>
             </summary>
             <exception cref="T:System.IO.IOException">if an I/O error occurs.</exception>
        </member>
        <member name="M:NPOI.Util.InputStream.Mark(System.Int32)">
             <summary>
             Marks the current position in this input stream. A subsequent call to
             the <c>reset</c> method repositions this stream at the last marked
             position so that subsequent reads re-read the same bytes.
            
             <p> The <c>readlimit</c> arguments tells this input stream to
             allow that many bytes to be read before the mark position gets
             invalidated.</p>
            
             <p> The general contract of <c>mark</c> is that, if the method
             <c>markSupported</c> returns <c>true</c>, the stream somehow
             remembers all the bytes read after the call to <c>mark</c> and
             stands ready to supply those same bytes again if and whenever the method
             <c>reset</c> is called.  However, the stream is not required to
             remember any data at all if more than <c>readlimit</c> bytes are
             read from the stream before <c>reset</c> is called.</p>
            
             <p> Marking a closed stream should not have any effect on the stream.</p>
            
             <p> The <c>mark</c> method of <c>InputStream</c> does
             nothing.</p>
             </summary>
             <param name="readlimit">the maximum limit of bytes that can be read before
             the mark position becomes invalid.
             </param>
             <see cref="M:NPOI.Util.InputStream.Reset"/>
        </member>
        <member name="M:NPOI.Util.InputStream.Reset">
             <summary>
             Repositions this stream to the position at the time the
             <c>mark</c> method was last called on this input stream.
            
             <p> The general contract of <c>reset</c> is:</p>
            
             <ul>
             <li> If the method <c>markSupported</c> returns
             <c>true</c>, then:
            
                 <ul><li> If the method <c>mark</c> has not been called since
                 the stream was created, or the number of bytes read from the stream
                 since <c>mark</c> was last called is larger than the argument
                 to <c>mark</c> at that last call, then an
                 <c>IOException</c> might be thrown.</li>
            
                 <li> If such an <c>IOException</c> is not thrown, then the
                 stream is reset to a state such that all the bytes read since the
                 most recent call to <c>mark</c> (or since the start of the
                 file, if <c>mark</c> has not been called) will be resupplied
                 to subsequent callers of the <c>read</c> method, followed by
                 any bytes that otherwise would have been the next input data as of
                 the time of the call to <c>reset</c>. </li>
            
             <li> If the method <c>markSupported</c> returns
             <c>false</c>, then:
            
                 <ul><li> The call to <c>reset</c> may throw an
                 <c>IOException</c>.</li>
            
                 <li> If an <c>IOException</c> is not thrown, then the stream
                 is reset to a fixed state that depends on the particular type of the
                 input stream and how it was created. The bytes that will be supplied
                 to subsequent callers of the <c>read</c> method depend on the
                 particular type of the input stream. </li></ul></li></ul></li></ul>
            
             <p>The method <c>reset</c> for class <c>InputStream</c>
             does nothing except throw an <c>IOException</c>.</p>
             </summary>
        </member>
        <member name="M:NPOI.Util.IntegerField.#ctor(System.Int32)">
            <summary>
            construct the <see cref="T:NPOI.Util.IntegerField"/> with its offset into its containing byte array  class.
            </summary>
            <param name="offset">offset of the field within its byte array.</param>
        </member>
        <member name="M:NPOI.Util.IntegerField.#ctor(System.Int32,System.Byte[])">
            <summary>
            Construct the <see cref="T:NPOI.Util.IntegerField"/> with its offset into its containing
            byte array and initialize its value from its byte array
            </summary>
            <param name="offset">offset of the field within its byte array</param>
            <param name="data">the byte array to Read the value from</param>
        </member>
        <member name="M:NPOI.Util.IntegerField.#ctor(System.Int32,System.Int32,System.Byte[])">
            <summary>
            construct the <see cref="T:NPOI.Util.IntegerField"/> with its offset into its containing 
            byte array, initialize its value, and write the value to a byte
            </summary>
            <param name="offset">offset of the field within its byte array</param>
            <param name="value">the initial value</param>
            <param name="data">the byte array to write the value to</param>
        </member>
        <member name="P:NPOI.Util.IntegerField.Value">
            <summary>
            get or Set the IntegerField's current value
            </summary>
            <value>The value.</value>
            <returns></returns>
        </member>
        <member name="M:NPOI.Util.IntegerField.Set(System.Int32,System.Byte[])">
            <summary>
            Set the IntegerField's current value and write it to a byte array
            </summary>
            <param name="value">value to be Set</param>
            <param name="data">the byte array to write the value to</param>
        </member>
        <member name="M:NPOI.Util.IntegerField.ReadFromBytes(System.Byte[])">
            <summary>
            Set the value from its offset into an array of bytes
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:NPOI.Util.IntegerField.ReadFromStream(System.IO.Stream)">
            <summary>
            Set the value from an Stream
            </summary>
            <param name="stream">the Stream from which the value is to be Read</param>
        </member>
        <member name="M:NPOI.Util.IntegerField.WriteToBytes(System.Byte[])">
            <summary>
            write the value out to an array of bytes at the appropriate offset
            </summary>
            <param name="data"> the array of bytes to which the value is to be written </param>
        </member>
        <member name="M:NPOI.Util.IntegerField.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NPOI.Util.IOUtils.ReadFully(System.IO.Stream,System.Byte[])">
            <summary>
            Reads the fully.
            </summary>
            <param name="stream">The stream.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:NPOI.Util.IOUtils.ReadFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Same as the normal InputStream#read(byte[], int, int), but tries to ensure
            that the buffer is filled completely if possible, i.e. b.remaining()
            returns 0.
            If the end of file is reached before any bytes are Read, returns -1.
            If the end of the file is reached after some bytes are read, returns the
            number of bytes read. If the end of the file isn't reached before the
            buffer has no more remaining capacity, will return the number of bytes
            that were read.
            </summary>
            <param name="stream">the stream from which the data is read.</param>
            <param name="b">the buffer into which the data is read.</param>
            <param name="off">the start offset in array b at which the data is written.</param>
            <param name="len">the maximum number of bytes to read.</param>
            <returns></returns>
        </member>
        <member name="T:NPOI.Util.LittleEndian">
            <summary>
            a utility class for handling little-endian numbers, which the 80x86 world is
            replete with. The methods are all static, and input/output is from/to byte
            arrays, or from InputStreams.
            </summary>
            <remarks>
            @author     Marc Johnson (mjohnson at apache dot org)
            @author     Andrew Oliver (acoliver at apache dot org)
            </remarks>
        </member>
        <member name="M:NPOI.Util.LittleEndian.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NPOI.Util.LittleEndian"/> class.
            </summary>
        </member>
        <member name="M:NPOI.Util.LittleEndian.GetShort(System.Byte[],System.Int32)">
            <summary>
            get a short value from a byte array
            </summary>
            <param name="data">the byte array</param>
            <param name="offset">a starting offset into the byte array</param>
            <returns>the short (16-bit) value</returns>
        </member>
        <member name="M:NPOI.Util.LittleEndian.GetUShort(System.Byte[],System.Int32)">
            <summary>
            get an unsigned short value from a byte array
            </summary>
            <param name="data">the byte array</param>
            <param name="offset">a starting offset into the byte array</param>
            <returns>the unsigned short (16-bit) value in an integer</returns>
        </member>
        <member name="M:NPOI.Util.LittleEndian.GetShort(System.Byte[])">
            <summary>
            get a short value from a byte array
            </summary>
            <param name="data">a starting offset into the byte array</param>
            <returns>the short (16-bit) value</returns>
        </member>
        <member name="M:NPOI.Util.LittleEndian.GetUShort(System.Byte[])">
            <summary>
            get a short value from a byte array
            </summary>
            <param name="data">the unsigned short (16-bit) value in an integer</param>
            <returns></returns>
        </member>
        <member name="M:NPOI.Util.LittleEndian.GetInt(System.Byte[],System.Int32)">
            <summary>
            get an int value from a byte array
            </summary>
            <param name="data">the byte array</param>
            <param name="offset">a starting offset into the byte array</param>
            <returns>the int (32-bit) value</returns>
        </member>
        <member name="M:NPOI.Util.LittleEndian.GetInt(System.Byte[])">
            <summary>
            get an int value from the beginning of a byte array
            </summary>
            <param name="data">the byte array</param>
            <returns>the int (32-bit) value</returns>
        </member>
        <member name="M:NPOI.Util.LittleEndian.GetLong(System.Byte[],System.Int32)">
            <summary>
            get a long value from a byte array
            </summary>
            <param name="data">the byte array</param>
            <param name="offset">a starting offset into the byte array</param>
            <returns>the long (64-bit) value</returns>
        </member>
        <member name="M:NPOI.Util.LittleEndian.PutShort(System.Byte[],System.Int32,System.Int16)">
            <summary>
            Puts the short.
            </summary>
            <param name="data">the byte array</param>
            <param name="offset">a starting offset into the byte array</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NPOI.Util.LittleEndian.PutInt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            put an int value into a byte array
            </summary>
            <param name="data">the byte array</param>
            <param name="offset">a starting offset into the byte array</param>
            <param name="value">the int (32-bit) value</param>
        </member>
        <member name="M:NPOI.Util.LittleEndian.PutLong(System.Byte[],System.Int32,System.Int64)">
            <summary>
            put a long value into a byte array
            </summary>
            <param name="data">the byte array</param>
            <param name="offset">a starting offset into the byte array</param>
            <param name="value">the long (64-bit) value</param>
        </member>
        <member name="M:NPOI.Util.LittleEndian.ReadInt(System.IO.Stream)">
            <summary>
            get an int value from an Stream
            </summary>
            <param name="stream">the Stream from which the int is to be read</param>
            <returns>the int (32-bit) value</returns>
            <exception cref="T:System.IO.IOException">will be propagated back to the caller</exception>
            <exception cref="T:NPOI.Util.BufferUnderrunException">if the stream cannot provide enough bytes</exception>
        </member>
        <member name="T:NPOI.Util.ILittleEndianInput">
            
            @author Josh Micich
        </member>
        <member name="M:NPOI.Util.LongField.#ctor(System.Int32)">
            <summary>
            construct the <see cref="T:NPOI.Util.LongField"/> with its offset into its containing byte array
            </summary>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:NPOI.Util.LongField.#ctor(System.Int32,System.Byte[])">
            <summary>
            Construct the <see cref="T:NPOI.Util.LongField"/> class with its offset into its containing
            byte array and initialize its value from its byte array
            </summary>
            <param name="offset">The offset of the field within its byte array</param>
            <param name="data">the byte array to read the value from</param>
        </member>
        <member name="M:NPOI.Util.LongField.#ctor(System.Int32,System.Int64,System.Byte[])">
            <summary>
            construct the <see cref="T:NPOI.Util.LongField"/> class with its offset into its containing
            byte array, initialize its value, and write the value to a byte
            array
            </summary>
            <param name="offset">offset of the field within its byte array</param>
            <param name="value">the initial value</param>
            <param name="data">the byte array to write the value to</param>
        </member>
        <member name="P:NPOI.Util.LongField.Value">
            <summary>
            Getg or sets the LongField's current value
            </summary>
            <value>The current value</value>
        </member>
        <member name="M:NPOI.Util.LongField.Set(System.Int64,System.Byte[])">
            <summary>
            set the LongField's current value and write it to a byte array
            </summary>
            <param name="value">value to be set</param>
            <param name="data">the byte array to write the value to</param>
        </member>
        <member name="M:NPOI.Util.LongField.ReadFromBytes(System.Byte[])">
            <summary>
            set the value from its offset into an array of bytes
            </summary>
            <param name="data">the byte array from which the value is to be read</param>
        </member>
        <member name="M:NPOI.Util.LongField.WriteToBytes(System.Byte[])">
            <summary>
            write the value out to an array of bytes at the appropriate offset
            </summary>
            <param name="data">the array of bytes to which the value is to be written</param>
        </member>
        <member name="M:NPOI.Util.LongField.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NPOI.Util.ShortField.#ctor(System.Int32)">
             <summary>
             construct the ShortField with its offset into its containing
             byte array
             </summary>
             <param name="offset">offset of the field within its byte array</param>
            <exception cref="T:System.IndexOutOfRangeException">if offset is negative</exception>
        </member>
        <member name="M:NPOI.Util.ShortField.#ctor(System.Int32,System.Byte[])">
            <summary>
            Construct the ShortField with its offset into its containing
            byte array and initialize its value from its byte array
            </summary>
            <param name="offset">offset of the field within its byte array</param>
            <param name="data">the byte array to read the value from</param>
            <exception cref="T:System.IndexOutOfRangeException">if the offset is not
            within the range of 0..(data.length - 1)</exception> 
        </member>
        <member name="M:NPOI.Util.ShortField.#ctor(System.Int32,System.Int16,System.Byte[]@)">
            <summary>
            construct the ShortField with its offset into its containing
            byte array, initialize its value, and write its value to its
            byte array
            </summary>
            <param name="offset">offset of the field within its byte array</param>
            <param name="value">the initial value</param>
            <param name="data">the byte array to write the value to</param>
            <exception cref="T:System.IndexOutOfRangeException">if offset is negative</exception>
        </member>
        <member name="P:NPOI.Util.ShortField.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:NPOI.Util.ShortField.Set(System.Int16,System.Byte[]@)">
            <summary>
            set the ShortField's current value and write it to a byte array
            </summary>
            <param name="value">value to be set</param>
            <param name="data">the byte array to write the value to</param>
            <exception cref="T:System.IndexOutOfRangeException">if the offset is out
            of range</exception>
        </member>
        <member name="M:NPOI.Util.ShortField.ReadFromBytes(System.Byte[])">
            <summary>
            set the value from its offset into an array of bytes
            </summary>
            <param name="data">the byte array from which the value is to be read</param>
            <exception cref="T:System.IndexOutOfRangeException">if the offset is out
            of range</exception>
        </member>
        <member name="M:NPOI.Util.ShortField.WriteToBytes(System.Byte[])">
            <summary>
            write the value out to an array of bytes at the appropriate
            offset
            </summary>
            <param name="data">the array of bytes to which the value is to be
            written</param>
            <exception cref="T:System.IndexOutOfRangeException">if the offset is out
            of range</exception>
        </member>
        <member name="M:NPOI.Util.ShortField.Write(System.Int32,System.Int16,System.Byte[]@)">
            <summary>
            Same as using the constructor <see cref="T:NPOI.Util.ShortField"/> with the same
            parameter list. Avoid creation of an useless object.
            </summary>
            <param name="offset">offset of the field within its byte array</param>
            <param name="value">the initial value</param>
            <param name="data">the byte array to write the value to</param>
        </member>
        <member name="M:NPOI.Util.ShortField.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
    </members>
</doc>
